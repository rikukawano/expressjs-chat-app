{"ast":null,"code":"// src/authenticateRequest.ts\nimport { buildRequestUrl, constants, createIsomorphicRequest } from \"@clerk/backend\";\nimport { handleValueOrFn } from \"@clerk/shared/handleValueOrFn\";\nimport { isHttpOrHttps, isProxyUrlRelative, isValidProxyUrl } from \"@clerk/shared/proxy\";\n\n// src/utils.ts\nimport { deprecated } from \"@clerk/shared/deprecated\";\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    void fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n      return resolve(result);\n    });\n  });\n}\nvar loadClientEnv = () => {\n  if (process.env.CLERK_FRONTEND_API) {\n    deprecated(\"CLERK_FRONTEND_API\", \"Use `CLERK_PUBLISHABLE_KEY` instead.\");\n  }\n  return {\n    publishableKey: process.env.CLERK_PUBLISHABLE_KEY || \"\",\n    frontendApi: process.env.CLERK_FRONTEND_API || \"\",\n    clerkJSUrl: process.env.CLERK_JS || \"\",\n    clerkJSVersion: process.env.CLERK_JS_VERSION || \"\"\n  };\n};\nvar loadApiEnv = () => {\n  if (process.env.CLERK_API_KEY) {\n    deprecated(\"CLERK_API_KEY\", \"Use `CLERK_SECRET_KEY` instead.\");\n  }\n  return {\n    secretKey: process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || \"\",\n    apiKey: process.env.CLERK_API_KEY || \"\",\n    apiUrl: process.env.CLERK_API_URL || \"https://api.clerk.dev\",\n    apiVersion: process.env.CLERK_API_VERSION || \"v1\",\n    domain: process.env.CLERK_DOMAIN || \"\",\n    proxyUrl: process.env.CLERK_PROXY_URL || \"\",\n    signInUrl: process.env.CLERK_SIGN_IN_URL || \"\",\n    isSatellite: process.env.CLERK_IS_SATELLITE === \"true\",\n    jwtKey: process.env.CLERK_JWT_KEY || \"\"\n  };\n};\n\n// src/authenticateRequest.ts\nasync function loadInterstitial({\n  clerkClient: clerkClient2,\n  requestState\n}) {\n  const {\n    clerkJSVersion,\n    clerkJSUrl\n  } = loadClientEnv();\n  if (requestState.publishableKey || requestState.frontendApi) {\n    return clerkClient2.localInterstitial({\n      // Use frontendApi only when legacy frontendApi is used to avoid showing deprecation warning\n      // since the requestState always contains the frontendApi constructed by publishableKey.\n      frontendApi: requestState.publishableKey ? \"\" : requestState.frontendApi,\n      publishableKey: requestState.publishableKey,\n      proxyUrl: requestState.proxyUrl,\n      signInUrl: requestState.signInUrl,\n      isSatellite: requestState.isSatellite,\n      domain: requestState.domain,\n      clerkJSVersion,\n      clerkJSUrl\n    });\n  }\n  return await clerkClient2.remotePrivateInterstitial();\n}\nvar authenticateRequest = opts => {\n  const {\n    clerkClient: clerkClient2,\n    apiKey,\n    secretKey,\n    frontendApi,\n    publishableKey,\n    req,\n    options\n  } = opts;\n  const {\n    jwtKey,\n    authorizedParties,\n    audience\n  } = options || {};\n  const env = {\n    ...loadApiEnv(),\n    ...loadClientEnv()\n  };\n  const isomorphicRequest = createIsomorphicRequest((Request, Headers) => {\n    const headers = Object.keys(req.headers).reduce((acc, key) => Object.assign(acc, {\n      [key]: req?.headers[key]\n    }), {});\n    const protocol = req.connection?.encrypted ? \"https\" : \"http\";\n    const dummyOriginReqUrl = new URL(req.url || \"\", `${protocol}://clerk-dummy`);\n    return new Request(dummyOriginReqUrl, {\n      method: req.method,\n      headers: new Headers(headers)\n    });\n  });\n  const requestUrl = buildRequestUrl(isomorphicRequest);\n  const isSatellite = handleValueOrFn(options?.isSatellite, requestUrl, env.isSatellite);\n  const domain = handleValueOrFn(options?.domain, requestUrl) || env.domain;\n  const signInUrl = options?.signInUrl || env.signInUrl;\n  const proxyUrl = absoluteProxyUrl(handleValueOrFn(options?.proxyUrl, requestUrl, env.proxyUrl), requestUrl.toString());\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(satelliteAndMissingProxyUrlAndDomain);\n  }\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(secretKey || apiKey || \"\")) {\n    throw new Error(satelliteAndMissingSignInUrl);\n  }\n  return clerkClient2.authenticateRequest({\n    audience,\n    apiKey,\n    secretKey,\n    frontendApi,\n    publishableKey,\n    jwtKey,\n    authorizedParties,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    request: isomorphicRequest\n  });\n};\nvar handleUnknownCase = (res, requestState) => {\n  if (requestState.isUnknown) {\n    res.writeHead(401, {\n      \"Content-Type\": \"text/html\"\n    });\n    res.end();\n  }\n};\nvar handleInterstitialCase = (res, requestState, interstitial) => {\n  if (requestState.isInterstitial) {\n    res.writeHead(401, {\n      \"Content-Type\": \"text/html\"\n    });\n    res.end(interstitial);\n  }\n};\nvar decorateResponseWithObservabilityHeaders = (res, requestState) => {\n  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\nvar isDevelopmentFromApiKey = apiKey => apiKey.startsWith(\"test_\") || apiKey.startsWith(\"sk_test_\");\nvar absoluteProxyUrl = (relativeOrAbsoluteUrl, baseUrl) => {\n  if (!relativeOrAbsoluteUrl || !isValidProxyUrl(relativeOrAbsoluteUrl) || !isProxyUrlRelative(relativeOrAbsoluteUrl)) {\n    return relativeOrAbsoluteUrl;\n  }\n  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();\n};\nvar satelliteAndMissingProxyUrlAndDomain = \"Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl\";\nvar satelliteAndMissingSignInUrl = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL.`;\n\n// src/clerkExpressRequireAuth.ts\nvar createClerkExpressRequireAuth = createOpts => {\n  const {\n    clerkClient: clerkClient2,\n    frontendApi = \"\",\n    apiKey = \"\",\n    secretKey = \"\",\n    publishableKey = \"\"\n  } = createOpts;\n  return (options = {}) => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient: clerkClient2,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient: clerkClient2,\n          requestState\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n      if (requestState.isSignedIn) {\n        req.auth = {\n          ...requestState.toAuth(),\n          claims: requestState.toAuth().sessionClaims\n        };\n        next();\n        return;\n      }\n      next(new Error(\"Unauthenticated\"));\n    };\n  };\n};\n\n// src/clerkExpressWithAuth.ts\nvar createClerkExpressWithAuth = createOpts => {\n  const {\n    clerkClient: clerkClient2,\n    frontendApi = \"\",\n    apiKey = \"\",\n    secretKey = \"\",\n    publishableKey = \"\"\n  } = createOpts;\n  return (options = {}) => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient: clerkClient2,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient: clerkClient2,\n          requestState\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n      req.auth = {\n        ...requestState.toAuth(),\n        claims: requestState.toAuth().sessionClaims\n      };\n      next();\n    };\n  };\n};\n\n// src/clerkClient.ts\nimport { Clerk as _Clerk, decodeJwt, verifyToken as _verifyToken } from \"@clerk/backend\";\nfunction Clerk(options) {\n  const clerkClient2 = _Clerk(options);\n  const expressWithAuth = createClerkExpressWithAuth({\n    ...options,\n    clerkClient: clerkClient2\n  });\n  const expressRequireAuth = createClerkExpressRequireAuth({\n    ...options,\n    clerkClient: clerkClient2\n  });\n  const verifyToken = (token, verifyOpts) => {\n    const issuer = iss => iss.startsWith(\"https://clerk.\") || iss.includes(\".clerk.accounts\");\n    return _verifyToken(token, {\n      issuer,\n      ...options,\n      ...verifyOpts\n    });\n  };\n  return Object.assign(clerkClient2, {\n    expressWithAuth,\n    expressRequireAuth,\n    verifyToken,\n    ...createBasePropForRedwoodCompatibility()\n  });\n}\nvar createBasePropForRedwoodCompatibility = () => {\n  const verifySessionToken = token => {\n    const {\n      jwtKey\n    } = loadApiEnv();\n    const {\n      payload\n    } = decodeJwt(token);\n    return _verifyToken(token, {\n      issuer: payload.iss,\n      jwtKey\n    });\n  };\n  return {\n    base: {\n      verifySessionToken\n    }\n  };\n};\nvar createClerkClient = Clerk;\nvar clerkClientSingleton = {};\nvar clerkClient = new Proxy(clerkClientSingleton, {\n  get(_target, property) {\n    const hasBeenInitialised = !!clerkClientSingleton.authenticateRequest;\n    if (hasBeenInitialised) {\n      return clerkClientSingleton[property];\n    }\n    const env = {\n      ...loadApiEnv(),\n      ...loadClientEnv()\n    };\n    if (env.secretKey) {\n      clerkClientSingleton = Clerk({\n        ...env,\n        userAgent: \"@clerk/clerk-sdk-node\"\n      });\n      return clerkClientSingleton[property];\n    }\n    return Clerk({\n      ...env,\n      userAgent: \"@clerk/clerk-sdk-node\"\n    })[property];\n  },\n  set() {\n    return false;\n  }\n});\nvar ClerkExpressRequireAuth = (...args) => {\n  const env = {\n    ...loadApiEnv(),\n    ...loadClientEnv()\n  };\n  const fn = createClerkExpressRequireAuth({\n    clerkClient,\n    ...env\n  });\n  return fn(...args);\n};\nvar ClerkExpressWithAuth = (...args) => {\n  const env = {\n    ...loadApiEnv(),\n    ...loadClientEnv()\n  };\n  const fn = createClerkExpressWithAuth({\n    clerkClient,\n    ...env\n  });\n  return fn(...args);\n};\nvar setClerkApiKey = value => {\n  clerkClient.__unstable_options.apiKey = value;\n};\nvar setClerkServerApiUrl = value => {\n  clerkClient.__unstable_options.apiUrl = value;\n};\nvar setClerkApiVersion = value => {\n  clerkClient.__unstable_options.apiVersion = value;\n};\nvar setClerkHttpOptions = value => {\n  clerkClient.__unstable_options.httpOptions = value;\n};\nexport { runMiddleware, createClerkExpressRequireAuth, createClerkExpressWithAuth, Clerk, createClerkClient, clerkClient, ClerkExpressRequireAuth, ClerkExpressWithAuth, setClerkApiKey, setClerkServerApiUrl, setClerkApiVersion, setClerkHttpOptions };","map":{"version":3,"names":["buildRequestUrl","constants","createIsomorphicRequest","handleValueOrFn","isHttpOrHttps","isProxyUrlRelative","isValidProxyUrl","deprecated","runMiddleware","req","res","fn","Promise","resolve","reject","result","Error","loadClientEnv","process","env","CLERK_FRONTEND_API","publishableKey","CLERK_PUBLISHABLE_KEY","frontendApi","clerkJSUrl","CLERK_JS","clerkJSVersion","CLERK_JS_VERSION","loadApiEnv","CLERK_API_KEY","secretKey","CLERK_SECRET_KEY","apiKey","apiUrl","CLERK_API_URL","apiVersion","CLERK_API_VERSION","domain","CLERK_DOMAIN","proxyUrl","CLERK_PROXY_URL","signInUrl","CLERK_SIGN_IN_URL","isSatellite","CLERK_IS_SATELLITE","jwtKey","CLERK_JWT_KEY","loadInterstitial","clerkClient","clerkClient2","requestState","localInterstitial","remotePrivateInterstitial","authenticateRequest","opts","options","authorizedParties","audience","isomorphicRequest","Request","Headers","headers","Object","keys","reduce","acc","key","assign","protocol","connection","encrypted","dummyOriginReqUrl","URL","url","method","requestUrl","absoluteProxyUrl","toString","satelliteAndMissingProxyUrlAndDomain","isDevelopmentFromApiKey","satelliteAndMissingSignInUrl","request","handleUnknownCase","isUnknown","writeHead","end","handleInterstitialCase","interstitial","isInterstitial","decorateResponseWithObservabilityHeaders","message","setHeader","AuthMessage","encodeURIComponent","reason","AuthReason","status","AuthStatus","startsWith","relativeOrAbsoluteUrl","baseUrl","createClerkExpressRequireAuth","createOpts","next","isSignedIn","auth","toAuth","claims","sessionClaims","createClerkExpressWithAuth","Clerk","_Clerk","decodeJwt","verifyToken","_verifyToken","expressWithAuth","expressRequireAuth","token","verifyOpts","issuer","iss","includes","createBasePropForRedwoodCompatibility","verifySessionToken","payload","base","createClerkClient","clerkClientSingleton","Proxy","get","_target","property","hasBeenInitialised","userAgent","set","ClerkExpressRequireAuth","args","ClerkExpressWithAuth","setClerkApiKey","value","__unstable_options","setClerkServerApiUrl","setClerkApiVersion","setClerkHttpOptions","httpOptions"],"sources":["/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/clerk-sdk-node/src/authenticateRequest.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/clerk-sdk-node/src/utils.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/clerk-sdk-node/src/clerkExpressRequireAuth.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/clerk-sdk-node/src/clerkExpressWithAuth.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/clerk-sdk-node/src/clerkClient.ts"],"sourcesContent":["import type { RequestState } from '@clerk/backend';\nimport { buildRequestUrl, constants, createIsomorphicRequest } from '@clerk/backend';\nimport { handleValueOrFn } from '@clerk/shared/handleValueOrFn';\nimport { isHttpOrHttps, isProxyUrlRelative, isValidProxyUrl } from '@clerk/shared/proxy';\nimport type { ServerResponse } from 'http';\n\nimport type { AuthenticateRequestParams, ClerkClient } from './types';\nimport { loadApiEnv, loadClientEnv } from './utils';\n\nexport async function loadInterstitial({\n  clerkClient,\n  requestState,\n}: {\n  clerkClient: ClerkClient;\n  requestState: RequestState;\n}) {\n  const { clerkJSVersion, clerkJSUrl } = loadClientEnv();\n  /**\n   * When publishable key or frontendApi is present utilize the localInterstitial method\n   * and avoid the extra network call\n   */\n  if (requestState.publishableKey || requestState.frontendApi) {\n    return clerkClient.localInterstitial({\n      // Use frontendApi only when legacy frontendApi is used to avoid showing deprecation warning\n      // since the requestState always contains the frontendApi constructed by publishableKey.\n      frontendApi: requestState.publishableKey ? '' : requestState.frontendApi,\n      publishableKey: requestState.publishableKey,\n      proxyUrl: requestState.proxyUrl,\n      signInUrl: requestState.signInUrl,\n      isSatellite: requestState.isSatellite,\n      domain: requestState.domain,\n      clerkJSVersion,\n      clerkJSUrl,\n    });\n  }\n  return await clerkClient.remotePrivateInterstitial();\n}\n\nexport const authenticateRequest = (opts: AuthenticateRequestParams) => {\n  const { clerkClient, apiKey, secretKey, frontendApi, publishableKey, req, options } = opts;\n  const { jwtKey, authorizedParties, audience } = options || {};\n\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n\n  const isomorphicRequest = createIsomorphicRequest((Request, Headers) => {\n    const headers = Object.keys(req.headers).reduce((acc, key) => Object.assign(acc, { [key]: req?.headers[key] }), {});\n\n    // @ts-ignore Optimistic attempt to get the protocol in case\n    // req extends IncomingMessage in a useful way. No guarantee\n    // it'll work.\n    const protocol = req.connection?.encrypted ? 'https' : 'http';\n    const dummyOriginReqUrl = new URL(req.url || '', `${protocol}://clerk-dummy`);\n    return new Request(dummyOriginReqUrl, {\n      method: req.method,\n      headers: new Headers(headers),\n    });\n  });\n\n  const requestUrl = buildRequestUrl(isomorphicRequest);\n  const isSatellite = handleValueOrFn(options?.isSatellite, requestUrl, env.isSatellite);\n  const domain = handleValueOrFn(options?.domain, requestUrl) || env.domain;\n  const signInUrl = options?.signInUrl || env.signInUrl;\n  const proxyUrl = absoluteProxyUrl(\n    handleValueOrFn(options?.proxyUrl, requestUrl, env.proxyUrl),\n    requestUrl.toString(),\n  );\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(satelliteAndMissingProxyUrlAndDomain);\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(secretKey || apiKey || '')) {\n    throw new Error(satelliteAndMissingSignInUrl);\n  }\n\n  return clerkClient.authenticateRequest({\n    audience,\n    apiKey,\n    secretKey,\n    frontendApi,\n    publishableKey,\n    jwtKey,\n    authorizedParties,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    request: isomorphicRequest,\n  });\n};\nexport const handleUnknownCase = (res: ServerResponse, requestState: RequestState) => {\n  if (requestState.isUnknown) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end();\n  }\n};\n\nexport const handleInterstitialCase = (res: ServerResponse, requestState: RequestState, interstitial: string) => {\n  if (requestState.isInterstitial) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end(interstitial);\n  }\n};\n\nexport const decorateResponseWithObservabilityHeaders = (res: ServerResponse, requestState: RequestState) => {\n  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\n\nconst isDevelopmentFromApiKey = (apiKey: string): boolean =>\n  apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n\nconst absoluteProxyUrl = (relativeOrAbsoluteUrl: string, baseUrl: string): string => {\n  if (!relativeOrAbsoluteUrl || !isValidProxyUrl(relativeOrAbsoluteUrl) || !isProxyUrlRelative(relativeOrAbsoluteUrl)) {\n    return relativeOrAbsoluteUrl;\n  }\n  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();\n};\n\nconst satelliteAndMissingProxyUrlAndDomain =\n  'Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl';\nconst satelliteAndMissingSignInUrl = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL.`;\n","/* eslint-disable turbo/no-undeclared-env-vars */\nimport { deprecated } from '@clerk/shared/deprecated';\nimport type { IncomingMessage, ServerResponse } from 'http';\n\n// https://nextjs.org/docs/api-routes/api-middlewares#connectexpress-middleware-support\nexport function runMiddleware(req: IncomingMessage, res: ServerResponse, fn: (...args: any) => any) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore\n    void fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n      return resolve(result);\n    });\n  });\n}\n\nexport const loadClientEnv = () => {\n  if (process.env.CLERK_FRONTEND_API) {\n    deprecated('CLERK_FRONTEND_API', 'Use `CLERK_PUBLISHABLE_KEY` instead.');\n  }\n\n  return {\n    publishableKey: process.env.CLERK_PUBLISHABLE_KEY || '',\n    frontendApi: process.env.CLERK_FRONTEND_API || '',\n    clerkJSUrl: process.env.CLERK_JS || '',\n    clerkJSVersion: process.env.CLERK_JS_VERSION || '',\n  };\n};\n\nexport const loadApiEnv = () => {\n  if (process.env.CLERK_API_KEY) {\n    deprecated('CLERK_API_KEY', 'Use `CLERK_SECRET_KEY` instead.');\n  }\n\n  return {\n    secretKey: process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || '',\n    apiKey: process.env.CLERK_API_KEY || '',\n    apiUrl: process.env.CLERK_API_URL || 'https://api.clerk.dev',\n    apiVersion: process.env.CLERK_API_VERSION || 'v1',\n    domain: process.env.CLERK_DOMAIN || '',\n    proxyUrl: process.env.CLERK_PROXY_URL || '',\n    signInUrl: process.env.CLERK_SIGN_IN_URL || '',\n    isSatellite: process.env.CLERK_IS_SATELLITE === 'true',\n    jwtKey: process.env.CLERK_JWT_KEY || '',\n  };\n};\n","import type { Clerk } from '@clerk/backend';\n\nimport {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n  loadInterstitial,\n} from './authenticateRequest';\nimport type { ClerkMiddlewareOptions, MiddlewareRequireAuthProp, RequireAuthProp } from './types';\n\nexport type CreateClerkExpressMiddlewareOptions = {\n  clerkClient: ReturnType<typeof Clerk>;\n  /**\n   * @deprecated Use `secretKey` instead.\n   */\n  apiKey?: string;\n  /* Secret Key */\n  secretKey?: string;\n  /**\n   * @deprecated Use `publishableKey` instead.\n   */\n  frontendApi?: string;\n  publishableKey?: string;\n  apiUrl?: string;\n};\n\nexport const createClerkExpressRequireAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareRequireAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient,\n          requestState,\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      if (requestState.isSignedIn) {\n        (req as RequireAuthProp<any>).auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };\n        next();\n        return;\n      }\n\n      next(new Error('Unauthenticated'));\n    };\n  };\n};\n","import {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n  loadInterstitial,\n} from './authenticateRequest';\nimport type { CreateClerkExpressMiddlewareOptions } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, MiddlewareWithAuthProp, WithAuthProp } from './types';\n\nexport const createClerkExpressWithAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareWithAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient,\n          requestState,\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      (req as WithAuthProp<any>).auth = {\n        ...requestState.toAuth(),\n        claims: requestState.toAuth().sessionClaims,\n      };\n      next();\n    };\n  };\n};\n","import type { ClerkOptions, VerifyTokenOptions } from '@clerk/backend';\nimport { Clerk as _Clerk, decodeJwt, verifyToken as _verifyToken } from '@clerk/backend';\n\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport { loadApiEnv, loadClientEnv } from './utils';\n\ntype ExtendedClerk = ReturnType<typeof _Clerk> & {\n  expressWithAuth: ReturnType<typeof createClerkExpressWithAuth>;\n  expressRequireAuth: ReturnType<typeof createClerkExpressRequireAuth>;\n  verifyToken: (token: string, verifyOpts?: Parameters<typeof _verifyToken>[1]) => ReturnType<typeof _verifyToken>;\n} & ReturnType<typeof createBasePropForRedwoodCompatibility>;\n\n/**\n * This needs to be a *named* function in order to support the older\n * new Clerk() syntax for v4 compatibility.\n * Arrow functions can never be called with the new keyword because they do not have the [[Construct]] method\n */\nexport function Clerk(options: ClerkOptions): ExtendedClerk {\n  const clerkClient = _Clerk(options);\n  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient });\n  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient });\n  const verifyToken = (token: string, verifyOpts?: VerifyTokenOptions) => {\n    const issuer = (iss: string) => iss.startsWith('https://clerk.') || iss.includes('.clerk.accounts');\n    return _verifyToken(token, { issuer, ...options, ...verifyOpts });\n  };\n\n  return Object.assign(clerkClient, {\n    expressWithAuth,\n    expressRequireAuth,\n    verifyToken,\n    ...createBasePropForRedwoodCompatibility(),\n  });\n}\n\nconst createBasePropForRedwoodCompatibility = () => {\n  const verifySessionToken = (token: string) => {\n    const { jwtKey } = loadApiEnv();\n    const { payload } = decodeJwt(token);\n    return _verifyToken(token, {\n      issuer: payload.iss,\n      jwtKey,\n    });\n  };\n  return { base: { verifySessionToken } };\n};\n\nexport const createClerkClient = Clerk;\n\nlet clerkClientSingleton = {} as unknown as ReturnType<typeof Clerk>;\n\nexport const clerkClient = new Proxy(clerkClientSingleton, {\n  get(_target, property) {\n    const hasBeenInitialised = !!clerkClientSingleton.authenticateRequest;\n    if (hasBeenInitialised) {\n      // @ts-expect-error\n      return clerkClientSingleton[property];\n    }\n\n    const env = { ...loadApiEnv(), ...loadClientEnv() };\n    if (env.secretKey) {\n      clerkClientSingleton = Clerk({ ...env, userAgent: '@clerk/clerk-sdk-node' });\n      // @ts-expect-error\n      return clerkClientSingleton[property];\n    }\n\n    // @ts-expect-error\n    return Clerk({ ...env, userAgent: '@clerk/clerk-sdk-node' })[property];\n  },\n  set() {\n    return false;\n  },\n});\n\n/**\n * Stand-alone express middlewares bound to the pre-initialised clerkClient\n */\nexport const ClerkExpressRequireAuth = (...args: Parameters<ReturnType<typeof createClerkExpressRequireAuth>>) => {\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n  const fn = createClerkExpressRequireAuth({ clerkClient, ...env });\n  return fn(...args);\n};\n\nexport const ClerkExpressWithAuth = (...args: Parameters<ReturnType<typeof createClerkExpressWithAuth>>) => {\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n  const fn = createClerkExpressWithAuth({ clerkClient, ...env });\n  return fn(...args);\n};\n\n/**\n * Stand-alone setters bound to the pre-initialised clerkClient\n */\nexport const setClerkApiKey = (value: string) => {\n  clerkClient.__unstable_options.apiKey = value;\n};\n\nexport const setClerkServerApiUrl = (value: string) => {\n  clerkClient.__unstable_options.apiUrl = value;\n};\n\nexport const setClerkApiVersion = (value: string) => {\n  clerkClient.__unstable_options.apiVersion = value;\n};\n\nexport const setClerkHttpOptions = (value: RequestInit) => {\n  clerkClient.__unstable_options.httpOptions = value;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}