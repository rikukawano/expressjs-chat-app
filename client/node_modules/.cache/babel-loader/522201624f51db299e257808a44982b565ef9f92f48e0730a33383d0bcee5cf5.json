{"ast":null,"code":"// src/index.ts\nimport { deprecatedObjectProperty as deprecatedObjectProperty2 } from \"@clerk/shared/deprecated\";\n\n// src/api/endpoints/AbstractApi.ts\nvar AbstractAPI = class {\n  constructor(request) {\n    this.request = request;\n  }\n  requireId(id) {\n    if (!id) {\n      throw new Error(\"A valid resource ID is required.\");\n    }\n  }\n};\n\n// src/util/path.ts\nvar SEPARATOR = \"/\";\nvar MULTIPLE_SEPARATOR_REGEX = new RegExp(SEPARATOR + \"{1,}\", \"g\");\nfunction joinPaths(...args) {\n  return args.filter(p => p).join(SEPARATOR).replace(MULTIPLE_SEPARATOR_REGEX, SEPARATOR);\n}\n\n// src/api/endpoints/AllowlistIdentifierApi.ts\nvar basePath = \"/allowlist_identifiers\";\nvar AllowlistIdentifierAPI = class extends AbstractAPI {\n  async getAllowlistIdentifierList() {\n    return this.request({\n      method: \"GET\",\n      path: basePath\n    });\n  }\n  async createAllowlistIdentifier(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath,\n      bodyParams: params\n    });\n  }\n  async deleteAllowlistIdentifier(allowlistIdentifierId) {\n    this.requireId(allowlistIdentifierId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath, allowlistIdentifierId)\n    });\n  }\n};\n\n// src/api/endpoints/ClientApi.ts\nvar basePath2 = \"/clients\";\nvar ClientAPI = class extends AbstractAPI {\n  async getClientList() {\n    return this.request({\n      method: \"GET\",\n      path: basePath2\n    });\n  }\n  async getClient(clientId) {\n    this.requireId(clientId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath2, clientId)\n    });\n  }\n  verifyClient(token) {\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath2, \"verify\"),\n      bodyParams: {\n        token\n      }\n    });\n  }\n};\n\n// src/api/endpoints/DomainApi.ts\nvar basePath3 = \"/domains\";\nvar DomainAPI = class extends AbstractAPI {\n  async deleteDomain(id) {\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath3, id)\n    });\n  }\n};\n\n// src/api/endpoints/EmailAddressApi.ts\nvar basePath4 = \"/email_addresses\";\nvar EmailAddressAPI = class extends AbstractAPI {\n  async getEmailAddress(emailAddressId) {\n    this.requireId(emailAddressId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath4, emailAddressId)\n    });\n  }\n  async createEmailAddress(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath4,\n      bodyParams: params\n    });\n  }\n  async updateEmailAddress(emailAddressId, params = {}) {\n    this.requireId(emailAddressId);\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath4, emailAddressId),\n      bodyParams: params\n    });\n  }\n  async deleteEmailAddress(emailAddressId) {\n    this.requireId(emailAddressId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath4, emailAddressId)\n    });\n  }\n};\n\n// src/api/endpoints/EmailApi.ts\nimport { deprecated } from \"@clerk/shared/deprecated\";\nvar basePath5 = \"/emails\";\nvar EmailAPI = class extends AbstractAPI {\n  /**\n   * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n   */\n  async createEmail(params) {\n    deprecated(\"EmailAPI.createEmail\", \"This endpoint is no longer available and the function will be removed in the next major version.\");\n    return this.request({\n      method: \"POST\",\n      path: basePath5,\n      bodyParams: params\n    });\n  }\n};\n\n// src/util/shared.ts\nimport { addClerkPrefix, getScriptUrl, getClerkJsMajorVersionOrTag } from \"@clerk/shared/url\";\nimport { callWithRetry } from \"@clerk/shared/callWithRetry\";\nimport { isDevelopmentFromApiKey, isProductionFromApiKey, parsePublishableKey } from \"@clerk/shared/keys\";\nimport { deprecated as deprecated2, deprecatedProperty } from \"@clerk/shared/deprecated\";\nimport { buildErrorThrower } from \"@clerk/shared/error\";\nimport { createDevOrStagingUrlCache } from \"@clerk/shared/keys\";\nvar errorThrower = buildErrorThrower({\n  packageName: \"@clerk/backend\"\n});\nvar {\n  isDevOrStagingUrl\n} = createDevOrStagingUrlCache();\n\n// src/api/endpoints/InterstitialApi.ts\nvar InterstitialAPI = class extends AbstractAPI {\n  async getInterstitial() {\n    deprecated2(\"getInterstitial()\", 'Switch to `Clerk(...).localInterstitial(...)` from `import { Clerk } from \"@clerk/backend\"`.');\n    return this.request({\n      path: \"internal/interstitial\",\n      method: \"GET\",\n      headerParams: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n};\n\n// src/api/endpoints/InvitationApi.ts\nvar basePath6 = \"/invitations\";\nvar InvitationAPI = class extends AbstractAPI {\n  async getInvitationList(params = {}) {\n    return this.request({\n      method: \"GET\",\n      path: basePath6,\n      queryParams: params\n    });\n  }\n  async createInvitation(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath6,\n      bodyParams: params\n    });\n  }\n  async revokeInvitation(invitationId) {\n    this.requireId(invitationId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath6, invitationId, \"revoke\")\n    });\n  }\n};\n\n// src/api/endpoints/OrganizationApi.ts\nimport { deprecated as deprecated3 } from \"@clerk/shared/deprecated\";\n\n// src/runtime/index.ts\nimport crypto from \"#crypto\";\nimport * as fetchApisPolyfill from \"#fetch\";\nvar {\n  RuntimeFetch,\n  RuntimeAbortController,\n  RuntimeBlob,\n  RuntimeFormData,\n  RuntimeHeaders,\n  RuntimeRequest,\n  RuntimeResponse\n} = fetchApisPolyfill;\nvar globalFetch = RuntimeFetch.bind(globalThis);\nvar runtime = {\n  crypto,\n  fetch: globalFetch,\n  AbortController: RuntimeAbortController,\n  Blob: RuntimeBlob,\n  FormData: RuntimeFormData,\n  Headers: RuntimeHeaders,\n  Request: RuntimeRequest,\n  Response: RuntimeResponse\n};\nvar runtime_default = runtime;\n\n// src/api/endpoints/OrganizationApi.ts\nvar basePath7 = \"/organizations\";\nvar OrganizationAPI = class extends AbstractAPI {\n  async getOrganizationList(params) {\n    return this.request({\n      method: \"GET\",\n      path: basePath7,\n      queryParams: params\n    });\n  }\n  async createOrganization(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath7,\n      bodyParams: params\n    });\n  }\n  async getOrganization(params) {\n    const organizationIdOrSlug = \"organizationId\" in params ? params.organizationId : params.slug;\n    this.requireId(organizationIdOrSlug);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath7, organizationIdOrSlug)\n    });\n  }\n  async updateOrganization(organizationId, params) {\n    this.requireId(organizationId);\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath7, organizationId),\n      bodyParams: params\n    });\n  }\n  async updateOrganizationLogo(organizationId, params) {\n    this.requireId(organizationId);\n    const formData = new runtime_default.FormData();\n    formData.append(\"file\", params?.file);\n    formData.append(\"uploader_user_id\", params?.uploaderUserId);\n    return this.request({\n      method: \"PUT\",\n      path: joinPaths(basePath7, organizationId, \"logo\"),\n      formData\n    });\n  }\n  async deleteOrganizationLogo(organizationId) {\n    this.requireId(organizationId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath7, organizationId, \"logo\")\n    });\n  }\n  async updateOrganizationMetadata(organizationId, params) {\n    this.requireId(organizationId);\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath7, organizationId, \"metadata\"),\n      bodyParams: params\n    });\n  }\n  async deleteOrganization(organizationId) {\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath7, organizationId)\n    });\n  }\n  async getOrganizationMembershipList(params) {\n    const {\n      organizationId,\n      limit,\n      offset\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath7, organizationId, \"memberships\"),\n      queryParams: {\n        limit,\n        offset\n      }\n    });\n  }\n  async createOrganizationMembership(params) {\n    const {\n      organizationId,\n      userId,\n      role\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath7, organizationId, \"memberships\"),\n      bodyParams: {\n        userId,\n        role\n      }\n    });\n  }\n  async updateOrganizationMembership(params) {\n    const {\n      organizationId,\n      userId,\n      role\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath7, organizationId, \"memberships\", userId),\n      bodyParams: {\n        role\n      }\n    });\n  }\n  async updateOrganizationMembershipMetadata(params) {\n    const {\n      organizationId,\n      userId,\n      publicMetadata,\n      privateMetadata\n    } = params;\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath7, organizationId, \"memberships\", userId, \"metadata\"),\n      bodyParams: {\n        publicMetadata,\n        privateMetadata\n      }\n    });\n  }\n  async deleteOrganizationMembership(params) {\n    const {\n      organizationId,\n      userId\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath7, organizationId, \"memberships\", userId)\n    });\n  }\n  async getOrganizationInvitationList(params) {\n    const {\n      organizationId,\n      status,\n      limit,\n      offset\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath7, organizationId, \"invitations\"),\n      queryParams: {\n        status,\n        limit,\n        offset\n      }\n    });\n  }\n  /**\n   * @deprecated  Use `getOrganizationInvitationList` instead along with the status parameter.\n   */\n  async getPendingOrganizationInvitationList(params) {\n    deprecated3(\"getPendingOrganizationInvitationList\", \"Use `getOrganizationInvitationList` instead.\");\n    const {\n      organizationId,\n      limit,\n      offset\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath7, organizationId, \"invitations\", \"pending\"),\n      queryParams: {\n        limit,\n        offset\n      }\n    });\n  }\n  async createOrganizationInvitation(params) {\n    const {\n      organizationId,\n      ...bodyParams\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath7, organizationId, \"invitations\"),\n      bodyParams: {\n        ...bodyParams\n      }\n    });\n  }\n  async getOrganizationInvitation(params) {\n    const {\n      organizationId,\n      invitationId\n    } = params;\n    this.requireId(organizationId);\n    this.requireId(invitationId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath7, organizationId, \"invitations\", invitationId)\n    });\n  }\n  async revokeOrganizationInvitation(params) {\n    const {\n      organizationId,\n      invitationId,\n      requestingUserId\n    } = params;\n    this.requireId(organizationId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath7, organizationId, \"invitations\", invitationId, \"revoke\"),\n      bodyParams: {\n        requestingUserId\n      }\n    });\n  }\n};\n\n// src/api/endpoints/PhoneNumberApi.ts\nvar basePath8 = \"/phone_numbers\";\nvar PhoneNumberAPI = class extends AbstractAPI {\n  async getPhoneNumber(phoneNumberId) {\n    this.requireId(phoneNumberId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath8, phoneNumberId)\n    });\n  }\n  async createPhoneNumber(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath8,\n      bodyParams: params\n    });\n  }\n  async updatePhoneNumber(phoneNumberId, params = {}) {\n    this.requireId(phoneNumberId);\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath8, phoneNumberId),\n      bodyParams: params\n    });\n  }\n  async deletePhoneNumber(phoneNumberId) {\n    this.requireId(phoneNumberId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath8, phoneNumberId)\n    });\n  }\n};\n\n// src/api/endpoints/RedirectUrlApi.ts\nvar basePath9 = \"/redirect_urls\";\nvar RedirectUrlAPI = class extends AbstractAPI {\n  async getRedirectUrlList() {\n    return this.request({\n      method: \"GET\",\n      path: basePath9\n    });\n  }\n  async getRedirectUrl(redirectUrlId) {\n    this.requireId(redirectUrlId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath9, redirectUrlId)\n    });\n  }\n  async createRedirectUrl(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath9,\n      bodyParams: params\n    });\n  }\n  async deleteRedirectUrl(redirectUrlId) {\n    this.requireId(redirectUrlId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath9, redirectUrlId)\n    });\n  }\n};\n\n// src/api/endpoints/SessionApi.ts\nvar basePath10 = \"/sessions\";\nvar SessionAPI = class extends AbstractAPI {\n  async getSessionList(queryParams) {\n    return this.request({\n      method: \"GET\",\n      path: basePath10,\n      queryParams\n    });\n  }\n  async getSession(sessionId) {\n    this.requireId(sessionId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath10, sessionId)\n    });\n  }\n  async revokeSession(sessionId) {\n    this.requireId(sessionId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath10, sessionId, \"revoke\")\n    });\n  }\n  async verifySession(sessionId, token) {\n    this.requireId(sessionId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath10, sessionId, \"verify\"),\n      bodyParams: {\n        token\n      }\n    });\n  }\n  async getToken(sessionId, template) {\n    this.requireId(sessionId);\n    return (await this.request({\n      method: \"POST\",\n      path: joinPaths(basePath10, sessionId, \"tokens\", template || \"\")\n    })).jwt;\n  }\n};\n\n// src/api/endpoints/SignInTokenApi.ts\nvar basePath11 = \"/sign_in_tokens\";\nvar SignInTokenAPI = class extends AbstractAPI {\n  async createSignInToken(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath11,\n      bodyParams: params\n    });\n  }\n  async revokeSignInToken(signInTokenId) {\n    this.requireId(signInTokenId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath11, signInTokenId, \"revoke\")\n    });\n  }\n};\n\n// src/api/endpoints/SMSMessageApi.ts\nimport { deprecated as deprecated4 } from \"@clerk/shared/deprecated\";\nvar basePath12 = \"/sms_messages\";\nvar SMSMessageAPI = class extends AbstractAPI {\n  /**\n   * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n   */\n  async createSMSMessage(params) {\n    deprecated4(\"SMSMessageAPI.createSMSMessage\", \"This endpoint is no longer available and the function will be removed in the next major version.\");\n    return this.request({\n      method: \"POST\",\n      path: basePath12,\n      bodyParams: params\n    });\n  }\n};\n\n// src/api/endpoints/UserApi.ts\nvar basePath13 = \"/users\";\nvar UserAPI = class extends AbstractAPI {\n  async getUserList(params = {}) {\n    return this.request({\n      method: \"GET\",\n      path: basePath13,\n      queryParams: params\n    });\n  }\n  async getUser(userId) {\n    this.requireId(userId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath13, userId)\n    });\n  }\n  async createUser(params) {\n    return this.request({\n      method: \"POST\",\n      path: basePath13,\n      bodyParams: params\n    });\n  }\n  async updateUser(userId, params = {}) {\n    this.requireId(userId);\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath13, userId),\n      bodyParams: params\n    });\n  }\n  async updateUserProfileImage(userId, params) {\n    this.requireId(userId);\n    const formData = new runtime_default.FormData();\n    formData.append(\"file\", params?.file);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath13, userId, \"profile_image\"),\n      formData\n    });\n  }\n  async updateUserMetadata(userId, params) {\n    this.requireId(userId);\n    return this.request({\n      method: \"PATCH\",\n      path: joinPaths(basePath13, userId, \"metadata\"),\n      bodyParams: params\n    });\n  }\n  async deleteUser(userId) {\n    this.requireId(userId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath13, userId)\n    });\n  }\n  async getCount(params = {}) {\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath13, \"count\"),\n      queryParams: params\n    });\n  }\n  async getUserOauthAccessToken(userId, provider) {\n    this.requireId(userId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath13, userId, \"oauth_access_tokens\", provider)\n    });\n  }\n  async disableUserMFA(userId) {\n    this.requireId(userId);\n    return this.request({\n      method: \"DELETE\",\n      path: joinPaths(basePath13, userId, \"mfa\")\n    });\n  }\n  async getOrganizationMembershipList(params) {\n    const {\n      userId,\n      limit,\n      offset\n    } = params;\n    this.requireId(userId);\n    return this.request({\n      method: \"GET\",\n      path: joinPaths(basePath13, userId, \"organization_memberships\"),\n      queryParams: {\n        limit,\n        offset\n      }\n    });\n  }\n  async verifyPassword(params) {\n    const {\n      userId,\n      password\n    } = params;\n    this.requireId(userId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath13, userId, \"verify_password\"),\n      bodyParams: {\n        password\n      }\n    });\n  }\n  async verifyTOTP(params) {\n    const {\n      userId,\n      code\n    } = params;\n    this.requireId(userId);\n    return this.request({\n      method: \"POST\",\n      path: joinPaths(basePath13, userId, \"verify_totp\"),\n      bodyParams: {\n        code\n      }\n    });\n  }\n};\n\n// src/api/request.ts\nimport { ClerkAPIResponseError } from \"@clerk/shared/error\";\nimport deepmerge from \"deepmerge\";\nimport snakecaseKeys from \"snakecase-keys\";\n\n// src/constants.ts\nvar API_URL = \"https://api.clerk.dev\";\nvar API_VERSION = \"v1\";\nvar USER_AGENT = `${\"@clerk/backend\"}@${\"0.38.0\"}`;\nvar MAX_CACHE_LAST_UPDATED_AT_SECONDS = 5 * 60;\nvar Attributes = {\n  AuthToken: \"__clerkAuthToken\",\n  AuthStatus: \"__clerkAuthStatus\",\n  AuthReason: \"__clerkAuthReason\",\n  AuthMessage: \"__clerkAuthMessage\"\n};\nvar Cookies = {\n  Session: \"__session\",\n  ClientUat: \"__client_uat\"\n};\nvar Headers = {\n  AuthToken: \"x-clerk-auth-token\",\n  AuthStatus: \"x-clerk-auth-status\",\n  AuthReason: \"x-clerk-auth-reason\",\n  AuthMessage: \"x-clerk-auth-message\",\n  EnableDebug: \"x-clerk-debug\",\n  ClerkRedirectTo: \"x-clerk-redirect-to\",\n  CloudFrontForwardedProto: \"cloudfront-forwarded-proto\",\n  Authorization: \"authorization\",\n  ForwardedPort: \"x-forwarded-port\",\n  ForwardedProto: \"x-forwarded-proto\",\n  ForwardedHost: \"x-forwarded-host\",\n  Referrer: \"referer\",\n  UserAgent: \"user-agent\",\n  Origin: \"origin\",\n  Host: \"host\",\n  ContentType: \"content-type\"\n};\nvar SearchParams = {\n  AuthStatus: Headers.AuthStatus,\n  AuthToken: Headers.AuthToken\n};\nvar ContentTypes = {\n  Json: \"application/json\"\n};\nvar constants = {\n  Attributes,\n  Cookies,\n  Headers,\n  SearchParams,\n  ContentTypes\n};\n\n// src/util/assertValidSecretKey.ts\nfunction assertValidSecretKey(val) {\n  if (!val || typeof val !== \"string\") {\n    throw Error(\"Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.\");\n  }\n}\n\n// src/api/resources/AllowlistIdentifier.ts\nvar AllowlistIdentifier = class _AllowlistIdentifier {\n  constructor(id, identifier, createdAt, updatedAt, invitationId) {\n    this.id = id;\n    this.identifier = identifier;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n    this.invitationId = invitationId;\n  }\n  static fromJSON(data) {\n    return new _AllowlistIdentifier(data.id, data.identifier, data.created_at, data.updated_at, data.invitation_id);\n  }\n};\n\n// src/api/resources/Session.ts\nvar Session = class _Session {\n  constructor(id, clientId, userId, status, lastActiveAt, expireAt, abandonAt, createdAt, updatedAt) {\n    this.id = id;\n    this.clientId = clientId;\n    this.userId = userId;\n    this.status = status;\n    this.lastActiveAt = lastActiveAt;\n    this.expireAt = expireAt;\n    this.abandonAt = abandonAt;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n  }\n  static fromJSON(data) {\n    return new _Session(data.id, data.client_id, data.user_id, data.status, data.last_active_at, data.expire_at, data.abandon_at, data.created_at, data.updated_at);\n  }\n};\n\n// src/api/resources/Client.ts\nvar Client = class _Client {\n  constructor(id, sessionIds, sessions, signInId, signUpId, lastActiveSessionId, createdAt, updatedAt) {\n    this.id = id;\n    this.sessionIds = sessionIds;\n    this.sessions = sessions;\n    this.signInId = signInId;\n    this.signUpId = signUpId;\n    this.lastActiveSessionId = lastActiveSessionId;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n  }\n  static fromJSON(data) {\n    return new _Client(data.id, data.session_ids, data.sessions.map(x => Session.fromJSON(x)), data.sign_in_id, data.sign_up_id, data.last_active_session_id, data.created_at, data.updated_at);\n  }\n};\n\n// src/api/resources/DeletedObject.ts\nvar DeletedObject = class _DeletedObject {\n  constructor(object, id, slug, deleted) {\n    this.object = object;\n    this.id = id;\n    this.slug = slug;\n    this.deleted = deleted;\n  }\n  static fromJSON(data) {\n    return new _DeletedObject(data.object, data.id || null, data.slug || null, data.deleted);\n  }\n};\n\n// src/api/resources/Email.ts\nvar Email = class _Email {\n  constructor(id, fromEmailName, emailAddressId, toEmailAddress, subject, body, bodyPlain, status, slug, data, deliveredByClerk) {\n    this.id = id;\n    this.fromEmailName = fromEmailName;\n    this.emailAddressId = emailAddressId;\n    this.toEmailAddress = toEmailAddress;\n    this.subject = subject;\n    this.body = body;\n    this.bodyPlain = bodyPlain;\n    this.status = status;\n    this.slug = slug;\n    this.data = data;\n    this.deliveredByClerk = deliveredByClerk;\n  }\n  static fromJSON(data) {\n    return new _Email(data.id, data.from_email_name, data.email_address_id, data.to_email_address, data.subject, data.body, data.body_plain, data.status, data.slug, data.data, data.delivered_by_clerk);\n  }\n};\n\n// src/api/resources/IdentificationLink.ts\nvar IdentificationLink = class _IdentificationLink {\n  constructor(id, type) {\n    this.id = id;\n    this.type = type;\n  }\n  static fromJSON(data) {\n    return new _IdentificationLink(data.id, data.type);\n  }\n};\n\n// src/api/resources/Verification.ts\nvar Verification = class _Verification {\n  constructor(status, strategy, externalVerificationRedirectURL = null, attempts = null, expireAt = null, nonce = null) {\n    this.status = status;\n    this.strategy = strategy;\n    this.externalVerificationRedirectURL = externalVerificationRedirectURL;\n    this.attempts = attempts;\n    this.expireAt = expireAt;\n    this.nonce = nonce;\n  }\n  static fromJSON(data) {\n    return new _Verification(data.status, data.strategy, data.external_verification_redirect_url ? new URL(data.external_verification_redirect_url) : null, data.attempts, data.expire_at, data.nonce);\n  }\n};\n\n// src/api/resources/EmailAddress.ts\nvar EmailAddress = class _EmailAddress {\n  constructor(id, emailAddress, verification, linkedTo) {\n    this.id = id;\n    this.emailAddress = emailAddress;\n    this.verification = verification;\n    this.linkedTo = linkedTo;\n  }\n  static fromJSON(data) {\n    return new _EmailAddress(data.id, data.email_address, data.verification && Verification.fromJSON(data.verification), data.linked_to.map(link => IdentificationLink.fromJSON(link)));\n  }\n};\n\n// src/api/resources/ExternalAccount.ts\nvar ExternalAccount = class _ExternalAccount {\n  constructor(id, provider, identificationId, externalId, approvedScopes, emailAddress, firstName, lastName, picture, imageUrl, username, publicMetadata = {}, label, verification) {\n    this.id = id;\n    this.provider = provider;\n    this.identificationId = identificationId;\n    this.externalId = externalId;\n    this.approvedScopes = approvedScopes;\n    this.emailAddress = emailAddress;\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.picture = picture;\n    this.imageUrl = imageUrl;\n    this.username = username;\n    this.publicMetadata = publicMetadata;\n    this.label = label;\n    this.verification = verification;\n  }\n  static fromJSON(data) {\n    return new _ExternalAccount(data.id, data.provider, data.identification_id, data.provider_user_id, data.approved_scopes, data.email_address, data.first_name, data.last_name, data.avatar_url, data.image_url, data.username, data.public_metadata, data.label, data.verification && Verification.fromJSON(data.verification));\n  }\n};\ndeprecatedProperty(ExternalAccount, \"picture\", \"Use `imageUrl` instead.\");\n\n// src/api/resources/Invitation.ts\nvar Invitation = class _Invitation {\n  constructor(id, emailAddress, publicMetadata, createdAt, updatedAt, status, revoked) {\n    this.id = id;\n    this.emailAddress = emailAddress;\n    this.publicMetadata = publicMetadata;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n    this.status = status;\n    this.revoked = revoked;\n  }\n  static fromJSON(data) {\n    return new _Invitation(data.id, data.email_address, data.public_metadata, data.created_at, data.updated_at, data.status, data.revoked);\n  }\n};\n\n// src/api/resources/JSON.ts\nvar ObjectType = /* @__PURE__ */(ObjectType2 => {\n  ObjectType2[\"AllowlistIdentifier\"] = \"allowlist_identifier\";\n  ObjectType2[\"Client\"] = \"client\";\n  ObjectType2[\"Email\"] = \"email\";\n  ObjectType2[\"EmailAddress\"] = \"email_address\";\n  ObjectType2[\"ExternalAccount\"] = \"external_account\";\n  ObjectType2[\"FacebookAccount\"] = \"facebook_account\";\n  ObjectType2[\"GoogleAccount\"] = \"google_account\";\n  ObjectType2[\"Invitation\"] = \"invitation\";\n  ObjectType2[\"OauthAccessToken\"] = \"oauth_access_token\";\n  ObjectType2[\"Organization\"] = \"organization\";\n  ObjectType2[\"OrganizationInvitation\"] = \"organization_invitation\";\n  ObjectType2[\"OrganizationMembership\"] = \"organization_membership\";\n  ObjectType2[\"PhoneNumber\"] = \"phone_number\";\n  ObjectType2[\"RedirectUrl\"] = \"redirect_url\";\n  ObjectType2[\"Session\"] = \"session\";\n  ObjectType2[\"SignInAttempt\"] = \"sign_in_attempt\";\n  ObjectType2[\"SignInToken\"] = \"sign_in_token\";\n  ObjectType2[\"SignUpAttempt\"] = \"sign_up_attempt\";\n  ObjectType2[\"SmsMessage\"] = \"sms_message\";\n  ObjectType2[\"User\"] = \"user\";\n  ObjectType2[\"Web3Wallet\"] = \"web3_wallet\";\n  ObjectType2[\"Token\"] = \"token\";\n  ObjectType2[\"TotalCount\"] = \"total_count\";\n  return ObjectType2;\n})(ObjectType || {});\n\n// src/api/resources/OauthAccessToken.ts\nvar OauthAccessToken = class _OauthAccessToken {\n  constructor(provider, token, publicMetadata = {}, label, scopes, tokenSecret) {\n    this.provider = provider;\n    this.token = token;\n    this.publicMetadata = publicMetadata;\n    this.label = label;\n    this.scopes = scopes;\n    this.tokenSecret = tokenSecret;\n  }\n  static fromJSON(data) {\n    return new _OauthAccessToken(data.provider, data.token, data.public_metadata, data.label, data.scopes, data.token_secret);\n  }\n};\n\n// src/api/resources/Organization.ts\nvar Organization = class _Organization {\n  constructor(id, name, slug, logoUrl, imageUrl, hasImage, createdBy, createdAt, updatedAt, publicMetadata = {}, privateMetadata = {}, maxAllowedMemberships, adminDeleteEnabled, members_count) {\n    this.id = id;\n    this.name = name;\n    this.slug = slug;\n    this.logoUrl = logoUrl;\n    this.imageUrl = imageUrl;\n    this.hasImage = hasImage;\n    this.createdBy = createdBy;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n    this.publicMetadata = publicMetadata;\n    this.privateMetadata = privateMetadata;\n    this.maxAllowedMemberships = maxAllowedMemberships;\n    this.adminDeleteEnabled = adminDeleteEnabled;\n    this.members_count = members_count;\n  }\n  static fromJSON(data) {\n    return new _Organization(data.id, data.name, data.slug, data.logo_url, data.image_url, data.has_image, data.created_by, data.created_at, data.updated_at, data.public_metadata, data.private_metadata, data.max_allowed_memberships, data.admin_delete_enabled, data.members_count);\n  }\n};\ndeprecatedProperty(Organization, \"logoUrl\", \"Use `imageUrl` instead.\");\n\n// src/api/resources/OrganizationInvitation.ts\nvar OrganizationInvitation = class _OrganizationInvitation {\n  constructor(id, emailAddress, role, organizationId, createdAt, updatedAt, status, publicMetadata = {}, privateMetadata = {}) {\n    this.id = id;\n    this.emailAddress = emailAddress;\n    this.role = role;\n    this.organizationId = organizationId;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n    this.status = status;\n    this.publicMetadata = publicMetadata;\n    this.privateMetadata = privateMetadata;\n  }\n  static fromJSON(data) {\n    return new _OrganizationInvitation(data.id, data.email_address, data.role, data.organization_id, data.created_at, data.updated_at, data.status, data.public_metadata, data.private_metadata);\n  }\n};\n\n// src/api/resources/OrganizationMembership.ts\nvar OrganizationMembership = class _OrganizationMembership {\n  constructor(id, role, publicMetadata = {}, privateMetadata = {}, createdAt, updatedAt, organization, publicUserData) {\n    this.id = id;\n    this.role = role;\n    this.publicMetadata = publicMetadata;\n    this.privateMetadata = privateMetadata;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n    this.organization = organization;\n    this.publicUserData = publicUserData;\n  }\n  static fromJSON(data) {\n    return new _OrganizationMembership(data.id, data.role, data.public_metadata, data.private_metadata, data.created_at, data.updated_at, Organization.fromJSON(data.organization), OrganizationMembershipPublicUserData.fromJSON(data.public_user_data));\n  }\n};\nvar OrganizationMembershipPublicUserData = class _OrganizationMembershipPublicUserData {\n  constructor(identifier, firstName, lastName, profileImageUrl, imageUrl, hasImage, userId) {\n    this.identifier = identifier;\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.profileImageUrl = profileImageUrl;\n    this.imageUrl = imageUrl;\n    this.hasImage = hasImage;\n    this.userId = userId;\n  }\n  static fromJSON(data) {\n    return new _OrganizationMembershipPublicUserData(data.identifier, data.first_name, data.last_name, data.profile_image_url, data.image_url, data.has_image, data.user_id);\n  }\n};\ndeprecatedProperty(OrganizationMembershipPublicUserData, \"profileImageUrl\", \"Use `imageUrl` instead.\");\n\n// src/api/resources/PhoneNumber.ts\nvar PhoneNumber = class _PhoneNumber {\n  constructor(id, phoneNumber, reservedForSecondFactor, defaultSecondFactor, verification, linkedTo) {\n    this.id = id;\n    this.phoneNumber = phoneNumber;\n    this.reservedForSecondFactor = reservedForSecondFactor;\n    this.defaultSecondFactor = defaultSecondFactor;\n    this.verification = verification;\n    this.linkedTo = linkedTo;\n  }\n  static fromJSON(data) {\n    return new _PhoneNumber(data.id, data.phone_number, data.reserved_for_second_factor, data.default_second_factor, data.verification && Verification.fromJSON(data.verification), data.linked_to.map(link => IdentificationLink.fromJSON(link)));\n  }\n};\n\n// src/api/resources/RedirectUrl.ts\nvar RedirectUrl = class _RedirectUrl {\n  constructor(id, url, createdAt, updatedAt) {\n    this.id = id;\n    this.url = url;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n  }\n  static fromJSON(data) {\n    return new _RedirectUrl(data.id, data.url, data.created_at, data.updated_at);\n  }\n};\n\n// src/api/resources/SignInTokens.ts\nvar SignInToken = class _SignInToken {\n  constructor(id, userId, token, status, url, createdAt, updatedAt) {\n    this.id = id;\n    this.userId = userId;\n    this.token = token;\n    this.status = status;\n    this.url = url;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n  }\n  static fromJSON(data) {\n    return new _SignInToken(data.id, data.user_id, data.token, data.status, data.url, data.created_at, data.updated_at);\n  }\n};\n\n// src/api/resources/SMSMessage.ts\nvar SMSMessage = class _SMSMessage {\n  constructor(id, fromPhoneNumber, toPhoneNumber, message, status, phoneNumberId, data) {\n    this.id = id;\n    this.fromPhoneNumber = fromPhoneNumber;\n    this.toPhoneNumber = toPhoneNumber;\n    this.message = message;\n    this.status = status;\n    this.phoneNumberId = phoneNumberId;\n    this.data = data;\n  }\n  static fromJSON(data) {\n    return new _SMSMessage(data.id, data.from_phone_number, data.to_phone_number, data.message, data.status, data.phone_number_id, data.data);\n  }\n};\n\n// src/api/resources/Token.ts\nvar Token = class _Token {\n  constructor(jwt) {\n    this.jwt = jwt;\n  }\n  static fromJSON(data) {\n    return new _Token(data.jwt);\n  }\n};\n\n// src/api/resources/Web3Wallet.ts\nvar Web3Wallet = class _Web3Wallet {\n  constructor(id, web3Wallet, verification) {\n    this.id = id;\n    this.web3Wallet = web3Wallet;\n    this.verification = verification;\n  }\n  static fromJSON(data) {\n    return new _Web3Wallet(data.id, data.web3_wallet, data.verification && Verification.fromJSON(data.verification));\n  }\n};\n\n// src/api/resources/User.ts\nvar User = class _User {\n  constructor(id, passwordEnabled, totpEnabled, backupCodeEnabled, twoFactorEnabled, banned, createdAt, updatedAt, profileImageUrl, imageUrl, hasImage, gender, birthday, primaryEmailAddressId, primaryPhoneNumberId, primaryWeb3WalletId, lastSignInAt, externalId, username, firstName, lastName, publicMetadata = {}, privateMetadata = {}, unsafeMetadata = {}, emailAddresses = [], phoneNumbers = [], web3Wallets = [], externalAccounts = [], createOrganizationEnabled) {\n    this.id = id;\n    this.passwordEnabled = passwordEnabled;\n    this.totpEnabled = totpEnabled;\n    this.backupCodeEnabled = backupCodeEnabled;\n    this.twoFactorEnabled = twoFactorEnabled;\n    this.banned = banned;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n    this.profileImageUrl = profileImageUrl;\n    this.imageUrl = imageUrl;\n    this.hasImage = hasImage;\n    this.gender = gender;\n    this.birthday = birthday;\n    this.primaryEmailAddressId = primaryEmailAddressId;\n    this.primaryPhoneNumberId = primaryPhoneNumberId;\n    this.primaryWeb3WalletId = primaryWeb3WalletId;\n    this.lastSignInAt = lastSignInAt;\n    this.externalId = externalId;\n    this.username = username;\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.publicMetadata = publicMetadata;\n    this.privateMetadata = privateMetadata;\n    this.unsafeMetadata = unsafeMetadata;\n    this.emailAddresses = emailAddresses;\n    this.phoneNumbers = phoneNumbers;\n    this.web3Wallets = web3Wallets;\n    this.externalAccounts = externalAccounts;\n    this.createOrganizationEnabled = createOrganizationEnabled;\n  }\n  static fromJSON(data) {\n    return new _User(data.id, data.password_enabled, data.totp_enabled, data.backup_code_enabled, data.two_factor_enabled, data.banned, data.created_at, data.updated_at, data.profile_image_url, data.image_url, data.has_image, data.gender, data.birthday, data.primary_email_address_id, data.primary_phone_number_id, data.primary_web3_wallet_id, data.last_sign_in_at, data.external_id, data.username, data.first_name, data.last_name, data.public_metadata, data.private_metadata, data.unsafe_metadata, (data.email_addresses || []).map(x => EmailAddress.fromJSON(x)), (data.phone_numbers || []).map(x => PhoneNumber.fromJSON(x)), (data.web3_wallets || []).map(x => Web3Wallet.fromJSON(x)), (data.external_accounts || []).map(x => ExternalAccount.fromJSON(x)), data.create_organization_enabled);\n  }\n};\ndeprecatedProperty(User, \"profileImageUrl\", \"Use `imageUrl` instead.\");\n\n// src/api/resources/Deserializer.ts\nfunction deserialize(payload) {\n  if (Array.isArray(payload)) {\n    return payload.map(item => jsonToObject(item));\n  } else if (isPaginated(payload)) {\n    return payload.data.map(item => jsonToObject(item));\n  } else {\n    return jsonToObject(payload);\n  }\n}\nfunction isPaginated(payload) {\n  return Array.isArray(payload.data) && payload.data !== void 0;\n}\nfunction getCount(item) {\n  return item.total_count;\n}\nfunction jsonToObject(item) {\n  if (typeof item !== \"string\" && \"object\" in item && \"deleted\" in item) {\n    return DeletedObject.fromJSON(item);\n  }\n  switch (item.object) {\n    case \"allowlist_identifier\" /* AllowlistIdentifier */:\n      return AllowlistIdentifier.fromJSON(item);\n    case \"client\" /* Client */:\n      return Client.fromJSON(item);\n    case \"email_address\" /* EmailAddress */:\n      return EmailAddress.fromJSON(item);\n    case \"email\" /* Email */:\n      return Email.fromJSON(item);\n    case \"invitation\" /* Invitation */:\n      return Invitation.fromJSON(item);\n    case \"oauth_access_token\" /* OauthAccessToken */:\n      return OauthAccessToken.fromJSON(item);\n    case \"organization\" /* Organization */:\n      return Organization.fromJSON(item);\n    case \"organization_invitation\" /* OrganizationInvitation */:\n      return OrganizationInvitation.fromJSON(item);\n    case \"organization_membership\" /* OrganizationMembership */:\n      return OrganizationMembership.fromJSON(item);\n    case \"phone_number\" /* PhoneNumber */:\n      return PhoneNumber.fromJSON(item);\n    case \"redirect_url\" /* RedirectUrl */:\n      return RedirectUrl.fromJSON(item);\n    case \"sign_in_token\" /* SignInToken */:\n      return SignInToken.fromJSON(item);\n    case \"session\" /* Session */:\n      return Session.fromJSON(item);\n    case \"sms_message\" /* SmsMessage */:\n      return SMSMessage.fromJSON(item);\n    case \"token\" /* Token */:\n      return Token.fromJSON(item);\n    case \"total_count\" /* TotalCount */:\n      return getCount(item);\n    case \"user\" /* User */:\n      return User.fromJSON(item);\n    default:\n      return item;\n  }\n}\n\n// src/api/request.ts\nvar withLegacyReturn = cb => async (...args) => {\n  const response = await cb(...args);\n  if (response.errors === null) {\n    return response.data;\n  } else {\n    const {\n      errors,\n      clerkTraceId\n    } = response;\n    const {\n      status,\n      statusText\n    } = response;\n    const error = new ClerkAPIResponseError(statusText || \"\", {\n      data: [],\n      status: status || \"\",\n      clerkTraceId\n    });\n    error.errors = errors;\n    throw error;\n  }\n};\nfunction buildRequest(options) {\n  const request = async requestOptions => {\n    const {\n      apiKey,\n      secretKey,\n      httpOptions,\n      apiUrl = API_URL,\n      apiVersion = API_VERSION,\n      userAgent = USER_AGENT\n    } = options;\n    if (apiKey) {\n      deprecated2(\"apiKey\", \"Use `secretKey` instead.\");\n    }\n    if (httpOptions) {\n      deprecated2(\"httpOptions\", \"This option has been deprecated and will be removed with the next major release.\\nA RequestInit init object used by the `request` method.\");\n    }\n    const {\n      path,\n      method,\n      queryParams,\n      headerParams,\n      bodyParams,\n      formData\n    } = requestOptions;\n    const key = secretKey || apiKey;\n    assertValidSecretKey(key);\n    const url = joinPaths(apiUrl, apiVersion, path);\n    const finalUrl = new URL(url);\n    if (queryParams) {\n      const snakecasedQueryParams = snakecaseKeys({\n        ...queryParams\n      });\n      for (const [key2, val] of Object.entries(snakecasedQueryParams)) {\n        if (val) {\n          [val].flat().forEach(v => finalUrl.searchParams.append(key2, v));\n        }\n      }\n    }\n    const headers = {\n      Authorization: `Bearer ${key}`,\n      \"User-Agent\": userAgent,\n      ...headerParams\n    };\n    let res = void 0;\n    try {\n      if (formData) {\n        res = await runtime_default.fetch(finalUrl.href, {\n          ...httpOptions,\n          method,\n          headers,\n          body: formData\n        });\n      } else {\n        headers[\"Content-Type\"] = \"application/json\";\n        const hasBody = method !== \"GET\" && bodyParams && Object.keys(bodyParams).length > 0;\n        const body = hasBody ? {\n          body: JSON.stringify(snakecaseKeys(bodyParams, {\n            deep: false\n          }))\n        } : null;\n        res = await runtime_default.fetch(finalUrl.href, deepmerge(httpOptions || {}, {\n          method,\n          headers,\n          ...body\n        }));\n      }\n      const isJSONResponse = res?.headers && res.headers?.get(constants.Headers.ContentType) === constants.ContentTypes.Json;\n      const data = await (isJSONResponse ? res.json() : res.text());\n      if (!res.ok) {\n        throw data;\n      }\n      return {\n        data: deserialize(data),\n        errors: null\n      };\n    } catch (err) {\n      if (err instanceof Error) {\n        return {\n          data: null,\n          errors: [{\n            code: \"unexpected_error\",\n            message: err.message || \"Unexpected error\"\n          }],\n          clerkTraceId: getTraceId(err, res?.headers)\n        };\n      }\n      return {\n        data: null,\n        errors: parseErrors(err),\n        // TODO: To be removed with withLegacyReturn\n        // @ts-expect-error\n        status: res?.status,\n        statusText: res?.statusText,\n        clerkTraceId: getTraceId(err, res?.headers)\n      };\n    }\n  };\n  return withLegacyReturn(request);\n}\nfunction getTraceId(data, headers) {\n  if (data && typeof data === \"object\" && \"clerk_trace_id\" in data && typeof data.clerk_trace_id === \"string\") {\n    return data.clerk_trace_id;\n  }\n  const cfRay = headers?.get(\"cf-ray\");\n  return cfRay || \"\";\n}\nfunction parseErrors(data) {\n  if (!!data && typeof data === \"object\" && \"errors\" in data) {\n    const errors = data.errors;\n    return errors.length > 0 ? errors.map(parseError) : [];\n  }\n  return [];\n}\nfunction parseError(error) {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id\n    }\n  };\n}\n\n// src/api/factory.ts\nfunction createBackendApiClient(options) {\n  const request = buildRequest(options);\n  return {\n    allowlistIdentifiers: new AllowlistIdentifierAPI(request),\n    clients: new ClientAPI(request),\n    emailAddresses: new EmailAddressAPI(request),\n    emails: new EmailAPI(request),\n    interstitial: new InterstitialAPI(request),\n    invitations: new InvitationAPI(request),\n    organizations: new OrganizationAPI(request),\n    phoneNumbers: new PhoneNumberAPI(request),\n    redirectUrls: new RedirectUrlAPI(request),\n    sessions: new SessionAPI(request),\n    signInTokens: new SignInTokenAPI(request),\n    smsMessages: new SMSMessageAPI(request),\n    users: new UserAPI(request),\n    domains: new DomainAPI(request)\n  };\n}\n\n// src/tokens/authObjects.ts\nimport { deprecated as deprecated5 } from \"@clerk/shared/deprecated\";\nvar createDebug = data => {\n  return () => {\n    const res = {\n      ...data\n    };\n    res.apiKey = (res.apiKey || \"\").substring(0, 7);\n    res.secretKey = (res.secretKey || \"\").substring(0, 7);\n    res.jwtKey = (res.jwtKey || \"\").substring(0, 7);\n    return {\n      ...res\n    };\n  };\n};\nfunction signedInAuthObject(sessionClaims, options, debugData) {\n  const {\n    act: actor,\n    sid: sessionId,\n    org_id: orgId,\n    org_role: orgRole,\n    org_slug: orgSlug,\n    org_permissions: orgPermissions,\n    sub: userId\n  } = sessionClaims;\n  const {\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion,\n    token,\n    session,\n    user,\n    organization\n  } = options;\n  if (apiKey) {\n    deprecated5(\"apiKey\", \"Use `secretKey` instead.\");\n  }\n  const {\n    sessions\n  } = createBackendApiClient({\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion\n  });\n  const getToken = createGetToken({\n    sessionId,\n    sessionToken: token,\n    fetcher: (...args) => sessions.getToken(...args)\n  });\n  return {\n    actor,\n    sessionClaims,\n    sessionId,\n    session,\n    userId,\n    user,\n    orgId,\n    orgRole,\n    orgSlug,\n    orgPermissions,\n    organization,\n    getToken,\n    has: createHasAuthorization({\n      orgId,\n      orgRole,\n      orgPermissions,\n      userId\n    }),\n    debug: createDebug({\n      ...options,\n      ...debugData\n    })\n  };\n}\nfunction signedOutAuthObject(debugData) {\n  if (debugData?.apiKey) {\n    deprecated5(\"apiKey\", \"Use `secretKey` instead.\");\n  }\n  return {\n    sessionClaims: null,\n    sessionId: null,\n    session: null,\n    userId: null,\n    user: null,\n    actor: null,\n    orgId: null,\n    orgRole: null,\n    orgSlug: null,\n    orgPermissions: null,\n    organization: null,\n    getToken: () => Promise.resolve(null),\n    has: () => false,\n    debug: createDebug(debugData)\n  };\n}\nfunction prunePrivateMetadata(resource) {\n  if (resource) {\n    delete resource[\"privateMetadata\"];\n    delete resource[\"private_metadata\"];\n  }\n  return resource;\n}\nfunction sanitizeAuthObject(authObject) {\n  const user = authObject.user ? {\n    ...authObject.user\n  } : authObject.user;\n  const organization = authObject.organization ? {\n    ...authObject.organization\n  } : authObject.organization;\n  prunePrivateMetadata(user);\n  prunePrivateMetadata(organization);\n  return {\n    ...authObject,\n    user,\n    organization\n  };\n}\nvar makeAuthObjectSerializable = obj => {\n  const {\n    debug,\n    getToken,\n    has,\n    ...rest\n  } = obj;\n  return rest;\n};\nvar createGetToken = params => {\n  const {\n    fetcher,\n    sessionToken,\n    sessionId\n  } = params || {};\n  return async (options = {}) => {\n    if (!sessionId) {\n      return null;\n    }\n    if (options.template) {\n      return fetcher(sessionId, options.template);\n    }\n    return sessionToken;\n  };\n};\nvar createHasAuthorization = ({\n  orgId,\n  orgRole,\n  userId,\n  orgPermissions\n}) => params => {\n  if (!params?.permission && !params?.role) {\n    throw new Error('Missing parameters. `has` from `auth` or `getAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`');\n  }\n  if (!orgId || !userId || !orgRole || !orgPermissions) {\n    return false;\n  }\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return false;\n};\n\n// src/tokens/errors.ts\nvar TokenVerificationError = class _TokenVerificationError extends Error {\n  constructor({\n    action,\n    message,\n    reason\n  }) {\n    super(message);\n    Object.setPrototypeOf(this, _TokenVerificationError.prototype);\n    this.reason = reason;\n    this.message = message;\n    this.action = action;\n  }\n  getFullMessage() {\n    return `${[this.message, this.action].filter(m => m).join(\" \")} (reason=${this.reason}, token-carrier=${this.tokenCarrier})`;\n  }\n};\n\n// src/tokens/interstitial.ts\nfunction loadInterstitialFromLocal(options) {\n  if (options.frontendApi) {\n    deprecated2(\"frontendApi\", \"Use `publishableKey` instead.\");\n  }\n  if (options.pkgVersion) {\n    deprecated2(\"pkgVersion\", \"Use `clerkJSVersion` instead.\");\n  }\n  options.frontendApi = parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi || \"\";\n  const domainOnlyInProd = !isDevOrStagingUrl(options.frontendApi) ? addClerkPrefix(options.domain) : \"\";\n  const {\n    debugData,\n    frontendApi,\n    pkgVersion,\n    clerkJSUrl,\n    clerkJSVersion,\n    publishableKey,\n    proxyUrl,\n    isSatellite = false,\n    domain,\n    signInUrl\n  } = options;\n  return `\n    <head>\n        <meta charset=\"UTF-8\" />\n        <style>\n          @media (prefers-color-scheme: dark) {\n            body {\n              background-color: black;\n            }\n          }\n        </style>\n    </head>\n    <body>\n        <script>\n            window.__clerk_frontend_api = '${frontendApi}';\n            window.__clerk_debug = ${JSON.stringify(debugData || {})};\n            ${proxyUrl ? `window.__clerk_proxy_url = '${proxyUrl}'` : \"\"}\n            ${domain ? `window.__clerk_domain = '${domain}'` : \"\"}\n            window.startClerk = async () => {\n                function formRedirect(){\n                    const form = '<form method=\"get\" action=\"\" name=\"redirect\"></form>';\n                    document.body.innerHTML = document.body.innerHTML + form;\n\n                    const searchParams = new URLSearchParams(window.location.search);\n                    for (let paramTuple of searchParams) {\n                        const input = document.createElement(\"input\");\n                        input.type = \"hidden\";\n                        input.name = paramTuple[0];\n                        input.value = paramTuple[1];\n                        document.forms.redirect.appendChild(input);\n                    }\n                    const url = new URL(window.location.origin + window.location.pathname + window.location.hash);\n                    window.history.pushState({}, '', url);\n\n                    document.forms.redirect.action = window.location.pathname + window.location.hash;\n                    document.forms.redirect.submit();\n                }\n\n                const Clerk = window.Clerk;\n                try {\n                    await Clerk.load({\n                        isSatellite: ${isSatellite},\n                        isInterstitial: ${true},\n                        signInUrl: ${signInUrl ? `'${signInUrl}'` : void 0}\n                    });\n                    if(Clerk.loaded){\n                      if(window.location.href.indexOf(\"#\") === -1){\n                        window.location.href = window.location.href;\n                      } else if (window.navigator.userAgent.toLowerCase().includes(\"firefox/\")){\n                          formRedirect();\n                      } else {\n                          window.location.reload();\n                      }\n                    }\n                } catch (err) {\n                    console.error('Clerk: ', err);\n                }\n            };\n            (() => {\n                const script = document.createElement('script');\n                ${publishableKey ? `script.setAttribute('data-clerk-publishable-key', '${publishableKey}');` : `script.setAttribute('data-clerk-frontend-api', '${frontendApi}');`}\n\n                ${domain ? `script.setAttribute('data-clerk-domain', '${domain}');` : \"\"}\n                ${proxyUrl ? `script.setAttribute('data-clerk-proxy-url', '${proxyUrl}')` : \"\"};\n                script.async = true;\n                script.src = '${clerkJSUrl || getScriptUrl(proxyUrl || domainOnlyInProd || frontendApi, {\n    pkgVersion,\n    clerkJSVersion\n  })}';\n                script.crossOrigin = 'anonymous';\n                script.addEventListener('load', startClerk);\n                document.body.appendChild(script);\n            })();\n        </script>\n    </body>\n`;\n}\nasync function loadInterstitialFromBAPI(options) {\n  if (options.frontendApi) {\n    deprecated2(\"frontendApi\", \"Use `publishableKey` instead.\");\n  }\n  if (options.pkgVersion) {\n    deprecated2(\"pkgVersion\", \"Use `clerkJSVersion` instead.\");\n  }\n  options.frontendApi = parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi || \"\";\n  const url = buildPublicInterstitialUrl(options);\n  const response = await callWithRetry(() => runtime_default.fetch(buildPublicInterstitialUrl(options), {\n    method: \"GET\",\n    headers: {\n      \"Clerk-Backend-SDK\": options.userAgent || USER_AGENT\n    }\n  }));\n  if (!response.ok) {\n    throw new TokenVerificationError({\n      action: \"Contact support@clerk.com\" /* ContactSupport */,\n      message: `Error loading Clerk Interstitial from ${url} with code=${response.status}`,\n      reason: \"interstitial-remote-failed-to-load\" /* RemoteInterstitialFailedToLoad */\n    });\n  }\n  return response.text();\n}\nfunction buildPublicInterstitialUrl(options) {\n  if (options.frontendApi) {\n    deprecated2(\"frontendApi\", \"Use `publishableKey` instead.\");\n  }\n  options.frontendApi = parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi || \"\";\n  const {\n    apiUrl,\n    frontendApi,\n    pkgVersion,\n    clerkJSVersion,\n    publishableKey,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl\n  } = options;\n  const url = new URL(apiUrl);\n  url.pathname = joinPaths(url.pathname, API_VERSION, \"/public/interstitial\");\n  url.searchParams.append(\"clerk_js_version\", clerkJSVersion || getClerkJsMajorVersionOrTag(frontendApi, pkgVersion));\n  if (publishableKey) {\n    url.searchParams.append(\"publishable_key\", publishableKey);\n  } else {\n    url.searchParams.append(\"frontend_api\", frontendApi);\n  }\n  if (proxyUrl) {\n    url.searchParams.append(\"proxy_url\", proxyUrl);\n  }\n  if (isSatellite) {\n    url.searchParams.append(\"is_satellite\", \"true\");\n  }\n  url.searchParams.append(\"sign_in_url\", signInUrl || \"\");\n  if (!isDevOrStagingUrl(options.frontendApi)) {\n    url.searchParams.append(\"use_domain_for_script\", \"true\");\n  }\n  if (domain) {\n    url.searchParams.append(\"domain\", domain);\n  }\n  return url.href;\n}\n\n// src/util/IsomorphicRequest.ts\nimport { parse } from \"cookie\";\n\n// src/utils.ts\nvar getHeader = (req, key) => req.headers.get(key);\nvar getFirstValueFromHeader = value => value?.split(\",\")[0];\nvar buildRequestUrl = (request, path) => {\n  const initialUrl = new URL(request.url);\n  const forwardedProto = getHeader(request, constants.Headers.ForwardedProto);\n  const forwardedHost = getHeader(request, constants.Headers.ForwardedHost);\n  const host = getHeader(request, constants.Headers.Host);\n  const protocol = initialUrl.protocol;\n  const base = buildOrigin({\n    protocol,\n    forwardedProto,\n    forwardedHost,\n    host: host || initialUrl.host\n  });\n  return new URL(path || initialUrl.pathname, base);\n};\nvar buildOrigin = ({\n  protocol,\n  forwardedProto,\n  forwardedHost,\n  host\n}) => {\n  const resolvedHost = getFirstValueFromHeader(forwardedHost) ?? host;\n  const resolvedProtocol = getFirstValueFromHeader(forwardedProto) ?? protocol?.replace(/[:/]/, \"\");\n  if (!resolvedHost || !resolvedProtocol) {\n    return \"\";\n  }\n  return `${resolvedProtocol}://${resolvedHost}`;\n};\n\n// src/util/IsomorphicRequest.ts\nvar createIsomorphicRequest = cb => {\n  const req = cb(runtime_default.Request, runtime_default.Headers);\n  const headersGeneratedURL = buildRequestUrl(req);\n  return new runtime_default.Request(headersGeneratedURL, req);\n};\nvar buildRequest2 = req => {\n  if (!req) {\n    return {};\n  }\n  const cookies = parseIsomorphicRequestCookies(req);\n  const headers = getHeaderFromIsomorphicRequest(req);\n  const searchParams = getSearchParamsFromIsomorphicRequest(req);\n  return {\n    cookies,\n    headers,\n    searchParams\n  };\n};\nvar decode = str => {\n  if (!str) {\n    return str;\n  }\n  return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n};\nvar parseIsomorphicRequestCookies = req => {\n  const cookies = req.headers && req.headers?.get(\"cookie\") ? parse(req.headers.get(\"cookie\")) : {};\n  return key => {\n    const value = cookies?.[key];\n    if (value === void 0) {\n      return void 0;\n    }\n    return decode(value);\n  };\n};\nvar getHeaderFromIsomorphicRequest = req => key => req?.headers?.get(key) || void 0;\nvar getSearchParamsFromIsomorphicRequest = req => req?.url ? new URL(req.url)?.searchParams : void 0;\nvar stripAuthorizationHeader = authValue => {\n  return authValue?.replace(\"Bearer \", \"\");\n};\n\n// src/tokens/authStatus.ts\nvar AuthStatus = /* @__PURE__ */(AuthStatus2 => {\n  AuthStatus2[\"SignedIn\"] = \"signed-in\";\n  AuthStatus2[\"SignedOut\"] = \"signed-out\";\n  AuthStatus2[\"Interstitial\"] = \"interstitial\";\n  AuthStatus2[\"Unknown\"] = \"unknown\";\n  return AuthStatus2;\n})(AuthStatus || {});\nasync function signedIn(options, sessionClaims) {\n  const {\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion,\n    cookieToken,\n    frontendApi,\n    proxyUrl,\n    publishableKey,\n    domain,\n    isSatellite,\n    headerToken,\n    loadSession,\n    loadUser,\n    loadOrganization,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    token\n  } = options;\n  const {\n    sid: sessionId,\n    org_id: orgId,\n    sub: userId\n  } = sessionClaims;\n  const {\n    sessions,\n    users,\n    organizations\n  } = createBackendApiClient({\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion\n  });\n  const [sessionResp, userResp, organizationResp] = await Promise.all([loadSession ? sessions.getSession(sessionId) : Promise.resolve(void 0), loadUser ? users.getUser(userId) : Promise.resolve(void 0), loadOrganization && orgId ? organizations.getOrganization({\n    organizationId: orgId\n  }) : Promise.resolve(void 0)]);\n  const session = sessionResp;\n  const user = userResp;\n  const organization = organizationResp;\n  const authObject = signedInAuthObject(sessionClaims, {\n    secretKey,\n    apiKey,\n    apiUrl,\n    apiVersion,\n    token: cookieToken || headerToken || \"\",\n    session,\n    user,\n    organization\n  }, {\n    ...options,\n    status: \"signed-in\" /* SignedIn */\n  });\n  return {\n    status: \"signed-in\" /* SignedIn */,\n    reason: null,\n    message: null,\n    frontendApi,\n    proxyUrl,\n    publishableKey,\n    domain,\n    isSatellite,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: true,\n    isInterstitial: false,\n    isUnknown: false,\n    toAuth: () => authObject,\n    token\n  };\n}\nfunction signedOut(options, reason, message = \"\") {\n  const {\n    frontendApi,\n    publishableKey,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl\n  } = options;\n  return {\n    status: \"signed-out\" /* SignedOut */,\n    reason,\n    message,\n    frontendApi,\n    proxyUrl,\n    publishableKey,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: false,\n    isInterstitial: false,\n    isUnknown: false,\n    toAuth: () => signedOutAuthObject({\n      ...options,\n      status: \"signed-out\" /* SignedOut */,\n      reason,\n      message\n    }),\n    token: null\n  };\n}\nfunction interstitial(options, reason, message = \"\") {\n  const {\n    frontendApi,\n    publishableKey,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl\n  } = options;\n  return {\n    status: \"interstitial\" /* Interstitial */,\n    reason,\n    message,\n    frontendApi,\n    publishableKey,\n    isSatellite,\n    domain,\n    proxyUrl,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: false,\n    isInterstitial: true,\n    isUnknown: false,\n    toAuth: () => null,\n    token: null\n  };\n}\nfunction unknownState(options, reason, message = \"\") {\n  const {\n    frontendApi,\n    publishableKey,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl\n  } = options;\n  return {\n    status: \"unknown\" /* Unknown */,\n    reason,\n    message,\n    frontendApi,\n    publishableKey,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: false,\n    isInterstitial: false,\n    isUnknown: true,\n    toAuth: () => null,\n    token: null\n  };\n}\n\n// src/util/request.ts\nfunction checkCrossOrigin({\n  originURL,\n  host,\n  forwardedHost,\n  forwardedProto\n}) {\n  const finalURL = buildOrigin({\n    forwardedProto,\n    forwardedHost,\n    protocol: originURL.protocol,\n    host\n  });\n  return finalURL && new URL(finalURL).origin !== originURL.origin;\n}\nvar getErrorObjectByCode = (errors, code) => {\n  if (!errors) {\n    return null;\n  }\n  return errors.find(err => err.code === code);\n};\n\n// src/tokens/jwt/verifyJwt.ts\nimport { deprecatedObjectProperty } from \"@clerk/shared/deprecated\";\n\n// src/util/rfc4648.ts\nvar base64url = {\n  parse(string, opts) {\n    return parse2(string, base64UrlEncoding, opts);\n  },\n  stringify(data, opts) {\n    return stringify(data, base64UrlEncoding, opts);\n  }\n};\nvar base64UrlEncoding = {\n  chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n  bits: 6\n};\nfunction parse2(string, encoding, opts = {}) {\n  if (!encoding.codes) {\n    encoding.codes = {};\n    for (let i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  }\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError(\"Invalid padding\");\n  }\n  let end = string.length;\n  while (string[end - 1] === \"=\") {\n    --end;\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError(\"Invalid padding\");\n    }\n  }\n  const out = new (opts.out ?? Uint8Array)(end * encoding.bits / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = encoding.codes[string[i]];\n    if (value === void 0) {\n      throw new SyntaxError(\"Invalid character \" + string[i]);\n    }\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= encoding.bits || 255 & buffer << 8 - bits) {\n    throw new SyntaxError(\"Unexpected end of data\");\n  }\n  return out;\n}\nfunction stringify(data, encoding, opts = {}) {\n  const {\n    pad = true\n  } = opts;\n  const mask = (1 << encoding.bits) - 1;\n  let out = \"\";\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | 255 & data[i];\n    bits += 8;\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  }\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += \"=\";\n    }\n  }\n  return out;\n}\n\n// src/tokens/jwt/algorithms.ts\nvar algToHash = {\n  RS256: \"SHA-256\",\n  RS384: \"SHA-384\",\n  RS512: \"SHA-512\"\n};\nvar RSA_ALGORITHM_NAME = \"RSASSA-PKCS1-v1_5\";\nvar jwksAlgToCryptoAlg = {\n  RS256: RSA_ALGORITHM_NAME,\n  RS384: RSA_ALGORITHM_NAME,\n  RS512: RSA_ALGORITHM_NAME\n};\nvar algs = Object.keys(algToHash);\nfunction getCryptoAlgorithm(algorithmName) {\n  const hash = algToHash[algorithmName];\n  const name = jwksAlgToCryptoAlg[algorithmName];\n  if (!hash || !name) {\n    throw new Error(`Unsupported algorithm ${algorithmName}, expected one of ${algs.join(\",\")}.`);\n  }\n  return {\n    hash: {\n      name: algToHash[algorithmName]\n    },\n    name: jwksAlgToCryptoAlg[algorithmName]\n  };\n}\n\n// src/tokens/jwt/assertions.ts\nvar isArrayString = s => {\n  return Array.isArray(s) && s.length > 0 && s.every(a => typeof a === \"string\");\n};\nvar assertAudienceClaim = (aud, audience) => {\n  const audienceList = [audience].flat().filter(a => !!a);\n  const audList = [aud].flat().filter(a => !!a);\n  const shouldVerifyAudience = audienceList.length > 0 && audList.length > 0;\n  if (!shouldVerifyAudience) {\n    return;\n  }\n  if (typeof aud === \"string\") {\n    if (!audienceList.includes(aud)) {\n      throw new TokenVerificationError({\n        action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n        reason: \"token-verification-failed\" /* TokenVerificationFailed */,\n        message: `Invalid JWT audience claim (aud) ${JSON.stringify(aud)}. Is not included in \"${JSON.stringify(audienceList)}\".`\n      });\n    }\n  } else if (isArrayString(aud)) {\n    if (!aud.some(a => audienceList.includes(a))) {\n      throw new TokenVerificationError({\n        action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n        reason: \"token-verification-failed\" /* TokenVerificationFailed */,\n        message: `Invalid JWT audience claim array (aud) ${JSON.stringify(aud)}. Is not included in \"${JSON.stringify(audienceList)}\".`\n      });\n    }\n  }\n};\nvar assertHeaderType = typ => {\n  if (typeof typ === \"undefined\") {\n    return;\n  }\n  if (typ !== \"JWT\") {\n    throw new TokenVerificationError({\n      action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n      reason: \"token-invalid\" /* TokenInvalid */,\n      message: `Invalid JWT type ${JSON.stringify(typ)}. Expected \"JWT\".`\n    });\n  }\n};\nvar assertHeaderAlgorithm = alg => {\n  if (!algs.includes(alg)) {\n    throw new TokenVerificationError({\n      action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n      reason: \"token-invalid-algorithm\" /* TokenInvalidAlgorithm */,\n      message: `Invalid JWT algorithm ${JSON.stringify(alg)}. Supported: ${algs}.`\n    });\n  }\n};\nvar assertSubClaim = sub => {\n  if (typeof sub !== \"string\") {\n    throw new TokenVerificationError({\n      action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n      reason: \"token-verification-failed\" /* TokenVerificationFailed */,\n      message: `Subject claim (sub) is required and must be a string. Received ${JSON.stringify(sub)}.`\n    });\n  }\n};\nvar assertAuthorizedPartiesClaim = (azp, authorizedParties) => {\n  if (!azp || !authorizedParties || authorizedParties.length === 0) {\n    return;\n  }\n  if (!authorizedParties.includes(azp)) {\n    throw new TokenVerificationError({\n      reason: \"token-invalid-authorized-parties\" /* TokenInvalidAuthorizedParties */,\n      message: `Invalid JWT Authorized party claim (azp) ${JSON.stringify(azp)}. Expected \"${authorizedParties}\".`\n    });\n  }\n};\nvar assertIssuerClaim = (iss, issuer) => {\n  if (typeof issuer === \"function\" && !issuer(iss)) {\n    throw new TokenVerificationError({\n      reason: \"token-invalid-issuer\" /* TokenInvalidIssuer */,\n      message: \"Failed JWT issuer resolver. Make sure that the resolver returns a truthy value.\"\n    });\n  } else if (typeof issuer === \"string\" && iss && iss !== issuer) {\n    throw new TokenVerificationError({\n      reason: \"token-invalid-issuer\" /* TokenInvalidIssuer */,\n      message: `Invalid JWT issuer claim (iss) ${JSON.stringify(iss)}. Expected \"${issuer}\".`\n    });\n  }\n};\nvar assertExpirationClaim = (exp, clockSkewInMs) => {\n  if (typeof exp !== \"number\") {\n    throw new TokenVerificationError({\n      action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n      reason: \"token-verification-failed\" /* TokenVerificationFailed */,\n      message: `Invalid JWT expiry date claim (exp) ${JSON.stringify(exp)}. Expected number.`\n    });\n  }\n  const currentDate = new Date(Date.now());\n  const expiryDate = /* @__PURE__ */new Date(0);\n  expiryDate.setUTCSeconds(exp);\n  const expired = expiryDate.getTime() <= currentDate.getTime() - clockSkewInMs;\n  if (expired) {\n    throw new TokenVerificationError({\n      reason: \"token-expired\" /* TokenExpired */,\n      message: `JWT is expired. Expiry date: ${expiryDate.toUTCString()}, Current date: ${currentDate.toUTCString()}.`\n    });\n  }\n};\nvar assertActivationClaim = (nbf, clockSkewInMs) => {\n  if (typeof nbf === \"undefined\") {\n    return;\n  }\n  if (typeof nbf !== \"number\") {\n    throw new TokenVerificationError({\n      action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n      reason: \"token-verification-failed\" /* TokenVerificationFailed */,\n      message: `Invalid JWT not before date claim (nbf) ${JSON.stringify(nbf)}. Expected number.`\n    });\n  }\n  const currentDate = new Date(Date.now());\n  const notBeforeDate = /* @__PURE__ */new Date(0);\n  notBeforeDate.setUTCSeconds(nbf);\n  const early = notBeforeDate.getTime() > currentDate.getTime() + clockSkewInMs;\n  if (early) {\n    throw new TokenVerificationError({\n      reason: \"token-not-active-yet\" /* TokenNotActiveYet */,\n      message: `JWT cannot be used prior to not before date claim (nbf). Not before date: ${notBeforeDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`\n    });\n  }\n};\nvar assertIssuedAtClaim = (iat, clockSkewInMs) => {\n  if (typeof iat === \"undefined\") {\n    return;\n  }\n  if (typeof iat !== \"number\") {\n    throw new TokenVerificationError({\n      action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n      reason: \"token-verification-failed\" /* TokenVerificationFailed */,\n      message: `Invalid JWT issued at date claim (iat) ${JSON.stringify(iat)}. Expected number.`\n    });\n  }\n  const currentDate = new Date(Date.now());\n  const issuedAtDate = /* @__PURE__ */new Date(0);\n  issuedAtDate.setUTCSeconds(iat);\n  const postIssued = issuedAtDate.getTime() > currentDate.getTime() + clockSkewInMs;\n  if (postIssued) {\n    throw new TokenVerificationError({\n      reason: \"token-not-active-yet\" /* TokenNotActiveYet */,\n      message: `JWT issued at date claim (iat) is in the future. Issued at date: ${issuedAtDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`\n    });\n  }\n};\n\n// src/tokens/jwt/cryptoKeys.ts\nimport { isomorphicAtob } from \"@clerk/shared/isomorphicAtob\";\nfunction pemToBuffer(secret) {\n  const trimmed = secret.replace(/-----BEGIN.*?-----/g, \"\").replace(/-----END.*?-----/g, \"\").replace(/\\s/g, \"\");\n  const decoded = isomorphicAtob(trimmed);\n  const buffer = new ArrayBuffer(decoded.length);\n  const bufView = new Uint8Array(buffer);\n  for (let i = 0, strLen = decoded.length; i < strLen; i++) {\n    bufView[i] = decoded.charCodeAt(i);\n  }\n  return bufView;\n}\nfunction importKey(key, algorithm, keyUsage) {\n  if (typeof key === \"object\") {\n    return runtime_default.crypto.subtle.importKey(\"jwk\", key, algorithm, false, [keyUsage]);\n  }\n  const keyData = pemToBuffer(key);\n  const format = keyUsage === \"sign\" ? \"pkcs8\" : \"spki\";\n  return runtime_default.crypto.subtle.importKey(format, keyData, algorithm, false, [keyUsage]);\n}\n\n// src/tokens/jwt/verifyJwt.ts\nvar DEFAULT_CLOCK_SKEW_IN_SECONDS = 5 * 1e3;\nasync function hasValidSignature(jwt, key) {\n  const {\n    header,\n    signature,\n    raw\n  } = jwt;\n  const encoder = new TextEncoder();\n  const data = encoder.encode([raw.header, raw.payload].join(\".\"));\n  const algorithm = getCryptoAlgorithm(header.alg);\n  const cryptoKey = await importKey(key, algorithm, \"verify\");\n  return runtime_default.crypto.subtle.verify(algorithm.name, cryptoKey, signature, data);\n}\nfunction decodeJwt(token) {\n  const tokenParts = (token || \"\").toString().split(\".\");\n  if (tokenParts.length !== 3) {\n    throw new TokenVerificationError({\n      reason: \"token-invalid\" /* TokenInvalid */,\n      message: `Invalid JWT form. A JWT consists of three parts separated by dots.`\n    });\n  }\n  const [rawHeader, rawPayload, rawSignature] = tokenParts;\n  const decoder = new TextDecoder();\n  const header = JSON.parse(decoder.decode(base64url.parse(rawHeader, {\n    loose: true\n  })));\n  const payload = JSON.parse(decoder.decode(base64url.parse(rawPayload, {\n    loose: true\n  })));\n  const signature = base64url.parse(rawSignature, {\n    loose: true\n  });\n  deprecatedObjectProperty(payload, \"orgs\", 'Add orgs to your session token using the \"user.organizations\" shortcode in JWT Templates instead.', \"decodeJwt:orgs\");\n  return {\n    header,\n    payload,\n    signature,\n    raw: {\n      header: rawHeader,\n      payload: rawPayload,\n      signature: rawSignature,\n      text: token\n    }\n  };\n}\nasync function verifyJwt(token, {\n  audience,\n  authorizedParties,\n  clockSkewInSeconds,\n  clockSkewInMs,\n  issuer,\n  key\n}) {\n  if (clockSkewInSeconds) {\n    deprecated2(\"clockSkewInSeconds\", \"Use `clockSkewInMs` instead.\");\n  }\n  const clockSkew = clockSkewInMs || clockSkewInSeconds || DEFAULT_CLOCK_SKEW_IN_SECONDS;\n  const decoded = decodeJwt(token);\n  const {\n    header,\n    payload\n  } = decoded;\n  const {\n    typ,\n    alg\n  } = header;\n  assertHeaderType(typ);\n  assertHeaderAlgorithm(alg);\n  const {\n    azp,\n    sub,\n    aud,\n    iss,\n    iat,\n    exp,\n    nbf\n  } = payload;\n  assertSubClaim(sub);\n  assertAudienceClaim([aud], [audience]);\n  assertAuthorizedPartiesClaim(azp, authorizedParties);\n  assertIssuerClaim(iss, issuer);\n  assertExpirationClaim(exp, clockSkew);\n  assertActivationClaim(nbf, clockSkew);\n  assertIssuedAtClaim(iat, clockSkew);\n  let signatureValid;\n  try {\n    signatureValid = await hasValidSignature(decoded, key);\n  } catch (err) {\n    throw new TokenVerificationError({\n      action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */,\n      reason: \"token-verification-failed\" /* TokenVerificationFailed */,\n      message: `Error verifying JWT signature. ${err}`\n    });\n  }\n  if (!signatureValid) {\n    throw new TokenVerificationError({\n      reason: \"token-invalid-signature\" /* TokenInvalidSignature */,\n      message: \"JWT signature is invalid.\"\n    });\n  }\n  return payload;\n}\n\n// src/tokens/jwt/signJwt.ts\nfunction encodeJwtData(value) {\n  const stringified = JSON.stringify(value);\n  const encoder = new TextEncoder();\n  const encoded = encoder.encode(stringified);\n  return base64url.stringify(encoded, {\n    pad: false\n  });\n}\nasync function signJwt(payload, key, options) {\n  if (!options.algorithm) {\n    throw new Error(\"No algorithm specified\");\n  }\n  const encoder = new TextEncoder();\n  const algorithm = getCryptoAlgorithm(options.algorithm);\n  if (!algorithm) {\n    throw new Error(`Unsupported algorithm ${options.algorithm}`);\n  }\n  const cryptoKey = await importKey(key, algorithm, \"sign\");\n  const header = options.header || {\n    typ: \"JWT\"\n  };\n  header.alg = options.algorithm;\n  payload.iat = Math.floor(Date.now() / 1e3);\n  const encodedHeader = encodeJwtData(header);\n  const encodedPayload = encodeJwtData(payload);\n  const firstPart = `${encodedHeader}.${encodedPayload}`;\n  const signature = await runtime_default.crypto.subtle.sign(algorithm, cryptoKey, encoder.encode(firstPart));\n  return `${firstPart}.${base64url.stringify(new Uint8Array(signature), {\n    pad: false\n  })}`;\n}\n\n// src/tokens/keys.ts\nvar cache = {};\nvar lastUpdatedAt = 0;\nfunction getFromCache(kid) {\n  return cache[kid];\n}\nfunction getCacheValues() {\n  return Object.values(cache);\n}\nfunction setInCache(jwk, jwksCacheTtlInMs = 1e3 * 60 * 60) {\n  cache[jwk.kid] = jwk;\n  lastUpdatedAt = Date.now();\n  if (jwksCacheTtlInMs >= 0) {\n    setTimeout(() => {\n      if (jwk) {\n        delete cache[jwk.kid];\n      } else {\n        cache = {};\n      }\n    }, jwksCacheTtlInMs);\n  }\n}\nvar LocalJwkKid = \"local\";\nvar PEM_HEADER = \"-----BEGIN PUBLIC KEY-----\";\nvar PEM_TRAILER = \"-----END PUBLIC KEY-----\";\nvar RSA_PREFIX = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\";\nvar RSA_SUFFIX = \"IDAQAB\";\nfunction loadClerkJWKFromLocal(localKey) {\n  if (!getFromCache(LocalJwkKid)) {\n    if (!localKey) {\n      throw new TokenVerificationError({\n        action: \"Set the CLERK_JWT_KEY environment variable.\" /* SetClerkJWTKey */,\n        message: \"Missing local JWK.\",\n        reason: \"jwk-local-missing\" /* LocalJWKMissing */\n      });\n    }\n    const modulus = localKey.replace(/(\\r\\n|\\n|\\r)/gm, \"\").replace(PEM_HEADER, \"\").replace(PEM_TRAILER, \"\").replace(RSA_PREFIX, \"\").replace(RSA_SUFFIX, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    setInCache({\n      kid: \"local\",\n      kty: \"RSA\",\n      alg: \"RS256\",\n      n: modulus,\n      e: \"AQAB\"\n    }, -1\n    // local key never expires in cache\n    );\n  }\n  return getFromCache(LocalJwkKid);\n}\nasync function loadClerkJWKFromRemote({\n  apiKey,\n  secretKey,\n  apiUrl = API_URL,\n  apiVersion = API_VERSION,\n  issuer,\n  kid,\n  jwksCacheTtlInMs = 1e3 * 60 * 60,\n  // 1 hour,\n  skipJwksCache\n}) {\n  const shouldRefreshCache = !getFromCache(kid) && reachedMaxCacheUpdatedAt();\n  if (skipJwksCache || shouldRefreshCache) {\n    let fetcher;\n    const key = secretKey || apiKey;\n    if (key) {\n      fetcher = () => fetchJWKSFromBAPI(apiUrl, key, apiVersion);\n    } else if (issuer) {\n      fetcher = () => fetchJWKSFromFAPI(issuer);\n    } else {\n      throw new TokenVerificationError({\n        action: \"Contact support@clerk.com\" /* ContactSupport */,\n        message: \"Failed to load JWKS from Clerk Backend or Frontend API.\",\n        reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */\n      });\n    }\n    const {\n      keys\n    } = await callWithRetry(fetcher);\n    if (!keys || !keys.length) {\n      throw new TokenVerificationError({\n        action: \"Contact support@clerk.com\" /* ContactSupport */,\n        message: \"The JWKS endpoint did not contain any signing keys. Contact support@clerk.com.\",\n        reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */\n      });\n    }\n    keys.forEach(key2 => setInCache(key2, jwksCacheTtlInMs));\n  }\n  const jwk = getFromCache(kid);\n  if (!jwk) {\n    const cacheValues = getCacheValues();\n    const jwkKeys = cacheValues.map(jwk2 => jwk2.kid).join(\", \");\n    throw new TokenVerificationError({\n      action: \"Contact support@clerk.com\" /* ContactSupport */,\n      message: `Unable to find a signing key in JWKS that matches the kid='${kid}' of the provided session token. Please make sure that the __session cookie or the HTTP authorization header contain a Clerk-generated session JWT.${jwkKeys ? ` The following kid are available: ${jwkKeys}` : \"\"}`,\n      reason: \"jwk-remote-missing\" /* RemoteJWKMissing */\n    });\n  }\n  return jwk;\n}\nasync function fetchJWKSFromFAPI(issuer) {\n  const url = new URL(issuer);\n  url.pathname = joinPaths(url.pathname, \".well-known/jwks.json\");\n  const response = await runtime_default.fetch(url.href);\n  if (!response.ok) {\n    throw new TokenVerificationError({\n      action: \"Contact support@clerk.com\" /* ContactSupport */,\n      message: `Error loading Clerk JWKS from ${url.href} with code=${response.status}`,\n      reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */\n    });\n  }\n  return response.json();\n}\nasync function fetchJWKSFromBAPI(apiUrl, key, apiVersion) {\n  if (!key) {\n    throw new TokenVerificationError({\n      action: \"Set the CLERK_SECRET_KEY or CLERK_API_KEY environment variable.\" /* SetClerkSecretKeyOrAPIKey */,\n      message: \"Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.\",\n      reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */\n    });\n  }\n  const url = new URL(apiUrl);\n  url.pathname = joinPaths(url.pathname, apiVersion, \"/jwks\");\n  const response = await runtime_default.fetch(url.href, {\n    headers: {\n      Authorization: `Bearer ${key}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    const json = await response.json();\n    const invalidSecretKeyError = getErrorObjectByCode(json?.errors, \"clerk_key_invalid\" /* InvalidSecretKey */);\n    if (invalidSecretKeyError) {\n      const reason = \"secret-key-invalid\" /* InvalidSecretKey */;\n      throw new TokenVerificationError({\n        action: \"Contact support@clerk.com\" /* ContactSupport */,\n        message: invalidSecretKeyError.message,\n        reason\n      });\n    }\n    throw new TokenVerificationError({\n      action: \"Contact support@clerk.com\" /* ContactSupport */,\n      message: `Error loading Clerk JWKS from ${url.href} with code=${response.status}`,\n      reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */\n    });\n  }\n  return response.json();\n}\nfunction reachedMaxCacheUpdatedAt() {\n  return Date.now() - lastUpdatedAt >= MAX_CACHE_LAST_UPDATED_AT_SECONDS * 1e3;\n}\n\n// src/tokens/verify.ts\nasync function verifyToken(token, options) {\n  const {\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion,\n    audience,\n    authorizedParties,\n    clockSkewInSeconds,\n    clockSkewInMs,\n    issuer,\n    jwksCacheTtlInMs,\n    jwtKey,\n    skipJwksCache\n  } = options;\n  if (options.apiKey) {\n    deprecated2(\"apiKey\", \"Use `secretKey` instead.\");\n  }\n  const {\n    header\n  } = decodeJwt(token);\n  const {\n    kid\n  } = header;\n  let key;\n  if (jwtKey) {\n    key = loadClerkJWKFromLocal(jwtKey);\n  } else if (typeof issuer === \"string\") {\n    key = await loadClerkJWKFromRemote({\n      issuer,\n      kid,\n      jwksCacheTtlInMs,\n      skipJwksCache\n    });\n  } else if (apiKey || secretKey) {\n    key = await loadClerkJWKFromRemote({\n      apiKey,\n      secretKey,\n      apiUrl,\n      apiVersion,\n      kid,\n      jwksCacheTtlInMs,\n      skipJwksCache\n    });\n  } else {\n    throw new TokenVerificationError({\n      action: \"Set the CLERK_JWT_KEY environment variable.\" /* SetClerkJWTKey */,\n      message: \"Failed to resolve JWK during verification.\",\n      reason: \"jwk-failed-to-resolve\" /* JWKFailedToResolve */\n    });\n  }\n  return await verifyJwt(token, {\n    audience,\n    authorizedParties,\n    clockSkewInSeconds,\n    clockSkewInMs,\n    key,\n    issuer\n  });\n}\n\n// src/tokens/interstitialRule.ts\nvar shouldRedirectToSatelliteUrl = qp => !!qp?.get(\"__clerk_satellite_url\");\nvar hasJustSynced = qp => qp?.get(\"__clerk_synced\") === \"true\";\nvar VALID_USER_AGENTS = /^Mozilla\\/|(Amazon CloudFront)/;\nvar isBrowser = userAgent => VALID_USER_AGENTS.test(userAgent || \"\");\nvar nonBrowserRequestInDevRule = options => {\n  const {\n    apiKey,\n    secretKey,\n    userAgent\n  } = options;\n  const key = secretKey || apiKey || \"\";\n  if (isDevelopmentFromApiKey(key) && !isBrowser(userAgent)) {\n    return signedOut(options, \"header-missing-non-browser\" /* HeaderMissingNonBrowser */);\n  }\n  return void 0;\n};\nvar crossOriginRequestWithoutHeader = options => {\n  const {\n    origin,\n    host,\n    forwardedHost,\n    forwardedProto\n  } = options;\n  const isCrossOrigin = origin && checkCrossOrigin({\n    originURL: new URL(origin),\n    host,\n    forwardedHost,\n    forwardedProto\n  });\n  if (isCrossOrigin) {\n    return signedOut(options, \"header-missing-cors\" /* HeaderMissingCORS */);\n  }\n  return void 0;\n};\nvar isPrimaryInDevAndRedirectsToSatellite = options => {\n  const {\n    apiKey,\n    secretKey,\n    isSatellite,\n    searchParams\n  } = options;\n  const key = secretKey || apiKey || \"\";\n  const isDev = isDevelopmentFromApiKey(key);\n  if (isDev && !isSatellite && shouldRedirectToSatelliteUrl(searchParams)) {\n    return interstitial(options, \"primary-responds-to-syncing\" /* PrimaryRespondsToSyncing */);\n  }\n  return void 0;\n};\nvar potentialFirstLoadInDevWhenUATMissing = options => {\n  const {\n    apiKey,\n    secretKey,\n    clientUat\n  } = options;\n  const key = secretKey || apiKey || \"\";\n  const res = isDevelopmentFromApiKey(key);\n  if (res && !clientUat) {\n    return interstitial(options, \"uat-missing\" /* CookieUATMissing */);\n  }\n  return void 0;\n};\nvar potentialRequestAfterSignInOrOutFromClerkHostedUiInDev = options => {\n  const {\n    apiKey,\n    secretKey,\n    referrer,\n    host,\n    forwardedHost,\n    forwardedProto\n  } = options;\n  const crossOriginReferrer = referrer && checkCrossOrigin({\n    originURL: new URL(referrer),\n    host,\n    forwardedHost,\n    forwardedProto\n  });\n  const key = secretKey || apiKey || \"\";\n  if (isDevelopmentFromApiKey(key) && crossOriginReferrer) {\n    return interstitial(options, \"cross-origin-referrer\" /* CrossOriginReferrer */);\n  }\n  return void 0;\n};\nvar potentialFirstRequestOnProductionEnvironment = options => {\n  const {\n    apiKey,\n    secretKey,\n    clientUat,\n    cookieToken\n  } = options;\n  const key = secretKey || apiKey || \"\";\n  if (isProductionFromApiKey(key) && !clientUat && !cookieToken) {\n    return signedOut(options, \"cookie-and-uat-missing\" /* CookieAndUATMissing */);\n  }\n  return void 0;\n};\nvar isNormalSignedOutState = options => {\n  const {\n    clientUat\n  } = options;\n  if (clientUat === \"0\") {\n    return signedOut(options, \"standard-signed-out\" /* StandardSignedOut */);\n  }\n  return void 0;\n};\nvar hasPositiveClientUatButCookieIsMissing = options => {\n  const {\n    clientUat,\n    cookieToken\n  } = options;\n  if (clientUat && Number.parseInt(clientUat) > 0 && !cookieToken) {\n    return interstitial(options, \"cookie-missing\" /* CookieMissing */);\n  }\n  return void 0;\n};\nvar hasValidHeaderToken = async options => {\n  const {\n    headerToken\n  } = options;\n  const sessionClaims = await verifyRequestState(options, headerToken);\n  return await signedIn({\n    ...options,\n    token: headerToken\n  }, sessionClaims);\n};\nvar hasValidCookieToken = async options => {\n  const {\n    cookieToken,\n    clientUat\n  } = options;\n  const sessionClaims = await verifyRequestState(options, cookieToken);\n  const state = await signedIn({\n    ...options,\n    token: cookieToken\n  }, sessionClaims);\n  const jwt = state.toAuth().sessionClaims;\n  const cookieTokenIsOutdated = jwt.iat < Number.parseInt(clientUat);\n  if (!clientUat || cookieTokenIsOutdated) {\n    return interstitial(options, \"cookie-outdated\" /* CookieOutDated */);\n  }\n  return state;\n};\nasync function runInterstitialRules(opts, rules) {\n  for (const rule of rules) {\n    const res = await rule(opts);\n    if (res) {\n      return res;\n    }\n  }\n  return signedOut(opts, \"unexpected-error\" /* UnexpectedError */);\n}\nasync function verifyRequestState(options, token) {\n  const {\n    isSatellite,\n    proxyUrl\n  } = options;\n  let issuer;\n  if (isSatellite) {\n    issuer = null;\n  } else if (proxyUrl) {\n    issuer = proxyUrl;\n  } else {\n    issuer = iss => iss.startsWith(\"https://clerk.\") || iss.includes(\".clerk.accounts\");\n  }\n  return verifyToken(token, {\n    ...options,\n    issuer\n  });\n}\nvar isSatelliteAndNeedsSyncing = options => {\n  const {\n    clientUat,\n    isSatellite,\n    searchParams,\n    userAgent\n  } = options;\n  const isSignedOut = !clientUat || clientUat === \"0\";\n  if (isSatellite && isSignedOut && !isBrowser(userAgent)) {\n    return signedOut(options, \"satellite-needs-syncing\" /* SatelliteCookieNeedsSyncing */);\n  }\n  if (isSatellite && isSignedOut && !hasJustSynced(searchParams)) {\n    return interstitial(options, \"satellite-needs-syncing\" /* SatelliteCookieNeedsSyncing */);\n  }\n  return void 0;\n};\n\n// src/tokens/request.ts\nfunction assertSignInUrlExists(signInUrl, key) {\n  if (!signInUrl && isDevelopmentFromApiKey(key)) {\n    throw new Error(`Missing signInUrl. Pass a signInUrl for dev instances if an app is satellite`);\n  }\n}\nfunction assertProxyUrlOrDomain(proxyUrlOrDomain) {\n  if (!proxyUrlOrDomain) {\n    throw new Error(`Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl`);\n  }\n}\nfunction assertSignInUrlFormatAndOrigin(_signInUrl, origin) {\n  let signInUrl;\n  try {\n    signInUrl = new URL(_signInUrl);\n  } catch {\n    throw new Error(`The signInUrl needs to have a absolute url format.`);\n  }\n  if (signInUrl.origin === origin) {\n    throw new Error(`The signInUrl needs to be on a different origin than your satellite application.`);\n  }\n}\nasync function authenticateRequest(options) {\n  const {\n    cookies,\n    headers,\n    searchParams\n  } = buildRequest2(options?.request);\n  if (options.frontendApi) {\n    deprecated2(\"frontendApi\", \"Use `publishableKey` instead.\");\n  }\n  if (options.apiKey) {\n    deprecated2(\"apiKey\", \"Use `secretKey` instead.\");\n  }\n  options = {\n    ...options,\n    ...loadOptionsFromHeaders(options, headers),\n    frontendApi: parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi,\n    apiUrl: options.apiUrl || API_URL,\n    apiVersion: options.apiVersion || API_VERSION,\n    cookieToken: options.cookieToken || cookies?.(constants.Cookies.Session),\n    clientUat: options.clientUat || cookies?.(constants.Cookies.ClientUat),\n    searchParams: options.searchParams || searchParams || void 0\n  };\n  assertValidSecretKey(options.secretKey || options.apiKey);\n  if (options.isSatellite) {\n    assertSignInUrlExists(options.signInUrl, options.secretKey || options.apiKey);\n    if (options.signInUrl && options.origin) {\n      assertSignInUrlFormatAndOrigin(options.signInUrl, options.origin);\n    }\n    assertProxyUrlOrDomain(options.proxyUrl || options.domain);\n  }\n  async function authenticateRequestWithTokenInHeader() {\n    try {\n      const state = await runInterstitialRules(options, [hasValidHeaderToken]);\n      return state;\n    } catch (err) {\n      return handleError(err, \"header\");\n    }\n  }\n  async function authenticateRequestWithTokenInCookie() {\n    try {\n      const state = await runInterstitialRules(options, [crossOriginRequestWithoutHeader, nonBrowserRequestInDevRule, isSatelliteAndNeedsSyncing, isPrimaryInDevAndRedirectsToSatellite, potentialFirstRequestOnProductionEnvironment, potentialFirstLoadInDevWhenUATMissing, potentialRequestAfterSignInOrOutFromClerkHostedUiInDev, hasPositiveClientUatButCookieIsMissing, isNormalSignedOutState, hasValidCookieToken]);\n      return state;\n    } catch (err) {\n      return handleError(err, \"cookie\");\n    }\n  }\n  function handleError(err, tokenCarrier) {\n    if (err instanceof TokenVerificationError) {\n      err.tokenCarrier = tokenCarrier;\n      const reasonToReturnInterstitial = [\"token-expired\" /* TokenExpired */, \"token-not-active-yet\" /* TokenNotActiveYet */].includes(err.reason);\n      if (reasonToReturnInterstitial) {\n        if (tokenCarrier === \"header\") {\n          return unknownState(options, err.reason, err.getFullMessage());\n        }\n        return interstitial(options, err.reason, err.getFullMessage());\n      }\n      return signedOut(options, err.reason, err.getFullMessage());\n    }\n    return signedOut(options, \"unexpected-error\" /* UnexpectedError */, err.message);\n  }\n  if (options.headerToken) {\n    return authenticateRequestWithTokenInHeader();\n  }\n  return authenticateRequestWithTokenInCookie();\n}\nvar debugRequestState = params => {\n  const {\n    frontendApi,\n    isSignedIn,\n    proxyUrl,\n    isInterstitial,\n    reason,\n    message,\n    publishableKey,\n    isSatellite,\n    domain\n  } = params;\n  return {\n    frontendApi,\n    isSignedIn,\n    proxyUrl,\n    isInterstitial,\n    reason,\n    message,\n    publishableKey,\n    isSatellite,\n    domain\n  };\n};\nvar loadOptionsFromHeaders = (options, headers) => {\n  if (!headers) {\n    return {};\n  }\n  return {\n    headerToken: stripAuthorizationHeader(options.headerToken || headers(constants.Headers.Authorization)),\n    origin: options.origin || headers(constants.Headers.Origin),\n    host: options.host || headers(constants.Headers.Host),\n    forwardedHost: options.forwardedHost || headers(constants.Headers.ForwardedHost),\n    forwardedPort: options.forwardedPort || headers(constants.Headers.ForwardedPort),\n    forwardedProto: options.forwardedProto || headers(constants.Headers.CloudFrontForwardedProto) || headers(constants.Headers.ForwardedProto),\n    referrer: options.referrer || headers(constants.Headers.Referrer),\n    userAgent: options.userAgent || headers(constants.Headers.UserAgent)\n  };\n};\n\n// src/tokens/factory.ts\nfunction createAuthenticateRequest(params) {\n  const {\n    apiClient\n  } = params;\n  const {\n    apiKey: buildtimeApiKey = \"\",\n    secretKey: buildtimeSecretKey = \"\",\n    jwtKey: buildtimeJwtKey = \"\",\n    apiUrl = API_URL,\n    apiVersion = API_VERSION,\n    frontendApi: buildtimeFrontendApi = \"\",\n    proxyUrl: buildProxyUrl = \"\",\n    publishableKey: buildtimePublishableKey = \"\",\n    isSatellite: buildtimeIsSatellite = false,\n    domain: buildtimeDomain = \"\",\n    audience: buildtimeAudience = \"\",\n    userAgent: buildUserAgent\n  } = params.options;\n  const authenticateRequest2 = ({\n    apiKey: runtimeApiKey,\n    secretKey: runtimeSecretKey,\n    audience: runtimeAudience,\n    frontendApi: runtimeFrontendApi,\n    proxyUrl: runtimeProxyUrl,\n    publishableKey: runtimePublishableKey,\n    jwtKey: runtimeJwtKey,\n    isSatellite: runtimeIsSatellite,\n    domain: runtimeDomain,\n    searchParams,\n    ...rest\n  }) => {\n    return authenticateRequest({\n      ...rest,\n      apiKey: runtimeApiKey || buildtimeApiKey,\n      secretKey: runtimeSecretKey || buildtimeSecretKey,\n      audience: runtimeAudience || buildtimeAudience,\n      apiUrl,\n      apiVersion,\n      frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n      proxyUrl: runtimeProxyUrl || buildProxyUrl,\n      publishableKey: runtimePublishableKey || buildtimePublishableKey,\n      isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n      domain: runtimeDomain || buildtimeDomain,\n      jwtKey: runtimeJwtKey || buildtimeJwtKey,\n      searchParams\n    });\n  };\n  const localInterstitial = ({\n    frontendApi: runtimeFrontendApi,\n    publishableKey: runtimePublishableKey,\n    proxyUrl: runtimeProxyUrl,\n    isSatellite: runtimeIsSatellite,\n    domain: runtimeDomain,\n    ...rest\n  }) => loadInterstitialFromLocal({\n    ...rest,\n    frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n    proxyUrl: runtimeProxyUrl || buildProxyUrl,\n    publishableKey: runtimePublishableKey || buildtimePublishableKey,\n    isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n    domain: runtimeDomain || buildtimeDomain\n  });\n  const remotePublicInterstitial = ({\n    frontendApi: runtimeFrontendApi,\n    publishableKey: runtimePublishableKey,\n    proxyUrl: runtimeProxyUrl,\n    isSatellite: runtimeIsSatellite,\n    domain: runtimeDomain,\n    userAgent: runtimeUserAgent,\n    ...rest\n  }) => {\n    return loadInterstitialFromBAPI({\n      ...rest,\n      apiUrl,\n      frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n      publishableKey: runtimePublishableKey || buildtimePublishableKey,\n      proxyUrl: runtimeProxyUrl || buildProxyUrl,\n      isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n      domain: runtimeDomain || buildtimeDomain,\n      userAgent: runtimeUserAgent || buildUserAgent\n    });\n  };\n  const remotePublicInterstitialUrl = buildPublicInterstitialUrl;\n  const remotePrivateInterstitial = () => apiClient.interstitial.getInterstitial();\n  return {\n    authenticateRequest: authenticateRequest2,\n    localInterstitial,\n    remotePublicInterstitial,\n    remotePrivateInterstitial,\n    remotePublicInterstitialUrl,\n    debugRequestState\n  };\n}\n\n// src/redirections.ts\nvar buildUrl = (targetUrl, redirectUrl) => {\n  let url;\n  if (!targetUrl.startsWith(\"http\")) {\n    if (!redirectUrl || !redirectUrl.startsWith(\"http\")) {\n      throw new Error(\"destination url or return back url should be an absolute path url!\");\n    }\n    const baseURL = new URL(redirectUrl);\n    url = new URL(targetUrl, baseURL.origin);\n  } else {\n    url = new URL(targetUrl);\n  }\n  if (redirectUrl) {\n    url.searchParams.set(\"redirect_url\", redirectUrl);\n  }\n  return url.toString();\n};\nfunction redirect({\n  redirectAdapter,\n  signUpUrl,\n  signInUrl,\n  frontendApi,\n  publishableKey\n}) {\n  if (!frontendApi) {\n    frontendApi = parsePublishableKey(publishableKey)?.frontendApi;\n  } else {\n    deprecated2(\"frontendApi\", \"Use `publishableKey` instead.\");\n  }\n  const accountsBaseUrl = buildAccountsBaseUrl(frontendApi);\n  const redirectToSignUp = ({\n    returnBackUrl\n  } = {}) => {\n    if (!signUpUrl && !accountsBaseUrl) {\n      errorThrower.throwMissingPublishableKeyError();\n    }\n    const accountsSignUpUrl = `${accountsBaseUrl}/sign-up`;\n    return redirectAdapter(buildUrl(signUpUrl || accountsSignUpUrl, returnBackUrl));\n  };\n  const redirectToSignIn = ({\n    returnBackUrl\n  } = {}) => {\n    if (!signInUrl && !accountsBaseUrl) {\n      errorThrower.throwMissingPublishableKeyError();\n    }\n    const accountsSignInUrl = `${accountsBaseUrl}/sign-in`;\n    return redirectAdapter(buildUrl(signInUrl || accountsSignInUrl, returnBackUrl));\n  };\n  return {\n    redirectToSignUp,\n    redirectToSignIn\n  };\n}\nfunction buildAccountsBaseUrl(frontendApi) {\n  if (!frontendApi) {\n    return \"\";\n  }\n  const accountsBaseUrl = frontendApi.replace(/(clerk\\.accountsstage\\.)/, \"accountsstage.\").replace(/(clerk\\.accounts\\.|clerk\\.)/, \"accounts.\");\n  return `https://${accountsBaseUrl}`;\n}\n\n// src/index.ts\nfunction Clerk(options) {\n  const opts = {\n    ...options\n  };\n  const apiClient = createBackendApiClient(opts);\n  const requestState = createAuthenticateRequest({\n    options: opts,\n    apiClient\n  });\n  const clerkInstance = {\n    ...apiClient,\n    ...requestState,\n    /**\n     * @deprecated This prop has been deprecated and will be removed in the next major release.\n     */\n    __unstable_options: opts\n  };\n  deprecatedObjectProperty2(clerkInstance, \"__unstable_options\", \"Use `createClerkClient({...})` to create a new clerk instance instead.\");\n  return clerkInstance;\n}\nexport { AllowlistIdentifier, AuthStatus, Clerk, Client, DeletedObject, Email, EmailAddress, ExternalAccount, IdentificationLink, Invitation, OauthAccessToken, ObjectType, Organization, OrganizationInvitation, OrganizationMembership, OrganizationMembershipPublicUserData, PhoneNumber, RedirectUrl, SMSMessage, Session, SignInToken, Token, User, Verification, buildRequestUrl, constants, createAuthenticateRequest, createIsomorphicRequest, debugRequestState, decodeJwt, deserialize, hasValidSignature, loadInterstitialFromLocal, makeAuthObjectSerializable, prunePrivateMetadata, redirect, sanitizeAuthObject, signJwt, signedInAuthObject, signedOutAuthObject, verifyJwt, verifyToken };","map":{"version":3,"names":["deprecatedObjectProperty","deprecatedObjectProperty2","AbstractAPI","constructor","request","requireId","id","Error","SEPARATOR","MULTIPLE_SEPARATOR_REGEX","RegExp","joinPaths","args","filter","p","join","replace","basePath","AllowlistIdentifierAPI","getAllowlistIdentifierList","method","path","createAllowlistIdentifier","params","bodyParams","deleteAllowlistIdentifier","allowlistIdentifierId","basePath2","ClientAPI","getClientList","getClient","clientId","verifyClient","token","basePath3","DomainAPI","deleteDomain","basePath4","EmailAddressAPI","getEmailAddress","emailAddressId","createEmailAddress","updateEmailAddress","deleteEmailAddress","deprecated","basePath5","EmailAPI","createEmail","addClerkPrefix","getScriptUrl","getClerkJsMajorVersionOrTag","callWithRetry","isDevelopmentFromApiKey","isProductionFromApiKey","parsePublishableKey","deprecated2","deprecatedProperty","buildErrorThrower","createDevOrStagingUrlCache","errorThrower","packageName","isDevOrStagingUrl","InterstitialAPI","getInterstitial","headerParams","basePath6","InvitationAPI","getInvitationList","queryParams","createInvitation","revokeInvitation","invitationId","deprecated3","crypto","fetchApisPolyfill","RuntimeFetch","RuntimeAbortController","RuntimeBlob","RuntimeFormData","RuntimeHeaders","RuntimeRequest","RuntimeResponse","globalFetch","bind","globalThis","runtime","fetch","AbortController","Blob","FormData","Headers","Request","Response","runtime_default","basePath7","OrganizationAPI","getOrganizationList","createOrganization","getOrganization","organizationIdOrSlug","organizationId","slug","updateOrganization","updateOrganizationLogo","formData","append","file","uploaderUserId","deleteOrganizationLogo","updateOrganizationMetadata","deleteOrganization","getOrganizationMembershipList","limit","offset","createOrganizationMembership","userId","role","updateOrganizationMembership","updateOrganizationMembershipMetadata","publicMetadata","privateMetadata","deleteOrganizationMembership","getOrganizationInvitationList","status","getPendingOrganizationInvitationList","createOrganizationInvitation","getOrganizationInvitation","revokeOrganizationInvitation","requestingUserId","basePath8","PhoneNumberAPI","getPhoneNumber","phoneNumberId","createPhoneNumber","updatePhoneNumber","deletePhoneNumber","basePath9","RedirectUrlAPI","getRedirectUrlList","getRedirectUrl","redirectUrlId","createRedirectUrl","deleteRedirectUrl","basePath10","SessionAPI","getSessionList","getSession","sessionId","revokeSession","verifySession","getToken","template","jwt","basePath11","SignInTokenAPI","createSignInToken","revokeSignInToken","signInTokenId","deprecated4","basePath12","SMSMessageAPI","createSMSMessage","basePath13","UserAPI","getUserList","getUser","createUser","updateUser","updateUserProfileImage","updateUserMetadata","deleteUser","getCount","getUserOauthAccessToken","provider","disableUserMFA","verifyPassword","password","verifyTOTP","code","ClerkAPIResponseError","deepmerge","snakecaseKeys","API_URL","API_VERSION","USER_AGENT","MAX_CACHE_LAST_UPDATED_AT_SECONDS","Attributes","AuthToken","AuthStatus","AuthReason","AuthMessage","Cookies","Session","ClientUat","EnableDebug","ClerkRedirectTo","CloudFrontForwardedProto","Authorization","ForwardedPort","ForwardedProto","ForwardedHost","Referrer","UserAgent","Origin","Host","ContentType","SearchParams","ContentTypes","Json","constants","assertValidSecretKey","val","AllowlistIdentifier","_AllowlistIdentifier","identifier","createdAt","updatedAt","fromJSON","data","created_at","updated_at","invitation_id","_Session","lastActiveAt","expireAt","abandonAt","client_id","user_id","last_active_at","expire_at","abandon_at","Client","_Client","sessionIds","sessions","signInId","signUpId","lastActiveSessionId","session_ids","map","x","sign_in_id","sign_up_id","last_active_session_id","DeletedObject","_DeletedObject","object","deleted","Email","_Email","fromEmailName","toEmailAddress","subject","body","bodyPlain","deliveredByClerk","from_email_name","email_address_id","to_email_address","body_plain","delivered_by_clerk","IdentificationLink","_IdentificationLink","type","Verification","_Verification","strategy","externalVerificationRedirectURL","attempts","nonce","external_verification_redirect_url","URL","EmailAddress","_EmailAddress","emailAddress","verification","linkedTo","email_address","linked_to","link","ExternalAccount","_ExternalAccount","identificationId","externalId","approvedScopes","firstName","lastName","picture","imageUrl","username","label","identification_id","provider_user_id","approved_scopes","first_name","last_name","avatar_url","image_url","public_metadata","Invitation","_Invitation","revoked","ObjectType","ObjectType2","OauthAccessToken","_OauthAccessToken","scopes","tokenSecret","token_secret","Organization","_Organization","name","logoUrl","hasImage","createdBy","maxAllowedMemberships","adminDeleteEnabled","members_count","logo_url","has_image","created_by","private_metadata","max_allowed_memberships","admin_delete_enabled","OrganizationInvitation","_OrganizationInvitation","organization_id","OrganizationMembership","_OrganizationMembership","organization","publicUserData","OrganizationMembershipPublicUserData","public_user_data","_OrganizationMembershipPublicUserData","profileImageUrl","profile_image_url","PhoneNumber","_PhoneNumber","phoneNumber","reservedForSecondFactor","defaultSecondFactor","phone_number","reserved_for_second_factor","default_second_factor","RedirectUrl","_RedirectUrl","url","SignInToken","_SignInToken","SMSMessage","_SMSMessage","fromPhoneNumber","toPhoneNumber","message","from_phone_number","to_phone_number","phone_number_id","Token","_Token","Web3Wallet","_Web3Wallet","web3Wallet","web3_wallet","User","_User","passwordEnabled","totpEnabled","backupCodeEnabled","twoFactorEnabled","banned","gender","birthday","primaryEmailAddressId","primaryPhoneNumberId","primaryWeb3WalletId","lastSignInAt","unsafeMetadata","emailAddresses","phoneNumbers","web3Wallets","externalAccounts","createOrganizationEnabled","password_enabled","totp_enabled","backup_code_enabled","two_factor_enabled","primary_email_address_id","primary_phone_number_id","primary_web3_wallet_id","last_sign_in_at","external_id","unsafe_metadata","email_addresses","phone_numbers","web3_wallets","external_accounts","create_organization_enabled","deserialize","payload","Array","isArray","item","jsonToObject","isPaginated","total_count","withLegacyReturn","cb","response","errors","clerkTraceId","statusText","error","buildRequest","options","requestOptions","apiKey","secretKey","httpOptions","apiUrl","apiVersion","userAgent","key","finalUrl","snakecasedQueryParams","key2","Object","entries","flat","forEach","v","searchParams","headers","res","href","hasBody","keys","length","JSON","stringify","deep","isJSONResponse","get","json","text","ok","err","getTraceId","parseErrors","clerk_trace_id","cfRay","parseError","longMessage","long_message","meta","paramName","param_name","session_id","createBackendApiClient","allowlistIdentifiers","clients","emails","interstitial","invitations","organizations","redirectUrls","signInTokens","smsMessages","users","domains","deprecated5","createDebug","substring","jwtKey","signedInAuthObject","sessionClaims","debugData","act","actor","sid","org_id","orgId","org_role","orgRole","org_slug","orgSlug","org_permissions","orgPermissions","sub","session","user","createGetToken","sessionToken","fetcher","has","createHasAuthorization","debug","signedOutAuthObject","Promise","resolve","prunePrivateMetadata","resource","sanitizeAuthObject","authObject","makeAuthObjectSerializable","obj","rest","permission","includes","TokenVerificationError","_TokenVerificationError","action","reason","setPrototypeOf","prototype","getFullMessage","m","tokenCarrier","loadInterstitialFromLocal","frontendApi","pkgVersion","publishableKey","domainOnlyInProd","domain","clerkJSUrl","clerkJSVersion","proxyUrl","isSatellite","signInUrl","loadInterstitialFromBAPI","buildPublicInterstitialUrl","pathname","parse","getHeader","req","getFirstValueFromHeader","value","split","buildRequestUrl","initialUrl","forwardedProto","forwardedHost","host","protocol","base","buildOrigin","resolvedHost","resolvedProtocol","createIsomorphicRequest","headersGeneratedURL","buildRequest2","cookies","parseIsomorphicRequestCookies","getHeaderFromIsomorphicRequest","getSearchParamsFromIsomorphicRequest","decode","str","decodeURIComponent","stripAuthorizationHeader","authValue","AuthStatus2","signedIn","cookieToken","headerToken","loadSession","loadUser","loadOrganization","signUpUrl","afterSignInUrl","afterSignUpUrl","sessionResp","userResp","organizationResp","all","isSignedIn","isInterstitial","isUnknown","toAuth","signedOut","unknownState","checkCrossOrigin","originURL","finalURL","origin","getErrorObjectByCode","find","base64url","string","opts","parse2","base64UrlEncoding","chars","bits","encoding","codes","i","loose","SyntaxError","end","out","Uint8Array","buffer","written","pad","mask","algToHash","RS256","RS384","RS512","RSA_ALGORITHM_NAME","jwksAlgToCryptoAlg","algs","getCryptoAlgorithm","algorithmName","hash","isArrayString","s","every","a","assertAudienceClaim","aud","audience","audienceList","audList","shouldVerifyAudience","some","assertHeaderType","typ","assertHeaderAlgorithm","alg","assertSubClaim","assertAuthorizedPartiesClaim","azp","authorizedParties","assertIssuerClaim","iss","issuer","assertExpirationClaim","exp","clockSkewInMs","currentDate","Date","now","expiryDate","setUTCSeconds","expired","getTime","toUTCString","assertActivationClaim","nbf","notBeforeDate","early","assertIssuedAtClaim","iat","issuedAtDate","postIssued","isomorphicAtob","pemToBuffer","secret","trimmed","decoded","ArrayBuffer","bufView","strLen","charCodeAt","importKey","algorithm","keyUsage","subtle","keyData","format","DEFAULT_CLOCK_SKEW_IN_SECONDS","hasValidSignature","header","signature","raw","encoder","TextEncoder","encode","cryptoKey","verify","decodeJwt","tokenParts","toString","rawHeader","rawPayload","rawSignature","decoder","TextDecoder","verifyJwt","clockSkewInSeconds","clockSkew","signatureValid","encodeJwtData","stringified","encoded","signJwt","Math","floor","encodedHeader","encodedPayload","firstPart","sign","cache","lastUpdatedAt","getFromCache","kid","getCacheValues","values","setInCache","jwk","jwksCacheTtlInMs","setTimeout","LocalJwkKid","PEM_HEADER","PEM_TRAILER","RSA_PREFIX","RSA_SUFFIX","loadClerkJWKFromLocal","localKey","modulus","kty","n","e","loadClerkJWKFromRemote","skipJwksCache","shouldRefreshCache","reachedMaxCacheUpdatedAt","fetchJWKSFromBAPI","fetchJWKSFromFAPI","cacheValues","jwkKeys","jwk2","invalidSecretKeyError","verifyToken","shouldRedirectToSatelliteUrl","qp","hasJustSynced","VALID_USER_AGENTS","isBrowser","test","nonBrowserRequestInDevRule","crossOriginRequestWithoutHeader","isCrossOrigin","isPrimaryInDevAndRedirectsToSatellite","isDev","potentialFirstLoadInDevWhenUATMissing","clientUat","potentialRequestAfterSignInOrOutFromClerkHostedUiInDev","referrer","crossOriginReferrer","potentialFirstRequestOnProductionEnvironment","isNormalSignedOutState","hasPositiveClientUatButCookieIsMissing","Number","parseInt","hasValidHeaderToken","verifyRequestState","hasValidCookieToken","state","cookieTokenIsOutdated","runInterstitialRules","rules","rule","startsWith","isSatelliteAndNeedsSyncing","isSignedOut","assertSignInUrlExists","assertProxyUrlOrDomain","proxyUrlOrDomain","assertSignInUrlFormatAndOrigin","_signInUrl","authenticateRequest","loadOptionsFromHeaders","authenticateRequestWithTokenInHeader","handleError","authenticateRequestWithTokenInCookie","reasonToReturnInterstitial","debugRequestState","forwardedPort","createAuthenticateRequest","apiClient","buildtimeApiKey","buildtimeSecretKey","buildtimeJwtKey","buildtimeFrontendApi","buildProxyUrl","buildtimePublishableKey","buildtimeIsSatellite","buildtimeDomain","buildtimeAudience","buildUserAgent","authenticateRequest2","runtimeApiKey","runtimeSecretKey","runtimeAudience","runtimeFrontendApi","runtimeProxyUrl","runtimePublishableKey","runtimeJwtKey","runtimeIsSatellite","runtimeDomain","localInterstitial","remotePublicInterstitial","runtimeUserAgent","remotePublicInterstitialUrl","remotePrivateInterstitial","buildUrl","targetUrl","redirectUrl","baseURL","set","redirect","redirectAdapter","accountsBaseUrl","buildAccountsBaseUrl","redirectToSignUp","returnBackUrl","throwMissingPublishableKeyError","accountsSignUpUrl","redirectToSignIn","accountsSignInUrl","Clerk","requestState","clerkInstance","__unstable_options"],"sources":["/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/index.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/AbstractApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/util/path.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/AllowlistIdentifierApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/ClientApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/DomainApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/EmailAddressApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/EmailApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/util/shared.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/InterstitialApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/InvitationApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/OrganizationApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/runtime/index.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/PhoneNumberApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/RedirectUrlApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/SessionApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/SignInTokenApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/SMSMessageApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/endpoints/UserApi.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/request.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/constants.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/util/assertValidSecretKey.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/AllowlistIdentifier.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Session.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Client.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/DeletedObject.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Email.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/IdentificationLink.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Verification.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/EmailAddress.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/ExternalAccount.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Invitation.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/JSON.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/OauthAccessToken.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Organization.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/OrganizationInvitation.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/OrganizationMembership.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/PhoneNumber.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/RedirectUrl.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/SignInTokens.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/SMSMessage.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Token.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Web3Wallet.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/User.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/resources/Deserializer.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/api/factory.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/authObjects.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/errors.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/interstitial.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/util/IsomorphicRequest.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/utils.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/authStatus.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/util/request.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/jwt/verifyJwt.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/util/rfc4648.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/jwt/algorithms.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/jwt/assertions.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/jwt/cryptoKeys.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/jwt/signJwt.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/keys.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/verify.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/interstitialRule.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/request.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/tokens/factory.ts","/Users/riku.isayama/Documents/0/chat-app/client/node_modules/@clerk/backend/src/redirections.ts"],"sourcesContent":["import { deprecatedObjectProperty } from '@clerk/shared/deprecated';\n\nimport type { CreateBackendApiOptions } from './api';\nimport { createBackendApiClient } from './api';\nimport type { CreateAuthenticateRequestOptions } from './tokens';\nimport { createAuthenticateRequest } from './tokens';\n\nexport { createIsomorphicRequest } from './util/IsomorphicRequest';\n\nexport * from './api/resources';\nexport * from './tokens';\nexport * from './tokens/jwt';\nexport * from './tokens/verify';\nexport { constants } from './constants';\nexport { redirect } from './redirections';\nexport { buildRequestUrl } from './utils';\n\nexport type ClerkOptions = CreateBackendApiOptions &\n  Partial<\n    Pick<\n      CreateAuthenticateRequestOptions['options'],\n      'audience' | 'jwtKey' | 'proxyUrl' | 'secretKey' | 'publishableKey' | 'domain' | 'isSatellite'\n    >\n  >;\n\nexport function Clerk(options: ClerkOptions) {\n  const opts = { ...options };\n  const apiClient = createBackendApiClient(opts);\n  const requestState = createAuthenticateRequest({ options: opts, apiClient });\n\n  const clerkInstance = {\n    ...apiClient,\n    ...requestState,\n    /**\n     * @deprecated This prop has been deprecated and will be removed in the next major release.\n     */\n    __unstable_options: opts,\n  };\n\n  // The __unstable_options is not being used internally and\n  // it's only being set in packages/sdk-node/src/clerkClient.ts#L86\n  deprecatedObjectProperty(\n    clerkInstance,\n    '__unstable_options',\n    'Use `createClerkClient({...})` to create a new clerk instance instead.',\n  );\n\n  return clerkInstance;\n}\n","import type { RequestFunction } from '../request';\n\nexport abstract class AbstractAPI {\n  constructor(protected request: RequestFunction) {}\n\n  protected requireId(id: string) {\n    if (!id) {\n      throw new Error('A valid resource ID is required.');\n    }\n  }\n}\n","const SEPARATOR = '/';\nconst MULTIPLE_SEPARATOR_REGEX = new RegExp(SEPARATOR + '{1,}', 'g');\n\ntype PathString = string | null | undefined;\n\nexport function joinPaths(...args: PathString[]): string {\n  return args\n    .filter(p => p)\n    .join(SEPARATOR)\n    .replace(MULTIPLE_SEPARATOR_REGEX, SEPARATOR);\n}\n","import { joinPaths } from '../../util/path';\nimport type { AllowlistIdentifier } from '../resources/AllowlistIdentifier';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/allowlist_identifiers';\n\ntype AllowlistIdentifierCreateParams = {\n  identifier: string;\n  notify: boolean;\n};\n\nexport class AllowlistIdentifierAPI extends AbstractAPI {\n  public async getAllowlistIdentifierList() {\n    return this.request<AllowlistIdentifier[]>({\n      method: 'GET',\n      path: basePath,\n    });\n  }\n\n  public async createAllowlistIdentifier(params: AllowlistIdentifierCreateParams) {\n    return this.request<AllowlistIdentifier>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async deleteAllowlistIdentifier(allowlistIdentifierId: string) {\n    this.requireId(allowlistIdentifierId);\n    return this.request<AllowlistIdentifier>({\n      method: 'DELETE',\n      path: joinPaths(basePath, allowlistIdentifierId),\n    });\n  }\n}\n","import { joinPaths } from '../../util/path';\nimport type { Client } from '../resources/Client';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/clients';\n\nexport class ClientAPI extends AbstractAPI {\n  public async getClientList() {\n    return this.request<Client[]>({\n      method: 'GET',\n      path: basePath,\n    });\n  }\n\n  public async getClient(clientId: string) {\n    this.requireId(clientId);\n    return this.request<Client>({\n      method: 'GET',\n      path: joinPaths(basePath, clientId),\n    });\n  }\n\n  public verifyClient(token: string) {\n    return this.request<Client>({\n      method: 'POST',\n      path: joinPaths(basePath, 'verify'),\n      bodyParams: { token },\n    });\n  }\n}\n","import { joinPaths } from '../../util/path';\nimport type { DeletedObject } from '../resources/DeletedObject';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/domains';\n\nexport class DomainAPI extends AbstractAPI {\n  public async deleteDomain(id: string) {\n    return this.request<DeletedObject>({\n      method: 'DELETE',\n      path: joinPaths(basePath, id),\n    });\n  }\n}\n","import { joinPaths } from '../../util/path';\nimport type { DeletedObject, EmailAddress } from '../resources';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/email_addresses';\n\ntype CreateEmailAddressParams = {\n  userId: string;\n  emailAddress: string;\n  verified?: boolean;\n  primary?: boolean;\n};\n\ntype UpdateEmailAddressParams = {\n  verified?: boolean;\n  primary?: boolean;\n};\n\nexport class EmailAddressAPI extends AbstractAPI {\n  public async getEmailAddress(emailAddressId: string) {\n    this.requireId(emailAddressId);\n\n    return this.request<EmailAddress>({\n      method: 'GET',\n      path: joinPaths(basePath, emailAddressId),\n    });\n  }\n\n  public async createEmailAddress(params: CreateEmailAddressParams) {\n    return this.request<EmailAddress>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async updateEmailAddress(emailAddressId: string, params: UpdateEmailAddressParams = {}) {\n    this.requireId(emailAddressId);\n\n    return this.request<EmailAddress>({\n      method: 'PATCH',\n      path: joinPaths(basePath, emailAddressId),\n      bodyParams: params,\n    });\n  }\n\n  public async deleteEmailAddress(emailAddressId: string) {\n    this.requireId(emailAddressId);\n\n    return this.request<DeletedObject>({\n      method: 'DELETE',\n      path: joinPaths(basePath, emailAddressId),\n    });\n  }\n}\n","import { deprecated } from '@clerk/shared/deprecated';\n\nimport type { Email } from '../resources/Email';\nimport { AbstractAPI } from './AbstractApi';\n\ntype EmailParams = {\n  fromEmailName: string;\n  emailAddressId: string;\n  subject: string;\n  body: string;\n};\n\nconst basePath = '/emails';\n\n/**\n * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n */\nexport class EmailAPI extends AbstractAPI {\n  /**\n   * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n   */\n  public async createEmail(params: EmailParams) {\n    deprecated(\n      'EmailAPI.createEmail',\n      'This endpoint is no longer available and the function will be removed in the next major version.',\n    );\n    return this.request<Email>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n}\n","export { addClerkPrefix, getScriptUrl, getClerkJsMajorVersionOrTag } from '@clerk/shared/url';\nexport { callWithRetry } from '@clerk/shared/callWithRetry';\nexport { isDevelopmentFromApiKey, isProductionFromApiKey, parsePublishableKey } from '@clerk/shared/keys';\nexport { deprecated, deprecatedProperty } from '@clerk/shared/deprecated';\n\nimport { buildErrorThrower } from '@clerk/shared/error';\n// TODO: replace packageName with `${PACKAGE_NAME}@${PACKAGE_VERSION}` from tsup.config.ts\nexport const errorThrower = buildErrorThrower({ packageName: '@clerk/backend' });\n\nimport { createDevOrStagingUrlCache } from '@clerk/shared/keys';\nexport const { isDevOrStagingUrl } = createDevOrStagingUrlCache();\n","import { deprecated } from '../../util/shared';\nimport { AbstractAPI } from './AbstractApi';\n/**\n * @deprecated Switch to the public interstitial endpoint from Clerk Backend API.\n */\nexport class InterstitialAPI extends AbstractAPI {\n  public async getInterstitial() {\n    deprecated(\n      'getInterstitial()',\n      'Switch to `Clerk(...).localInterstitial(...)` from `import { Clerk } from \"@clerk/backend\"`.',\n    );\n\n    return this.request<string>({\n      path: 'internal/interstitial',\n      method: 'GET',\n      headerParams: {\n        'Content-Type': 'text/html',\n      },\n    });\n  }\n}\n","import { joinPaths } from '../../util/path';\nimport type { Invitation } from '../resources/Invitation';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/invitations';\n\ntype CreateParams = {\n  emailAddress: string;\n  redirectUrl?: string;\n  publicMetadata?: UserPublicMetadata;\n  notify?: boolean;\n  ignoreExisting?: boolean;\n};\n\ntype GetInvitationListParams = {\n  /**\n   * Filters invitations based on their status(accepted, pending, revoked).\n   *\n   * @example\n   * get all revoked invitations\n   *\n   * import Clerk from '@clerk/backend';\n   * const clerkClient = Clerk(...)\n   * await clerkClient.invitations.getInvitationList({ status: 'revoked })\n   *\n   */\n  status?: 'accepted' | 'pending' | 'revoked';\n};\n\nexport class InvitationAPI extends AbstractAPI {\n  public async getInvitationList(params: GetInvitationListParams = {}) {\n    return this.request<Invitation[]>({\n      method: 'GET',\n      path: basePath,\n      queryParams: params,\n    });\n  }\n\n  public async createInvitation(params: CreateParams) {\n    return this.request<Invitation>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async revokeInvitation(invitationId: string) {\n    this.requireId(invitationId);\n    return this.request<Invitation>({\n      method: 'POST',\n      path: joinPaths(basePath, invitationId, 'revoke'),\n    });\n  }\n}\n","import { deprecated } from '@clerk/shared/deprecated';\n\nimport runtime from '../../runtime';\nimport { joinPaths } from '../../util/path';\nimport type {\n  Organization,\n  OrganizationInvitation,\n  OrganizationInvitationStatus,\n  OrganizationMembership,\n} from '../resources';\nimport type { OrganizationMembershipRole } from '../resources/Enums';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/organizations';\n\ntype MetadataParams<TPublic = OrganizationPublicMetadata, TPrivate = OrganizationPrivateMetadata> = {\n  publicMetadata?: TPublic;\n  privateMetadata?: TPrivate;\n};\n\ntype GetOrganizationListParams = {\n  limit?: number;\n  offset?: number;\n  includeMembersCount?: boolean;\n  query?: string;\n};\n\ntype CreateParams = {\n  name: string;\n  slug?: string;\n  /* The User id for the user creating the organization. The user will become an administrator for the organization. */\n  createdBy: string;\n  maxAllowedMemberships?: number;\n} & MetadataParams;\n\ntype GetOrganizationParams = { organizationId: string } | { slug: string };\n\ntype UpdateParams = {\n  name?: string;\n  slug?: string;\n  maxAllowedMemberships?: number;\n} & MetadataParams;\n\ntype UpdateLogoParams = {\n  file: Blob | File;\n  uploaderUserId: string;\n};\n\ntype UpdateMetadataParams = MetadataParams;\n\ntype GetOrganizationMembershipListParams = {\n  organizationId: string;\n  limit?: number;\n  offset?: number;\n};\n\ntype CreateOrganizationMembershipParams = {\n  organizationId: string;\n  userId: string;\n  role: OrganizationMembershipRole;\n};\n\ntype UpdateOrganizationMembershipParams = CreateOrganizationMembershipParams;\n\ntype UpdateOrganizationMembershipMetadataParams = {\n  organizationId: string;\n  userId: string;\n} & MetadataParams<OrganizationMembershipPublicMetadata>;\n\ntype DeleteOrganizationMembershipParams = {\n  organizationId: string;\n  userId: string;\n};\n\ntype CreateOrganizationInvitationParams = {\n  organizationId: string;\n  inviterUserId: string;\n  emailAddress: string;\n  role: OrganizationMembershipRole;\n  redirectUrl?: string;\n  publicMetadata?: OrganizationInvitationPublicMetadata;\n};\n\ntype GetOrganizationInvitationListParams = {\n  organizationId: string;\n  status?: OrganizationInvitationStatus[];\n  limit?: number;\n  offset?: number;\n};\n\ntype GetPendingOrganizationInvitationListParams = {\n  organizationId: string;\n  limit?: number;\n  offset?: number;\n};\n\ntype GetOrganizationInvitationParams = {\n  organizationId: string;\n  invitationId: string;\n};\n\ntype RevokeOrganizationInvitationParams = {\n  organizationId: string;\n  invitationId: string;\n  requestingUserId: string;\n};\n\nexport class OrganizationAPI extends AbstractAPI {\n  public async getOrganizationList(params?: GetOrganizationListParams) {\n    return this.request<Organization[]>({\n      method: 'GET',\n      path: basePath,\n      queryParams: params,\n    });\n  }\n\n  public async createOrganization(params: CreateParams) {\n    return this.request<Organization>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async getOrganization(params: GetOrganizationParams) {\n    const organizationIdOrSlug = 'organizationId' in params ? params.organizationId : params.slug;\n    this.requireId(organizationIdOrSlug);\n\n    return this.request<Organization>({\n      method: 'GET',\n      path: joinPaths(basePath, organizationIdOrSlug),\n    });\n  }\n\n  public async updateOrganization(organizationId: string, params: UpdateParams) {\n    this.requireId(organizationId);\n    return this.request<Organization>({\n      method: 'PATCH',\n      path: joinPaths(basePath, organizationId),\n      bodyParams: params,\n    });\n  }\n\n  public async updateOrganizationLogo(organizationId: string, params: UpdateLogoParams) {\n    this.requireId(organizationId);\n\n    const formData = new runtime.FormData();\n    formData.append('file', params?.file);\n    formData.append('uploader_user_id', params?.uploaderUserId);\n\n    return this.request<Organization>({\n      method: 'PUT',\n      path: joinPaths(basePath, organizationId, 'logo'),\n      formData,\n    });\n  }\n\n  public async deleteOrganizationLogo(organizationId: string) {\n    this.requireId(organizationId);\n\n    return this.request<Organization>({\n      method: 'DELETE',\n      path: joinPaths(basePath, organizationId, 'logo'),\n    });\n  }\n\n  public async updateOrganizationMetadata(organizationId: string, params: UpdateMetadataParams) {\n    this.requireId(organizationId);\n\n    return this.request<Organization>({\n      method: 'PATCH',\n      path: joinPaths(basePath, organizationId, 'metadata'),\n      bodyParams: params,\n    });\n  }\n\n  public async deleteOrganization(organizationId: string) {\n    return this.request<Organization>({\n      method: 'DELETE',\n      path: joinPaths(basePath, organizationId),\n    });\n  }\n\n  public async getOrganizationMembershipList(params: GetOrganizationMembershipListParams) {\n    const { organizationId, limit, offset } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationMembership[]>({\n      method: 'GET',\n      path: joinPaths(basePath, organizationId, 'memberships'),\n      queryParams: { limit, offset },\n    });\n  }\n\n  public async createOrganizationMembership(params: CreateOrganizationMembershipParams) {\n    const { organizationId, userId, role } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationMembership>({\n      method: 'POST',\n      path: joinPaths(basePath, organizationId, 'memberships'),\n      bodyParams: {\n        userId,\n        role,\n      },\n    });\n  }\n\n  public async updateOrganizationMembership(params: UpdateOrganizationMembershipParams) {\n    const { organizationId, userId, role } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationMembership>({\n      method: 'PATCH',\n      path: joinPaths(basePath, organizationId, 'memberships', userId),\n      bodyParams: {\n        role,\n      },\n    });\n  }\n\n  public async updateOrganizationMembershipMetadata(params: UpdateOrganizationMembershipMetadataParams) {\n    const { organizationId, userId, publicMetadata, privateMetadata } = params;\n\n    return this.request<OrganizationMembership>({\n      method: 'PATCH',\n      path: joinPaths(basePath, organizationId, 'memberships', userId, 'metadata'),\n      bodyParams: {\n        publicMetadata,\n        privateMetadata,\n      },\n    });\n  }\n\n  public async deleteOrganizationMembership(params: DeleteOrganizationMembershipParams) {\n    const { organizationId, userId } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationMembership>({\n      method: 'DELETE',\n      path: joinPaths(basePath, organizationId, 'memberships', userId),\n    });\n  }\n\n  public async getOrganizationInvitationList(params: GetOrganizationInvitationListParams) {\n    const { organizationId, status, limit, offset } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationInvitation[]>({\n      method: 'GET',\n      path: joinPaths(basePath, organizationId, 'invitations'),\n      queryParams: { status, limit, offset },\n    });\n  }\n\n  /**\n   * @deprecated  Use `getOrganizationInvitationList` instead along with the status parameter.\n   */\n  public async getPendingOrganizationInvitationList(params: GetPendingOrganizationInvitationListParams) {\n    deprecated('getPendingOrganizationInvitationList', 'Use `getOrganizationInvitationList` instead.');\n\n    const { organizationId, limit, offset } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationInvitation[]>({\n      method: 'GET',\n      path: joinPaths(basePath, organizationId, 'invitations', 'pending'),\n      queryParams: { limit, offset },\n    });\n  }\n\n  public async createOrganizationInvitation(params: CreateOrganizationInvitationParams) {\n    const { organizationId, ...bodyParams } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationInvitation>({\n      method: 'POST',\n      path: joinPaths(basePath, organizationId, 'invitations'),\n      bodyParams: { ...bodyParams },\n    });\n  }\n\n  public async getOrganizationInvitation(params: GetOrganizationInvitationParams) {\n    const { organizationId, invitationId } = params;\n    this.requireId(organizationId);\n    this.requireId(invitationId);\n\n    return this.request<OrganizationInvitation>({\n      method: 'GET',\n      path: joinPaths(basePath, organizationId, 'invitations', invitationId),\n    });\n  }\n\n  public async revokeOrganizationInvitation(params: RevokeOrganizationInvitationParams) {\n    const { organizationId, invitationId, requestingUserId } = params;\n    this.requireId(organizationId);\n\n    return this.request<OrganizationInvitation>({\n      method: 'POST',\n      path: joinPaths(basePath, organizationId, 'invitations', invitationId, 'revoke'),\n      bodyParams: {\n        requestingUserId,\n      },\n    });\n  }\n}\n","/**\n * This file exports APIs that vary across runtimes (i.e. Node & Browser - V8 isolates)\n * as a singleton object.\n *\n * Runtime polyfills are written in VanillaJS for now to avoid TS complication. Moreover,\n * due to this issue https://github.com/microsoft/TypeScript/issues/44848, there is not a good way\n * to tell Typescript which conditional import to use during build type.\n *\n * The Runtime type definition ensures type safety for now.\n * Runtime js modules are copied into dist folder with bash script.\n *\n * TODO: Support TS runtime modules\n */\n\n// @ts-ignore - These are package subpaths\nimport crypto from '#crypto';\n// @ts-ignore - These are package subpaths\nimport * as fetchApisPolyfill from '#fetch';\n\nconst {\n  RuntimeFetch,\n  RuntimeAbortController,\n  RuntimeBlob,\n  RuntimeFormData,\n  RuntimeHeaders,\n  RuntimeRequest,\n  RuntimeResponse,\n} = fetchApisPolyfill;\n\ntype Runtime = {\n  crypto: Crypto;\n  fetch: typeof global.fetch;\n  AbortController: typeof global.AbortController;\n  Blob: typeof global.Blob;\n  FormData: typeof global.FormData;\n  Headers: typeof global.Headers;\n  Request: typeof global.Request;\n  Response: typeof global.Response;\n};\n\n// Invoking the global.fetch without binding it first to the globalObject fails in\n// Cloudflare Workers with an \"Illegal Invocation\" error.\n//\n// The globalThis object is supported for Node >= 12.0.\n//\n// https://github.com/supabase/supabase/issues/4417\nconst globalFetch = RuntimeFetch.bind(globalThis);\n// DO NOT CHANGE: Runtime needs to be imported as a default export so that we can stub its dependencies with Sinon.js\n// For more information refer to https://sinonjs.org/how-to/stub-dependency/\nconst runtime: Runtime = {\n  crypto,\n  fetch: globalFetch,\n  AbortController: RuntimeAbortController,\n  Blob: RuntimeBlob,\n  FormData: RuntimeFormData,\n  Headers: RuntimeHeaders,\n  Request: RuntimeRequest,\n  Response: RuntimeResponse,\n};\n\nexport default runtime;\n","import { joinPaths } from '../../util/path';\nimport type { DeletedObject, PhoneNumber } from '../resources';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/phone_numbers';\n\ntype CreatePhoneNumberParams = {\n  userId: string;\n  phoneNumber: string;\n  verified?: boolean;\n  primary?: boolean;\n};\n\ntype UpdatePhoneNumberParams = {\n  verified?: boolean;\n  primary?: boolean;\n};\n\nexport class PhoneNumberAPI extends AbstractAPI {\n  public async getPhoneNumber(phoneNumberId: string) {\n    this.requireId(phoneNumberId);\n\n    return this.request<PhoneNumber>({\n      method: 'GET',\n      path: joinPaths(basePath, phoneNumberId),\n    });\n  }\n\n  public async createPhoneNumber(params: CreatePhoneNumberParams) {\n    return this.request<PhoneNumber>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async updatePhoneNumber(phoneNumberId: string, params: UpdatePhoneNumberParams = {}) {\n    this.requireId(phoneNumberId);\n\n    return this.request<PhoneNumber>({\n      method: 'PATCH',\n      path: joinPaths(basePath, phoneNumberId),\n      bodyParams: params,\n    });\n  }\n\n  public async deletePhoneNumber(phoneNumberId: string) {\n    this.requireId(phoneNumberId);\n\n    return this.request<DeletedObject>({\n      method: 'DELETE',\n      path: joinPaths(basePath, phoneNumberId),\n    });\n  }\n}\n","import { joinPaths } from '../../util/path';\nimport type { RedirectUrl } from '../resources/RedirectUrl';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/redirect_urls';\n\ntype CreateRedirectUrlParams = {\n  url: string;\n};\n\nexport class RedirectUrlAPI extends AbstractAPI {\n  public async getRedirectUrlList() {\n    return this.request<RedirectUrl[]>({\n      method: 'GET',\n      path: basePath,\n    });\n  }\n\n  public async getRedirectUrl(redirectUrlId: string) {\n    this.requireId(redirectUrlId);\n    return this.request<RedirectUrl>({\n      method: 'GET',\n      path: joinPaths(basePath, redirectUrlId),\n    });\n  }\n\n  public async createRedirectUrl(params: CreateRedirectUrlParams) {\n    return this.request<RedirectUrl>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async deleteRedirectUrl(redirectUrlId: string) {\n    this.requireId(redirectUrlId);\n    return this.request<RedirectUrl>({\n      method: 'DELETE',\n      path: joinPaths(basePath, redirectUrlId),\n    });\n  }\n}\n","import type { SessionStatus } from '@clerk/types';\n\nimport { joinPaths } from '../../util/path';\nimport type { Session } from '../resources/Session';\nimport type { Token } from '../resources/Token';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/sessions';\n\ntype QueryParams = {\n  clientId?: string;\n  userId?: string;\n  status?: SessionStatus;\n};\n\nexport class SessionAPI extends AbstractAPI {\n  public async getSessionList(queryParams?: QueryParams) {\n    return this.request<Session[]>({\n      method: 'GET',\n      path: basePath,\n      queryParams: queryParams,\n    });\n  }\n\n  public async getSession(sessionId: string) {\n    this.requireId(sessionId);\n    return this.request<Session>({\n      method: 'GET',\n      path: joinPaths(basePath, sessionId),\n    });\n  }\n\n  public async revokeSession(sessionId: string) {\n    this.requireId(sessionId);\n    return this.request<Session>({\n      method: 'POST',\n      path: joinPaths(basePath, sessionId, 'revoke'),\n    });\n  }\n\n  public async verifySession(sessionId: string, token: string) {\n    this.requireId(sessionId);\n    return this.request<Session>({\n      method: 'POST',\n      path: joinPaths(basePath, sessionId, 'verify'),\n      bodyParams: { token },\n    });\n  }\n\n  public async getToken(sessionId: string, template: string) {\n    this.requireId(sessionId);\n    return (\n      (await this.request<Token>({\n        method: 'POST',\n        path: joinPaths(basePath, sessionId, 'tokens', template || ''),\n      })) as any\n    ).jwt;\n  }\n}\n","import { joinPaths } from '../../util/path';\nimport type { SignInToken } from '../resources/SignInTokens';\nimport { AbstractAPI } from './AbstractApi';\n\ntype CreateSignInTokensParams = {\n  userId: string;\n  expiresInSeconds: number;\n};\n\nconst basePath = '/sign_in_tokens';\n\nexport class SignInTokenAPI extends AbstractAPI {\n  public async createSignInToken(params: CreateSignInTokensParams) {\n    return this.request<SignInToken>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async revokeSignInToken(signInTokenId: string) {\n    this.requireId(signInTokenId);\n    return this.request<SignInToken>({\n      method: 'POST',\n      path: joinPaths(basePath, signInTokenId, 'revoke'),\n    });\n  }\n}\n","import { deprecated } from '@clerk/shared/deprecated';\n\nimport type { SMSMessage } from '../resources/SMSMessage';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/sms_messages';\n\ntype SMSParams = {\n  phoneNumberId: string;\n  message: string;\n};\n\n/**\n * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n */\nexport class SMSMessageAPI extends AbstractAPI {\n  /**\n   * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n   */\n  public async createSMSMessage(params: SMSParams) {\n    deprecated(\n      'SMSMessageAPI.createSMSMessage',\n      'This endpoint is no longer available and the function will be removed in the next major version.',\n    );\n    return this.request<SMSMessage>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n}\n","import type { OAuthProvider } from '@clerk/types';\n\nimport runtime from '../../runtime';\nimport { joinPaths } from '../../util/path';\nimport type { OauthAccessToken, OrganizationMembership, User } from '../resources';\nimport { AbstractAPI } from './AbstractApi';\n\nconst basePath = '/users';\n\ntype UserCountParams = {\n  emailAddress?: string[];\n  phoneNumber?: string[];\n  username?: string[];\n  web3Wallet?: string[];\n  query?: string;\n  userId?: string[];\n  externalId?: string[];\n};\n\ntype UserListParams = UserCountParams & {\n  limit?: number;\n  offset?: number;\n  orderBy?: 'created_at' | 'updated_at' | '+created_at' | '+updated_at' | '-created_at' | '-updated_at';\n};\n\ntype UserMetadataParams = {\n  publicMetadata?: UserPublicMetadata;\n  privateMetadata?: UserPrivateMetadata;\n  unsafeMetadata?: UserUnsafeMetadata;\n};\n\ntype PasswordHasher =\n  | 'argon2i'\n  | 'argon2id'\n  | 'bcrypt'\n  | 'md5'\n  | 'pbkdf2_sha256'\n  | 'pbkdf2_sha256_django'\n  | 'pbkdf2_sha1'\n  | 'scrypt_firebase';\n\ntype UserPasswordHashingParams = {\n  passwordDigest: string;\n  passwordHasher: PasswordHasher;\n};\n\ntype CreateUserParams = {\n  externalId?: string;\n  emailAddress?: string[];\n  phoneNumber?: string[];\n  username?: string;\n  password?: string;\n  firstName?: string;\n  lastName?: string;\n  skipPasswordChecks?: boolean;\n  skipPasswordRequirement?: boolean;\n  totpSecret?: string;\n  backupCodes?: string[];\n  createdAt?: Date;\n} & UserMetadataParams &\n  (UserPasswordHashingParams | object);\n\ntype UpdateUserParams = {\n  firstName?: string;\n  lastName?: string;\n  username?: string;\n  password?: string;\n  skipPasswordChecks?: boolean;\n  signOutOfOtherSessions?: boolean;\n  primaryEmailAddressID?: string;\n  primaryPhoneNumberID?: string;\n  primaryWeb3WalletID?: string;\n  profileImageID?: string;\n  totpSecret?: string;\n  backupCodes?: string[];\n  externalId?: string;\n  createdAt?: Date;\n  createOrganizationEnabled?: boolean;\n} & UserMetadataParams &\n  (UserPasswordHashingParams | object);\n\ntype GetOrganizationMembershipListParams = {\n  userId: string;\n  limit?: number;\n  offset?: number;\n};\n\ntype VerifyPasswordParams = {\n  userId: string;\n  password: string;\n};\n\ntype VerifyTOTPParams = {\n  userId: string;\n  code: string;\n};\n\nexport class UserAPI extends AbstractAPI {\n  public async getUserList(params: UserListParams = {}) {\n    return this.request<User[]>({\n      method: 'GET',\n      path: basePath,\n      queryParams: params,\n    });\n  }\n\n  public async getUser(userId: string) {\n    this.requireId(userId);\n    return this.request<User>({\n      method: 'GET',\n      path: joinPaths(basePath, userId),\n    });\n  }\n\n  public async createUser(params: CreateUserParams) {\n    return this.request<User>({\n      method: 'POST',\n      path: basePath,\n      bodyParams: params,\n    });\n  }\n\n  public async updateUser(userId: string, params: UpdateUserParams = {}) {\n    this.requireId(userId);\n\n    return this.request<User>({\n      method: 'PATCH',\n      path: joinPaths(basePath, userId),\n      bodyParams: params,\n    });\n  }\n\n  public async updateUserProfileImage(userId: string, params: { file: Blob | File }) {\n    this.requireId(userId);\n\n    const formData = new runtime.FormData();\n    formData.append('file', params?.file);\n\n    return this.request<User>({\n      method: 'POST',\n      path: joinPaths(basePath, userId, 'profile_image'),\n      formData,\n    });\n  }\n\n  public async updateUserMetadata(userId: string, params: UserMetadataParams) {\n    this.requireId(userId);\n\n    return this.request<User>({\n      method: 'PATCH',\n      path: joinPaths(basePath, userId, 'metadata'),\n      bodyParams: params,\n    });\n  }\n\n  public async deleteUser(userId: string) {\n    this.requireId(userId);\n    return this.request<User>({\n      method: 'DELETE',\n      path: joinPaths(basePath, userId),\n    });\n  }\n\n  public async getCount(params: UserListParams = {}) {\n    return this.request<number>({\n      method: 'GET',\n      path: joinPaths(basePath, 'count'),\n      queryParams: params,\n    });\n  }\n\n  public async getUserOauthAccessToken(userId: string, provider: `oauth_${OAuthProvider}`) {\n    this.requireId(userId);\n    return this.request<OauthAccessToken[]>({\n      method: 'GET',\n      path: joinPaths(basePath, userId, 'oauth_access_tokens', provider),\n    });\n  }\n\n  public async disableUserMFA(userId: string) {\n    this.requireId(userId);\n    return this.request<User>({\n      method: 'DELETE',\n      path: joinPaths(basePath, userId, 'mfa'),\n    });\n  }\n\n  public async getOrganizationMembershipList(params: GetOrganizationMembershipListParams) {\n    const { userId, limit, offset } = params;\n    this.requireId(userId);\n\n    return this.request<OrganizationMembership[]>({\n      method: 'GET',\n      path: joinPaths(basePath, userId, 'organization_memberships'),\n      queryParams: { limit, offset },\n    });\n  }\n\n  public async verifyPassword(params: VerifyPasswordParams) {\n    const { userId, password } = params;\n    this.requireId(userId);\n\n    return this.request<{ verified: true }>({\n      method: 'POST',\n      path: joinPaths(basePath, userId, 'verify_password'),\n      bodyParams: { password },\n    });\n  }\n\n  public async verifyTOTP(params: VerifyTOTPParams) {\n    const { userId, code } = params;\n    this.requireId(userId);\n\n    return this.request<{ verified: true; code_type: 'totp' }>({\n      method: 'POST',\n      path: joinPaths(basePath, userId, 'verify_totp'),\n      bodyParams: { code },\n    });\n  }\n}\n","import { ClerkAPIResponseError } from '@clerk/shared/error';\nimport type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\nimport deepmerge from 'deepmerge';\nimport snakecaseKeys from 'snakecase-keys';\n\nimport { API_URL, API_VERSION, constants, USER_AGENT } from '../constants';\n// DO NOT CHANGE: Runtime needs to be imported as a default export so that we can stub its dependencies with Sinon.js\n// For more information refer to https://sinonjs.org/how-to/stub-dependency/\nimport runtime from '../runtime';\nimport { assertValidSecretKey } from '../util/assertValidSecretKey';\nimport { joinPaths } from '../util/path';\nimport { deprecated } from '../util/shared';\nimport type { CreateBackendApiOptions } from './factory';\nimport { deserialize } from './resources/Deserializer';\n\nexport type ClerkBackendApiRequestOptions = {\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE' | 'PUT';\n  queryParams?: Record<string, unknown>;\n  headerParams?: Record<string, string>;\n  bodyParams?: object;\n  formData?: FormData;\n} & (\n  | {\n      url: string;\n      path?: string;\n    }\n  | {\n      url?: string;\n      path: string;\n    }\n);\n\nexport type ClerkBackendApiResponse<T> =\n  | {\n      data: T;\n      errors: null;\n    }\n  | {\n      data: null;\n      errors: ClerkAPIError[];\n      clerkTraceId?: string;\n    };\n\nexport type RequestFunction = ReturnType<typeof buildRequest>;\ntype LegacyRequestFunction = <T>(requestOptions: ClerkBackendApiRequestOptions) => Promise<T>;\n\n/**\n * Switching to the { data, errors } format is a breaking change, so we will skip it for now\n * until we release v5 of the related SDKs.\n * This HOF wraps the request helper and transforms the new return to the legacy return.\n * TODO: Simply remove this wrapper and the ClerkAPIResponseError before the v5 release.\n */\nconst withLegacyReturn =\n  (cb: (...args: any) => Promise<ClerkBackendApiResponse<any>>): LegacyRequestFunction =>\n  async (...args) => {\n    const response = await cb(...args);\n    if (response.errors === null) {\n      return response.data;\n    } else {\n      const { errors, clerkTraceId } = response;\n      // TODO: To be removed with withLegacyReturn\n      const { status, statusText } = response as any;\n      const error = new ClerkAPIResponseError(statusText || '', {\n        data: [],\n        status: status || '',\n        clerkTraceId,\n      });\n      error.errors = errors;\n      throw error;\n    }\n  };\n\nexport function buildRequest(options: CreateBackendApiOptions) {\n  const request = async <T>(requestOptions: ClerkBackendApiRequestOptions): Promise<ClerkBackendApiResponse<T>> => {\n    const {\n      apiKey,\n      secretKey,\n      httpOptions,\n      apiUrl = API_URL,\n      apiVersion = API_VERSION,\n      userAgent = USER_AGENT,\n    } = options;\n    if (apiKey) {\n      deprecated('apiKey', 'Use `secretKey` instead.');\n    }\n    if (httpOptions) {\n      deprecated(\n        'httpOptions',\n        'This option has been deprecated and will be removed with the next major release.\\nA RequestInit init object used by the `request` method.',\n      );\n    }\n\n    const { path, method, queryParams, headerParams, bodyParams, formData } = requestOptions;\n    const key = secretKey || apiKey;\n\n    assertValidSecretKey(key);\n\n    const url = joinPaths(apiUrl, apiVersion, path);\n\n    // Build final URL with search parameters\n    const finalUrl = new URL(url);\n\n    if (queryParams) {\n      // Snakecase query parameters\n      const snakecasedQueryParams = snakecaseKeys({ ...queryParams });\n\n      // Support array values for queryParams such as { foo: [42, 43] }\n      for (const [key, val] of Object.entries(snakecasedQueryParams)) {\n        if (val) {\n          [val].flat().forEach(v => finalUrl.searchParams.append(key, v as string));\n        }\n      }\n    }\n\n    // Build headers\n    const headers: Record<string, any> = {\n      Authorization: `Bearer ${key}`,\n      'User-Agent': userAgent,\n      ...headerParams,\n    };\n\n    let res: Response | undefined = undefined;\n    try {\n      if (formData) {\n        res = await runtime.fetch(finalUrl.href, {\n          ...httpOptions,\n          method,\n          headers,\n          body: formData,\n        });\n      } else {\n        // Enforce application/json for all non form-data requests\n        headers['Content-Type'] = 'application/json';\n        // Build body\n        const hasBody = method !== 'GET' && bodyParams && Object.keys(bodyParams).length > 0;\n        const body = hasBody ? { body: JSON.stringify(snakecaseKeys(bodyParams, { deep: false })) } : null;\n\n        res = await runtime.fetch(\n          finalUrl.href,\n          deepmerge(httpOptions || {}, {\n            method,\n            headers,\n            ...body,\n          }),\n        );\n      }\n\n      // TODO: Parse JSON or Text response based on a response header\n      const isJSONResponse =\n        res?.headers && res.headers?.get(constants.Headers.ContentType) === constants.ContentTypes.Json;\n      const data = await (isJSONResponse ? res.json() : res.text());\n\n      if (!res.ok) {\n        throw data;\n      }\n\n      return {\n        data: deserialize(data),\n        errors: null,\n      };\n    } catch (err) {\n      if (err instanceof Error) {\n        return {\n          data: null,\n          errors: [\n            {\n              code: 'unexpected_error',\n              message: err.message || 'Unexpected error',\n            },\n          ],\n          clerkTraceId: getTraceId(err, res?.headers),\n        };\n      }\n\n      return {\n        data: null,\n        errors: parseErrors(err),\n        // TODO: To be removed with withLegacyReturn\n        // @ts-expect-error\n        status: res?.status,\n        statusText: res?.statusText,\n        clerkTraceId: getTraceId(err, res?.headers),\n      };\n    }\n  };\n\n  return withLegacyReturn(request);\n}\n\n// Returns either clerk_trace_id if present in response json, otherwise defaults to CF-Ray header\n// If the request failed before receiving a response, returns undefined\nfunction getTraceId(data: unknown, headers?: Headers): string {\n  if (data && typeof data === 'object' && 'clerk_trace_id' in data && typeof data.clerk_trace_id === 'string') {\n    return data.clerk_trace_id;\n  }\n\n  const cfRay = headers?.get('cf-ray');\n  return cfRay || '';\n}\n\nfunction parseErrors(data: unknown): ClerkAPIError[] {\n  if (!!data && typeof data === 'object' && 'errors' in data) {\n    const errors = data.errors as ClerkAPIErrorJSON[];\n    return errors.length > 0 ? errors.map(parseError) : [];\n  }\n  return [];\n}\n\nfunction parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n    },\n  };\n}\n","export const API_URL = 'https://api.clerk.dev';\nexport const API_VERSION = 'v1';\n\nexport const USER_AGENT = `${PACKAGE_NAME}@${PACKAGE_VERSION}`;\nexport const MAX_CACHE_LAST_UPDATED_AT_SECONDS = 5 * 60;\n\nconst Attributes = {\n  AuthToken: '__clerkAuthToken',\n  AuthStatus: '__clerkAuthStatus',\n  AuthReason: '__clerkAuthReason',\n  AuthMessage: '__clerkAuthMessage',\n} as const;\n\nconst Cookies = {\n  Session: '__session',\n  ClientUat: '__client_uat',\n} as const;\n\nconst Headers = {\n  AuthToken: 'x-clerk-auth-token',\n  AuthStatus: 'x-clerk-auth-status',\n  AuthReason: 'x-clerk-auth-reason',\n  AuthMessage: 'x-clerk-auth-message',\n  EnableDebug: 'x-clerk-debug',\n  ClerkRedirectTo: 'x-clerk-redirect-to',\n  CloudFrontForwardedProto: 'cloudfront-forwarded-proto',\n  Authorization: 'authorization',\n  ForwardedPort: 'x-forwarded-port',\n  ForwardedProto: 'x-forwarded-proto',\n  ForwardedHost: 'x-forwarded-host',\n  Referrer: 'referer',\n  UserAgent: 'user-agent',\n  Origin: 'origin',\n  Host: 'host',\n  ContentType: 'content-type',\n} as const;\n\nconst SearchParams = {\n  AuthStatus: Headers.AuthStatus,\n  AuthToken: Headers.AuthToken,\n} as const;\n\nconst ContentTypes = {\n  Json: 'application/json',\n} as const;\n\nexport const constants = {\n  Attributes,\n  Cookies,\n  Headers,\n  SearchParams,\n  ContentTypes,\n} as const;\n","export function assertValidSecretKey(val: unknown): asserts val is string {\n  if (!val || typeof val !== 'string') {\n    throw Error(\n      'Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.',\n    );\n  }\n\n  //TODO: Check if the key is invalid and throw error\n}\n","import type { AllowlistIdentifierJSON } from './JSON';\n\nexport class AllowlistIdentifier {\n  constructor(\n    readonly id: string,\n    readonly identifier: string,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n    readonly invitationId?: string,\n  ) {}\n\n  static fromJSON(data: AllowlistIdentifierJSON): AllowlistIdentifier {\n    return new AllowlistIdentifier(data.id, data.identifier, data.created_at, data.updated_at, data.invitation_id);\n  }\n}\n","import type { SessionJSON } from './JSON';\n\nexport class Session {\n  constructor(\n    readonly id: string,\n    readonly clientId: string,\n    readonly userId: string,\n    readonly status: string,\n    readonly lastActiveAt: number,\n    readonly expireAt: number,\n    readonly abandonAt: number,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n  ) {}\n\n  static fromJSON(data: SessionJSON): Session {\n    return new Session(\n      data.id,\n      data.client_id,\n      data.user_id,\n      data.status,\n      data.last_active_at,\n      data.expire_at,\n      data.abandon_at,\n      data.created_at,\n      data.updated_at,\n    );\n  }\n}\n","import type { ClientJSON } from './JSON';\nimport { Session } from './Session';\n\nexport class Client {\n  constructor(\n    readonly id: string,\n    readonly sessionIds: string[],\n    readonly sessions: Session[],\n    readonly signInId: string | null,\n    readonly signUpId: string | null,\n    readonly lastActiveSessionId: string | null,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n  ) {}\n\n  static fromJSON(data: ClientJSON): Client {\n    return new Client(\n      data.id,\n      data.session_ids,\n      data.sessions.map(x => Session.fromJSON(x)),\n      data.sign_in_id,\n      data.sign_up_id,\n      data.last_active_session_id,\n      data.created_at,\n      data.updated_at,\n    );\n  }\n}\n","import type { DeletedObjectJSON } from './JSON';\n\nexport class DeletedObject {\n  constructor(\n    readonly object: string,\n    readonly id: string | null,\n    readonly slug: string | null,\n    readonly deleted: boolean,\n  ) {}\n\n  static fromJSON(data: DeletedObjectJSON) {\n    return new DeletedObject(data.object, data.id || null, data.slug || null, data.deleted);\n  }\n}\n","import type { EmailJSON } from './JSON';\n\nexport class Email {\n  constructor(\n    readonly id: string,\n    readonly fromEmailName: string,\n    readonly emailAddressId: string | null,\n    readonly toEmailAddress?: string,\n    readonly subject?: string,\n    readonly body?: string,\n    readonly bodyPlain?: string | null,\n    readonly status?: string,\n    readonly slug?: string | null,\n    readonly data?: Record<string, any> | null,\n    readonly deliveredByClerk?: boolean,\n  ) {}\n\n  static fromJSON(data: EmailJSON): Email {\n    return new Email(\n      data.id,\n      data.from_email_name,\n      data.email_address_id,\n      data.to_email_address,\n      data.subject,\n      data.body,\n      data.body_plain,\n      data.status,\n      data.slug,\n      data.data,\n      data.delivered_by_clerk,\n    );\n  }\n}\n","import type { IdentificationLinkJSON } from './JSON';\n\nexport class IdentificationLink {\n  constructor(readonly id: string, readonly type: string) {}\n\n  static fromJSON(data: IdentificationLinkJSON): IdentificationLink {\n    return new IdentificationLink(data.id, data.type);\n  }\n}\n","import type { VerificationJSON } from './JSON';\n\nexport class Verification {\n  constructor(\n    readonly status: string,\n    readonly strategy: string,\n    readonly externalVerificationRedirectURL: URL | null = null,\n    readonly attempts: number | null = null,\n    readonly expireAt: number | null = null,\n    readonly nonce: string | null = null,\n  ) {}\n\n  static fromJSON(data: VerificationJSON): Verification {\n    return new Verification(\n      data.status,\n      data.strategy,\n      data.external_verification_redirect_url ? new URL(data.external_verification_redirect_url) : null,\n      data.attempts,\n      data.expire_at,\n      data.nonce,\n    );\n  }\n}\n","import { IdentificationLink } from './IdentificationLink';\nimport type { EmailAddressJSON } from './JSON';\nimport { Verification } from './Verification';\n\nexport class EmailAddress {\n  constructor(\n    readonly id: string,\n    readonly emailAddress: string,\n    readonly verification: Verification | null,\n    readonly linkedTo: IdentificationLink[],\n  ) {}\n\n  static fromJSON(data: EmailAddressJSON): EmailAddress {\n    return new EmailAddress(\n      data.id,\n      data.email_address,\n      data.verification && Verification.fromJSON(data.verification),\n      data.linked_to.map(link => IdentificationLink.fromJSON(link)),\n    );\n  }\n}\n","import { deprecatedProperty } from '../../util/shared';\nimport type { ExternalAccountJSON } from './JSON';\nimport { Verification } from './Verification';\n\nexport class ExternalAccount {\n  constructor(\n    readonly id: string,\n    readonly provider: string,\n    readonly identificationId: string,\n    readonly externalId: string,\n    readonly approvedScopes: string,\n    readonly emailAddress: string,\n    readonly firstName: string,\n    readonly lastName: string,\n    /**\n     * @deprecated  Use `imageUrl` instead.\n     */\n    readonly picture: string,\n    readonly imageUrl: string,\n    readonly username: string | null,\n    readonly publicMetadata: Record<string, unknown> | null = {},\n    readonly label: string | null,\n    readonly verification: Verification | null,\n  ) {}\n\n  static fromJSON(data: ExternalAccountJSON): ExternalAccount {\n    return new ExternalAccount(\n      data.id,\n      data.provider,\n      data.identification_id,\n      data.provider_user_id,\n      data.approved_scopes,\n      data.email_address,\n      data.first_name,\n      data.last_name,\n      data.avatar_url,\n      data.image_url,\n      data.username,\n      data.public_metadata,\n      data.label,\n      data.verification && Verification.fromJSON(data.verification),\n    );\n  }\n}\n\ndeprecatedProperty(ExternalAccount, 'picture', 'Use `imageUrl` instead.');\n","import type { InvitationStatus } from './Enums';\nimport type { InvitationJSON } from './JSON';\n\nexport class Invitation {\n  constructor(\n    readonly id: string,\n    readonly emailAddress: string,\n    readonly publicMetadata: Record<string, unknown> | null,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n    readonly status: InvitationStatus,\n    readonly revoked?: boolean,\n  ) {}\n\n  static fromJSON(data: InvitationJSON): Invitation {\n    return new Invitation(\n      data.id,\n      data.email_address,\n      data.public_metadata,\n      data.created_at,\n      data.updated_at,\n      data.status,\n      data.revoked,\n    );\n  }\n}\n","import type {\n  InvitationStatus,\n  OrganizationInvitationStatus,\n  OrganizationMembershipRole,\n  SignInStatus,\n  SignUpAttributeRequirements,\n  SignUpStatus,\n} from './Enums';\n\nexport enum ObjectType {\n  AllowlistIdentifier = 'allowlist_identifier',\n  Client = 'client',\n  Email = 'email',\n  EmailAddress = 'email_address',\n  ExternalAccount = 'external_account',\n  FacebookAccount = 'facebook_account',\n  GoogleAccount = 'google_account',\n  Invitation = 'invitation',\n  OauthAccessToken = 'oauth_access_token',\n  Organization = 'organization',\n  OrganizationInvitation = 'organization_invitation',\n  OrganizationMembership = 'organization_membership',\n  PhoneNumber = 'phone_number',\n  RedirectUrl = 'redirect_url',\n  Session = 'session',\n  SignInAttempt = 'sign_in_attempt',\n  SignInToken = 'sign_in_token',\n  SignUpAttempt = 'sign_up_attempt',\n  SmsMessage = 'sms_message',\n  User = 'user',\n  Web3Wallet = 'web3_wallet',\n  Token = 'token',\n  TotalCount = 'total_count',\n}\n\nexport interface ClerkResourceJSON {\n  object: ObjectType;\n  id: string;\n}\n\nexport interface TokenJSON {\n  object: ObjectType.Token;\n  jwt: string;\n}\n\nexport interface AllowlistIdentifierJSON extends ClerkResourceJSON {\n  object: ObjectType.AllowlistIdentifier;\n  identifier: string;\n  created_at: number;\n  updated_at: number;\n  invitation_id?: string;\n}\n\nexport interface ClientJSON extends ClerkResourceJSON {\n  object: ObjectType.Client;\n  session_ids: string[];\n  sessions: SessionJSON[];\n  sign_in_id: string | null;\n  sign_up_id: string | null;\n  last_active_session_id: string | null;\n  created_at: number;\n  updated_at: number;\n}\n\nexport interface EmailJSON extends ClerkResourceJSON {\n  object: ObjectType.Email;\n  from_email_name: string;\n  to_email_address?: string;\n  email_address_id: string | null;\n  subject?: string;\n  body?: string;\n  body_plain?: string | null;\n  status?: string;\n  slug?: string | null;\n  data?: Record<string, any> | null;\n  delivered_by_clerk?: boolean;\n}\n\nexport interface EmailAddressJSON extends ClerkResourceJSON {\n  object: ObjectType.EmailAddress;\n  email_address: string;\n  verification: VerificationJSON | null;\n  linked_to: IdentificationLinkJSON[];\n}\n\nexport interface ExternalAccountJSON extends ClerkResourceJSON {\n  object: ObjectType.ExternalAccount;\n  provider: string;\n  identification_id: string;\n  provider_user_id: string;\n  approved_scopes: string;\n  email_address: string;\n  first_name: string;\n  last_name: string;\n  /**\n   * @deprecated  Use `image_url` instead.\n   */\n  avatar_url: string;\n  image_url: string;\n  username: string | null;\n  public_metadata: Record<string, unknown> | null;\n  label: string | null;\n  verification: VerificationJSON | null;\n}\n\nexport interface IdentificationLinkJSON extends ClerkResourceJSON {\n  type: string;\n}\n\nexport interface InvitationJSON extends ClerkResourceJSON {\n  object: ObjectType.Invitation;\n  email_address: string;\n  public_metadata: Record<string, unknown> | null;\n  created_at: number;\n  updated_at: number;\n  status: InvitationStatus;\n  revoked?: boolean;\n}\n\nexport interface OauthAccessTokenJSON {\n  object: ObjectType.OauthAccessToken;\n  provider: string;\n  token: string;\n  public_metadata: Record<string, unknown>;\n  label: string;\n  // Only set in OAuth 2.0 tokens\n  scopes?: string[];\n  // Only set in OAuth 1.0 tokens\n  token_secret?: string;\n}\n\nexport interface OrganizationJSON extends ClerkResourceJSON {\n  object: ObjectType.Organization;\n  name: string;\n  slug: string | null;\n  /**\n   * @deprecated  Use `image_url` instead.\n   */\n  logo_url: string | null;\n  image_url: string;\n  has_image: boolean;\n  public_metadata: OrganizationPublicMetadata | null;\n  private_metadata?: OrganizationPrivateMetadata;\n  created_by: string;\n  created_at: number;\n  updated_at: number;\n  max_allowed_memberships: number;\n  admin_delete_enabled: boolean;\n  members_count?: number;\n}\n\nexport interface OrganizationInvitationJSON extends ClerkResourceJSON {\n  email_address: string;\n  organization_id: string;\n  public_metadata: OrganizationInvitationPublicMetadata;\n  private_metadata: OrganizationInvitationPrivateMetadata;\n  role: OrganizationMembershipRole;\n  status: OrganizationInvitationStatus;\n  created_at: number;\n  updated_at: number;\n}\n\nexport interface OrganizationMembershipJSON extends ClerkResourceJSON {\n  object: ObjectType.OrganizationMembership;\n  organization: OrganizationJSON;\n  public_metadata: OrganizationMembershipPublicMetadata;\n  private_metadata?: OrganizationMembershipPrivateMetadata;\n  public_user_data: OrganizationMembershipPublicUserDataJSON;\n  role: OrganizationMembershipRole;\n  created_at: number;\n  updated_at: number;\n}\n\nexport interface OrganizationMembershipPublicUserDataJSON {\n  identifier: string;\n  first_name: string | null;\n  last_name: string | null;\n  /**\n   * @deprecated  Use `image_url` instead.\n   */\n  profile_image_url: string;\n  image_url: string;\n  has_image: boolean;\n  user_id: string;\n}\n\nexport interface PhoneNumberJSON extends ClerkResourceJSON {\n  object: ObjectType.PhoneNumber;\n  phone_number: string;\n  reserved_for_second_factor: boolean;\n  default_second_factor: boolean;\n  linked_to: IdentificationLinkJSON[];\n  verification: VerificationJSON | null;\n}\n\nexport interface RedirectUrlJSON extends ClerkResourceJSON {\n  object: ObjectType.RedirectUrl;\n  url: string;\n  created_at: number;\n  updated_at: number;\n}\n\nexport interface SessionJSON extends ClerkResourceJSON {\n  object: ObjectType.Session;\n  client_id: string;\n  user_id: string;\n  status: string;\n  last_active_at: number;\n  expire_at: number;\n  abandon_at: number;\n  created_at: number;\n  updated_at: number;\n}\n\nexport interface SignInJSON extends ClerkResourceJSON {\n  object: ObjectType.SignInToken;\n  status: SignInStatus;\n  identifier: string;\n  created_session_id: string | null;\n}\n\nexport interface SignInTokenJSON extends ClerkResourceJSON {\n  user_id: string;\n  token: string;\n  status: 'pending' | 'accepted' | 'revoked';\n  url: string;\n  created_at: number;\n  updated_at: number;\n}\n\nexport interface SignUpJSON extends ClerkResourceJSON {\n  object: ObjectType.SignUpAttempt;\n  status: SignUpStatus;\n  attribute_requirements: SignUpAttributeRequirements;\n  username: string | null;\n  email_address: string | null;\n  phone_number: string | null;\n  web3_wallet: string | null;\n  web3_wallet_verification: VerificationJSON | null;\n  external_account: any;\n  has_password: boolean;\n  name_full: string | null;\n  created_session_id: string | null;\n  created_user_id: string | null;\n  abandon_at: number | null;\n}\n\nexport interface SMSMessageJSON extends ClerkResourceJSON {\n  object: ObjectType.SmsMessage;\n  from_phone_number: string;\n  to_phone_number: string;\n  phone_number_id: string | null;\n  message: string;\n  status: string;\n  data?: Record<string, any> | null;\n}\n\nexport interface UserJSON extends ClerkResourceJSON {\n  object: ObjectType.User;\n  username: string | null;\n  first_name: string;\n  last_name: string;\n  gender: string;\n  birthday: string;\n  /**\n   * @deprecated  Use `image_url` instead.\n   */\n  profile_image_url: string;\n  image_url: string;\n  has_image: boolean;\n  primary_email_address_id: string;\n  primary_phone_number_id: string | null;\n  primary_web3_wallet_id: string | null;\n  password_enabled: boolean;\n  totp_enabled: boolean;\n  backup_code_enabled: boolean;\n  two_factor_enabled: boolean;\n  banned: boolean;\n  email_addresses: EmailAddressJSON[];\n  phone_numbers: PhoneNumberJSON[];\n  web3_wallets: Web3WalletJSON[];\n  external_accounts: ExternalAccountJSON[];\n  external_id: string | null;\n  last_sign_in_at: number | null;\n  public_metadata: UserPublicMetadata;\n  private_metadata: UserPrivateMetadata;\n  unsafe_metadata: UserUnsafeMetadata;\n  created_at: number;\n  updated_at: number;\n  create_organization_enabled: boolean;\n}\n\nexport interface VerificationJSON extends ClerkResourceJSON {\n  attempts?: number | null;\n  expire_at: number | null;\n  external_verification_redirect_url?: string;\n  nonce?: string | null;\n  status: string;\n  strategy: string;\n  verified_at_client?: string;\n  // error?\n}\n\nexport interface Web3WalletJSON extends ClerkResourceJSON {\n  object: ObjectType.Web3Wallet;\n  web3_wallet: string;\n  verification: VerificationJSON | null;\n}\n\nexport interface DeletedObjectJSON {\n  object: string;\n  id?: string;\n  slug?: string;\n  deleted: boolean;\n}\n","import type { OauthAccessTokenJSON } from './JSON';\n\nexport class OauthAccessToken {\n  constructor(\n    readonly provider: string,\n    readonly token: string,\n    readonly publicMetadata: Record<string, unknown> = {},\n    readonly label: string,\n    readonly scopes?: string[],\n    readonly tokenSecret?: string,\n  ) {}\n\n  static fromJSON(data: OauthAccessTokenJSON) {\n    return new OauthAccessToken(\n      data.provider,\n      data.token,\n      data.public_metadata,\n      data.label,\n      data.scopes,\n      data.token_secret,\n    );\n  }\n}\n","import { deprecatedProperty } from '../../util/shared';\nimport type { OrganizationJSON } from './JSON';\n\nexport class Organization {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly slug: string | null,\n    /**\n     * @deprecated  Use `imageUrl` instead.\n     */\n    readonly logoUrl: string | null,\n    readonly imageUrl: string,\n    readonly hasImage: boolean,\n    readonly createdBy: string,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n    readonly publicMetadata: OrganizationPublicMetadata | null = {},\n    readonly privateMetadata: OrganizationPrivateMetadata = {},\n    readonly maxAllowedMemberships: number,\n    readonly adminDeleteEnabled: boolean,\n    readonly members_count?: number,\n  ) {}\n\n  static fromJSON(data: OrganizationJSON): Organization {\n    return new Organization(\n      data.id,\n      data.name,\n      data.slug,\n      data.logo_url,\n      data.image_url,\n      data.has_image,\n      data.created_by,\n      data.created_at,\n      data.updated_at,\n      data.public_metadata,\n      data.private_metadata,\n      data.max_allowed_memberships,\n      data.admin_delete_enabled,\n      data.members_count,\n    );\n  }\n}\n\ndeprecatedProperty(Organization, 'logoUrl', 'Use `imageUrl` instead.');\n","import type { OrganizationInvitationStatus, OrganizationMembershipRole } from './Enums';\nimport type { OrganizationInvitationJSON } from './JSON';\n\nexport class OrganizationInvitation {\n  constructor(\n    readonly id: string,\n    readonly emailAddress: string,\n    readonly role: OrganizationMembershipRole,\n    readonly organizationId: string,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n    readonly status?: OrganizationInvitationStatus,\n    readonly publicMetadata: OrganizationInvitationPublicMetadata = {},\n    readonly privateMetadata: OrganizationInvitationPrivateMetadata = {},\n  ) {}\n\n  static fromJSON(data: OrganizationInvitationJSON) {\n    return new OrganizationInvitation(\n      data.id,\n      data.email_address,\n      data.role,\n      data.organization_id,\n      data.created_at,\n      data.updated_at,\n      data.status,\n      data.public_metadata,\n      data.private_metadata,\n    );\n  }\n}\n","import { deprecatedProperty } from '../../util/shared';\nimport { Organization } from '../resources';\nimport type { OrganizationMembershipRole } from './Enums';\nimport type { OrganizationMembershipJSON, OrganizationMembershipPublicUserDataJSON } from './JSON';\n\nexport class OrganizationMembership {\n  constructor(\n    readonly id: string,\n    readonly role: OrganizationMembershipRole,\n    readonly publicMetadata: OrganizationMembershipPublicMetadata = {},\n    readonly privateMetadata: OrganizationMembershipPrivateMetadata = {},\n    readonly createdAt: number,\n    readonly updatedAt: number,\n    readonly organization: Organization,\n    readonly publicUserData?: OrganizationMembershipPublicUserData | null,\n  ) {}\n\n  static fromJSON(data: OrganizationMembershipJSON) {\n    return new OrganizationMembership(\n      data.id,\n      data.role,\n      data.public_metadata,\n      data.private_metadata,\n      data.created_at,\n      data.updated_at,\n      Organization.fromJSON(data.organization),\n      OrganizationMembershipPublicUserData.fromJSON(data.public_user_data),\n    );\n  }\n}\n\nexport class OrganizationMembershipPublicUserData {\n  constructor(\n    readonly identifier: string,\n    readonly firstName: string | null,\n    readonly lastName: string | null,\n    /**\n     * @deprecated  Use `imageUrl` instead.\n     */\n    readonly profileImageUrl: string,\n    readonly imageUrl: string,\n    readonly hasImage: boolean,\n    readonly userId: string,\n  ) {}\n\n  static fromJSON(data: OrganizationMembershipPublicUserDataJSON) {\n    return new OrganizationMembershipPublicUserData(\n      data.identifier,\n      data.first_name,\n      data.last_name,\n      data.profile_image_url,\n      data.image_url,\n      data.has_image,\n      data.user_id,\n    );\n  }\n}\n\ndeprecatedProperty(OrganizationMembershipPublicUserData, 'profileImageUrl', 'Use `imageUrl` instead.');\n","import { IdentificationLink } from './IdentificationLink';\nimport type { PhoneNumberJSON } from './JSON';\nimport { Verification } from './Verification';\n\nexport class PhoneNumber {\n  constructor(\n    readonly id: string,\n    readonly phoneNumber: string,\n    readonly reservedForSecondFactor: boolean,\n    readonly defaultSecondFactor: boolean,\n    readonly verification: Verification | null,\n    readonly linkedTo: IdentificationLink[],\n  ) {}\n\n  static fromJSON(data: PhoneNumberJSON): PhoneNumber {\n    return new PhoneNumber(\n      data.id,\n      data.phone_number,\n      data.reserved_for_second_factor,\n      data.default_second_factor,\n      data.verification && Verification.fromJSON(data.verification),\n      data.linked_to.map(link => IdentificationLink.fromJSON(link)),\n    );\n  }\n}\n","import type { RedirectUrlJSON } from './JSON';\n\nexport class RedirectUrl {\n  constructor(readonly id: string, readonly url: string, readonly createdAt: number, readonly updatedAt: number) {}\n\n  static fromJSON(data: RedirectUrlJSON): RedirectUrl {\n    return new RedirectUrl(data.id, data.url, data.created_at, data.updated_at);\n  }\n}\n","import type { SignInTokenJSON } from './JSON';\n\nexport class SignInToken {\n  constructor(\n    readonly id: string,\n    readonly userId: string,\n    readonly token: string,\n    readonly status: string,\n    readonly url: string,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n  ) {}\n\n  static fromJSON(data: SignInTokenJSON): SignInToken {\n    return new SignInToken(data.id, data.user_id, data.token, data.status, data.url, data.created_at, data.updated_at);\n  }\n}\n","import type { SMSMessageJSON } from './JSON';\n\nexport class SMSMessage {\n  constructor(\n    readonly id: string,\n    readonly fromPhoneNumber: string,\n    readonly toPhoneNumber: string,\n    readonly message: string,\n    readonly status: string,\n    readonly phoneNumberId: string | null,\n    readonly data?: Record<string, any> | null,\n  ) {}\n\n  static fromJSON(data: SMSMessageJSON): SMSMessage {\n    return new SMSMessage(\n      data.id,\n      data.from_phone_number,\n      data.to_phone_number,\n      data.message,\n      data.status,\n      data.phone_number_id,\n      data.data,\n    );\n  }\n}\n","import type { TokenJSON } from './JSON';\n\nexport class Token {\n  constructor(readonly jwt: string) {}\n\n  static fromJSON(data: TokenJSON): Token {\n    return new Token(data.jwt);\n  }\n}\n","import type { Web3WalletJSON } from './JSON';\nimport { Verification } from './Verification';\n\nexport class Web3Wallet {\n  constructor(readonly id: string, readonly web3Wallet: string, readonly verification: Verification | null) {}\n\n  static fromJSON(data: Web3WalletJSON): Web3Wallet {\n    return new Web3Wallet(data.id, data.web3_wallet, data.verification && Verification.fromJSON(data.verification));\n  }\n}\n","import { deprecatedProperty } from '../../util/shared';\nimport { EmailAddress } from './EmailAddress';\nimport { ExternalAccount } from './ExternalAccount';\nimport type { ExternalAccountJSON, UserJSON } from './JSON';\nimport { PhoneNumber } from './PhoneNumber';\nimport { Web3Wallet } from './Web3Wallet';\n\nexport class User {\n  constructor(\n    readonly id: string,\n    readonly passwordEnabled: boolean,\n    readonly totpEnabled: boolean,\n    readonly backupCodeEnabled: boolean,\n    readonly twoFactorEnabled: boolean,\n    readonly banned: boolean,\n    readonly createdAt: number,\n    readonly updatedAt: number,\n    /**\n     * @deprecated  Use `imageUrl` instead.\n     */\n    readonly profileImageUrl: string,\n    readonly imageUrl: string,\n    readonly hasImage: boolean,\n    readonly gender: string,\n    readonly birthday: string,\n    readonly primaryEmailAddressId: string | null,\n    readonly primaryPhoneNumberId: string | null,\n    readonly primaryWeb3WalletId: string | null,\n    readonly lastSignInAt: number | null,\n    readonly externalId: string | null,\n    readonly username: string | null,\n    readonly firstName: string | null,\n    readonly lastName: string | null,\n    readonly publicMetadata: UserPublicMetadata = {},\n    readonly privateMetadata: UserPrivateMetadata = {},\n    readonly unsafeMetadata: UserUnsafeMetadata = {},\n    readonly emailAddresses: EmailAddress[] = [],\n    readonly phoneNumbers: PhoneNumber[] = [],\n    readonly web3Wallets: Web3Wallet[] = [],\n    readonly externalAccounts: ExternalAccount[] = [],\n    readonly createOrganizationEnabled: boolean,\n  ) {}\n\n  static fromJSON(data: UserJSON): User {\n    return new User(\n      data.id,\n      data.password_enabled,\n      data.totp_enabled,\n      data.backup_code_enabled,\n      data.two_factor_enabled,\n      data.banned,\n      data.created_at,\n      data.updated_at,\n      data.profile_image_url,\n      data.image_url,\n      data.has_image,\n      data.gender,\n      data.birthday,\n      data.primary_email_address_id,\n      data.primary_phone_number_id,\n      data.primary_web3_wallet_id,\n      data.last_sign_in_at,\n      data.external_id,\n      data.username,\n      data.first_name,\n      data.last_name,\n      data.public_metadata,\n      data.private_metadata,\n      data.unsafe_metadata,\n      (data.email_addresses || []).map(x => EmailAddress.fromJSON(x)),\n      (data.phone_numbers || []).map(x => PhoneNumber.fromJSON(x)),\n      (data.web3_wallets || []).map(x => Web3Wallet.fromJSON(x)),\n      (data.external_accounts || []).map((x: ExternalAccountJSON) => ExternalAccount.fromJSON(x)),\n      data.create_organization_enabled,\n    );\n  }\n}\n\ndeprecatedProperty(User, 'profileImageUrl', 'Use `imageUrl` instead.');\n","import {\n  AllowlistIdentifier,\n  Client,\n  DeletedObject,\n  Email,\n  EmailAddress,\n  Invitation,\n  OauthAccessToken,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  PhoneNumber,\n  RedirectUrl,\n  Session,\n  SignInToken,\n  SMSMessage,\n  Token,\n  User,\n} from '.';\nimport { ObjectType } from './JSON';\n\n// FIXME don't return any\nexport function deserialize(payload: any): any {\n  if (Array.isArray(payload)) {\n    return payload.map(item => jsonToObject(item));\n  } else if (isPaginated(payload)) {\n    return payload.data.map(item => jsonToObject(item));\n  } else {\n    return jsonToObject(payload);\n  }\n}\n\ntype PaginatedResponse = {\n  data: object[];\n};\n\nfunction isPaginated(payload: any): payload is PaginatedResponse {\n  return Array.isArray(payload.data) && <PaginatedResponse>payload.data !== undefined;\n}\n\nfunction getCount(item: { total_count: number }) {\n  return item.total_count;\n}\n\n// TODO: Revise response deserialization\nfunction jsonToObject(item: any): any {\n  // Special case: DeletedObject\n  // TODO: Improve this check\n  if (typeof item !== 'string' && 'object' in item && 'deleted' in item) {\n    return DeletedObject.fromJSON(item);\n  }\n\n  switch (item.object) {\n    case ObjectType.AllowlistIdentifier:\n      return AllowlistIdentifier.fromJSON(item);\n    case ObjectType.Client:\n      return Client.fromJSON(item);\n    case ObjectType.EmailAddress:\n      return EmailAddress.fromJSON(item);\n    case ObjectType.Email:\n      return Email.fromJSON(item);\n    case ObjectType.Invitation:\n      return Invitation.fromJSON(item);\n    case ObjectType.OauthAccessToken:\n      return OauthAccessToken.fromJSON(item);\n    case ObjectType.Organization:\n      return Organization.fromJSON(item);\n    case ObjectType.OrganizationInvitation:\n      return OrganizationInvitation.fromJSON(item);\n    case ObjectType.OrganizationMembership:\n      return OrganizationMembership.fromJSON(item);\n    case ObjectType.PhoneNumber:\n      return PhoneNumber.fromJSON(item);\n    case ObjectType.RedirectUrl:\n      return RedirectUrl.fromJSON(item);\n    case ObjectType.SignInToken:\n      return SignInToken.fromJSON(item);\n    case ObjectType.Session:\n      return Session.fromJSON(item);\n    case ObjectType.SmsMessage:\n      return SMSMessage.fromJSON(item);\n    case ObjectType.Token:\n      return Token.fromJSON(item);\n    case ObjectType.TotalCount:\n      return getCount(item);\n    case ObjectType.User:\n      return User.fromJSON(item);\n    default:\n      return item;\n  }\n}\n","import {\n  AllowlistIdentifierAPI,\n  ClientAPI,\n  DomainAPI,\n  EmailAddressAPI,\n  EmailAPI,\n  InterstitialAPI,\n  InvitationAPI,\n  OrganizationAPI,\n  PhoneNumberAPI,\n  RedirectUrlAPI,\n  SessionAPI,\n  SignInTokenAPI,\n  SMSMessageAPI,\n  UserAPI,\n} from './endpoints';\nimport { buildRequest } from './request';\n\nexport type CreateBackendApiOptions = {\n  /**\n   * Backend API key\n   * @deprecated Use `secretKey` instead.\n   */\n  apiKey?: string;\n  /* Secret Key */\n  secretKey?: string;\n  /* Backend API URL */\n  apiUrl?: string;\n  /* Backend API version */\n  apiVersion?: string;\n  /* Library/SDK name */\n  userAgent?: string;\n  /**\n   * @deprecated This option has been deprecated and will be removed with the next major release.\n   * A RequestInit init object used by the `request` method.\n   */\n  httpOptions?: RequestInit;\n};\n\nexport type ApiClient = ReturnType<typeof createBackendApiClient>;\n\nexport function createBackendApiClient(options: CreateBackendApiOptions) {\n  const request = buildRequest(options);\n\n  return {\n    allowlistIdentifiers: new AllowlistIdentifierAPI(request),\n    clients: new ClientAPI(request),\n    emailAddresses: new EmailAddressAPI(request),\n    emails: new EmailAPI(request),\n    interstitial: new InterstitialAPI(request),\n    invitations: new InvitationAPI(request),\n    organizations: new OrganizationAPI(request),\n    phoneNumbers: new PhoneNumberAPI(request),\n    redirectUrls: new RedirectUrlAPI(request),\n    sessions: new SessionAPI(request),\n    signInTokens: new SignInTokenAPI(request),\n    smsMessages: new SMSMessageAPI(request),\n    users: new UserAPI(request),\n    domains: new DomainAPI(request),\n  };\n}\n","import { deprecated } from '@clerk/shared/deprecated';\nimport type {\n  ActClaim,\n  CheckAuthorizationWithCustomPermissions,\n  JwtPayload,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n  ServerGetToken,\n  ServerGetTokenOptions,\n} from '@clerk/types';\n\nimport type { Organization, Session, User } from '../api';\nimport { createBackendApiClient } from '../api';\nimport type { RequestState } from './authStatus';\nimport type { AuthenticateRequestOptions } from './request';\n\ntype AuthObjectDebugData = Partial<AuthenticateRequestOptions & RequestState>;\ntype CreateAuthObjectDebug = (data?: Record<string, unknown>) => AuthObjectDebug;\ntype AuthObjectDebug = () => unknown;\n\nexport type SignedInAuthObjectOptions = {\n  /**\n   * @deprecated Use `secretKey` instead.\n   */\n  apiKey?: string;\n  secretKey?: string;\n  apiUrl: string;\n  apiVersion: string;\n  token: string;\n  session?: Session;\n  user?: User;\n  organization?: Organization;\n};\n\nexport type SignedInAuthObject = {\n  sessionClaims: JwtPayload;\n  sessionId: string;\n  session: Session | undefined;\n  actor: ActClaim | undefined;\n  userId: string;\n  user: User | undefined;\n  orgId: string | undefined;\n  orgRole: OrganizationCustomRoleKey | undefined;\n  orgSlug: string | undefined;\n  orgPermissions: OrganizationCustomPermissionKey[] | undefined;\n  organization: Organization | undefined;\n  getToken: ServerGetToken;\n  has: CheckAuthorizationWithCustomPermissions;\n  debug: AuthObjectDebug;\n};\n\nexport type SignedOutAuthObject = {\n  sessionClaims: null;\n  sessionId: null;\n  session: null;\n  actor: null;\n  userId: null;\n  user: null;\n  orgId: null;\n  orgRole: null;\n  orgSlug: null;\n  orgPermissions: null;\n  organization: null;\n  getToken: ServerGetToken;\n  has: CheckAuthorizationWithCustomPermissions;\n  debug: AuthObjectDebug;\n};\n\nexport type AuthObject = SignedInAuthObject | SignedOutAuthObject;\n\nconst createDebug: CreateAuthObjectDebug = data => {\n  return () => {\n    const res = { ...data } || {};\n    res.apiKey = ((res.apiKey as string) || '').substring(0, 7);\n    res.secretKey = ((res.secretKey as string) || '').substring(0, 7);\n    res.jwtKey = ((res.jwtKey as string) || '').substring(0, 7);\n    return { ...res };\n  };\n};\n\nexport function signedInAuthObject(\n  sessionClaims: JwtPayload,\n  options: SignedInAuthObjectOptions,\n  debugData?: AuthObjectDebugData,\n): SignedInAuthObject {\n  const {\n    act: actor,\n    sid: sessionId,\n    org_id: orgId,\n    org_role: orgRole,\n    org_slug: orgSlug,\n    org_permissions: orgPermissions,\n    sub: userId,\n  } = sessionClaims;\n  const { apiKey, secretKey, apiUrl, apiVersion, token, session, user, organization } = options;\n\n  if (apiKey) {\n    deprecated('apiKey', 'Use `secretKey` instead.');\n  }\n\n  const { sessions } = createBackendApiClient({\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion,\n  });\n\n  const getToken = createGetToken({\n    sessionId,\n    sessionToken: token,\n    fetcher: (...args) => sessions.getToken(...args),\n  });\n\n  return {\n    actor,\n    sessionClaims,\n    sessionId,\n    session,\n    userId,\n    user,\n    orgId,\n    orgRole,\n    orgSlug,\n    orgPermissions,\n    organization,\n    getToken,\n    has: createHasAuthorization({ orgId, orgRole, orgPermissions, userId }),\n    debug: createDebug({ ...options, ...debugData }),\n  };\n}\n\nexport function signedOutAuthObject(debugData?: AuthObjectDebugData): SignedOutAuthObject {\n  if (debugData?.apiKey) {\n    deprecated('apiKey', 'Use `secretKey` instead.');\n  }\n\n  return {\n    sessionClaims: null,\n    sessionId: null,\n    session: null,\n    userId: null,\n    user: null,\n    actor: null,\n    orgId: null,\n    orgRole: null,\n    orgSlug: null,\n    orgPermissions: null,\n    organization: null,\n    getToken: () => Promise.resolve(null),\n    has: () => false,\n    debug: createDebug(debugData),\n  };\n}\n\nexport function prunePrivateMetadata(\n  resource?:\n    | {\n        private_metadata: any;\n      }\n    | {\n        privateMetadata: any;\n      }\n    | null,\n) {\n  // Delete sensitive private metadata from resource before rendering in SSR\n  if (resource) {\n    // @ts-ignore\n    delete resource['privateMetadata'];\n    // @ts-ignore\n    delete resource['private_metadata'];\n  }\n\n  return resource;\n}\n\nexport function sanitizeAuthObject<T extends Record<any, any>>(authObject: T): T {\n  const user = authObject.user ? { ...authObject.user } : authObject.user;\n  const organization = authObject.organization ? { ...authObject.organization } : authObject.organization;\n\n  prunePrivateMetadata(user);\n  prunePrivateMetadata(organization);\n\n  return { ...authObject, user, organization };\n}\n\n/**\n * Auth objects moving through the server -> client boundary need to be serializable\n * as we need to ensure that they can be transferred via the network as pure strings.\n * Some frameworks like Remix or Next (/pages dir only) handle this serialization by simply\n * ignoring any non-serializable keys, however Nextjs /app directory is stricter and\n * throws an error if a non-serializable value is found.\n */\nexport const makeAuthObjectSerializable = <T extends Record<string, unknown>>(obj: T): T => {\n  // remove any non-serializable props from the returned object\n\n  const { debug, getToken, has, ...rest } = obj as unknown as AuthObject;\n  return rest as unknown as T;\n};\n\ntype TokenFetcher = (sessionId: string, template: string) => Promise<string>;\n\ntype CreateGetToken = (params: { sessionId: string; sessionToken: string; fetcher: TokenFetcher }) => ServerGetToken;\n\nconst createGetToken: CreateGetToken = params => {\n  const { fetcher, sessionToken, sessionId } = params || {};\n\n  return async (options: ServerGetTokenOptions = {}) => {\n    if (!sessionId) {\n      return null;\n    }\n\n    if (options.template) {\n      return fetcher(sessionId, options.template);\n    }\n\n    return sessionToken;\n  };\n};\n\nconst createHasAuthorization =\n  ({\n    orgId,\n    orgRole,\n    userId,\n    orgPermissions,\n  }: {\n    userId: string;\n    orgId: string | undefined;\n    orgRole: string | undefined;\n    orgPermissions: string[] | undefined;\n  }): CheckAuthorizationWithCustomPermissions =>\n  params => {\n    if (!params?.permission && !params?.role) {\n      throw new Error(\n        'Missing parameters. `has` from `auth` or `getAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`',\n      );\n    }\n\n    if (!orgId || !userId || !orgRole || !orgPermissions) {\n      return false;\n    }\n\n    if (params.permission) {\n      return orgPermissions.includes(params.permission);\n    }\n\n    if (params.role) {\n      return orgRole === params.role;\n    }\n\n    return false;\n  };\n","export type TokenCarrier = 'header' | 'cookie';\n\nexport enum TokenVerificationErrorCode {\n  InvalidSecretKey = 'clerk_key_invalid',\n}\n\nexport enum TokenVerificationErrorReason {\n  TokenExpired = 'token-expired',\n  TokenInvalid = 'token-invalid',\n  TokenInvalidAlgorithm = 'token-invalid-algorithm',\n  TokenInvalidAuthorizedParties = 'token-invalid-authorized-parties',\n  TokenInvalidIssuer = 'token-invalid-issuer',\n  TokenInvalidSignature = 'token-invalid-signature',\n  TokenNotActiveYet = 'token-not-active-yet',\n  TokenVerificationFailed = 'token-verification-failed',\n  InvalidSecretKey = 'secret-key-invalid',\n\n  LocalJWKMissing = 'jwk-local-missing',\n\n  RemoteJWKFailedToLoad = 'jwk-remote-failed-to-load',\n  RemoteJWKInvalid = 'jwk-remote-invalid',\n  RemoteJWKMissing = 'jwk-remote-missing',\n\n  JWKFailedToResolve = 'jwk-failed-to-resolve',\n\n  RemoteInterstitialFailedToLoad = 'interstitial-remote-failed-to-load',\n}\n\nexport enum TokenVerificationErrorAction {\n  ContactSupport = 'Contact support@clerk.com',\n  EnsureClerkJWT = 'Make sure that this is a valid Clerk generate JWT.',\n  SetClerkJWTKey = 'Set the CLERK_JWT_KEY environment variable.',\n  SetClerkSecretKeyOrAPIKey = 'Set the CLERK_SECRET_KEY or CLERK_API_KEY environment variable.',\n  EnsureClockSync = 'Make sure your system clock is in sync (e.g. turn off and on automatic time synchronization).',\n}\n\nexport class TokenVerificationError extends Error {\n  action?: TokenVerificationErrorAction;\n  reason: TokenVerificationErrorReason;\n  tokenCarrier?: TokenCarrier;\n\n  constructor({\n    action,\n    message,\n    reason,\n  }: {\n    action?: TokenVerificationErrorAction;\n    message: string;\n    reason: TokenVerificationErrorReason;\n  }) {\n    super(message);\n\n    Object.setPrototypeOf(this, TokenVerificationError.prototype);\n\n    this.reason = reason;\n    this.message = message;\n    this.action = action;\n  }\n\n  public getFullMessage() {\n    return `${[this.message, this.action].filter(m => m).join(' ')} (reason=${this.reason}, token-carrier=${\n      this.tokenCarrier\n    })`;\n  }\n}\n","import type { MultiDomainAndOrProxyPrimitives } from '@clerk/types';\n\nimport { API_VERSION, USER_AGENT } from '../constants';\n// DO NOT CHANGE: Runtime needs to be imported as a default export so that we can stub its dependencies with Sinon.js\n// For more information refer to https://sinonjs.org/how-to/stub-dependency/\nimport runtime from '../runtime';\nimport { joinPaths } from '../util/path';\nimport {\n  addClerkPrefix,\n  callWithRetry,\n  deprecated,\n  getClerkJsMajorVersionOrTag,\n  getScriptUrl,\n  isDevOrStagingUrl,\n  parsePublishableKey,\n} from '../util/shared';\nimport { TokenVerificationError, TokenVerificationErrorAction, TokenVerificationErrorReason } from './errors';\nimport type { DebugRequestSate } from './request';\n\nexport type LoadInterstitialOptions = {\n  apiUrl: string;\n  frontendApi: string;\n  publishableKey: string;\n  clerkJSUrl?: string;\n  clerkJSVersion?: string;\n  userAgent?: string;\n  /**\n   * @deprecated\n   */\n  pkgVersion?: string;\n  debugData?: DebugRequestSate;\n  isSatellite?: boolean;\n  signInUrl?: string;\n} & MultiDomainAndOrProxyPrimitives;\n\nexport function loadInterstitialFromLocal(options: Omit<LoadInterstitialOptions, 'apiUrl'>) {\n  if (options.frontendApi) {\n    deprecated('frontendApi', 'Use `publishableKey` instead.');\n  }\n  if (options.pkgVersion) {\n    deprecated('pkgVersion', 'Use `clerkJSVersion` instead.');\n  }\n\n  options.frontendApi = parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi || '';\n  const domainOnlyInProd = !isDevOrStagingUrl(options.frontendApi) ? addClerkPrefix(options.domain) : '';\n  const {\n    debugData,\n    frontendApi,\n    pkgVersion,\n    clerkJSUrl,\n    clerkJSVersion,\n    publishableKey,\n    proxyUrl,\n    isSatellite = false,\n    domain,\n    signInUrl,\n  } = options;\n  return `\n    <head>\n        <meta charset=\"UTF-8\" />\n        <style>\n          @media (prefers-color-scheme: dark) {\n            body {\n              background-color: black;\n            }\n          }\n        </style>\n    </head>\n    <body>\n        <script>\n            window.__clerk_frontend_api = '${frontendApi}';\n            window.__clerk_debug = ${JSON.stringify(debugData || {})};\n            ${proxyUrl ? `window.__clerk_proxy_url = '${proxyUrl}'` : ''}\n            ${domain ? `window.__clerk_domain = '${domain}'` : ''}\n            window.startClerk = async () => {\n                function formRedirect(){\n                    const form = '<form method=\"get\" action=\"\" name=\"redirect\"></form>';\n                    document.body.innerHTML = document.body.innerHTML + form;\n\n                    const searchParams = new URLSearchParams(window.location.search);\n                    for (let paramTuple of searchParams) {\n                        const input = document.createElement(\"input\");\n                        input.type = \"hidden\";\n                        input.name = paramTuple[0];\n                        input.value = paramTuple[1];\n                        document.forms.redirect.appendChild(input);\n                    }\n                    const url = new URL(window.location.origin + window.location.pathname + window.location.hash);\n                    window.history.pushState({}, '', url);\n\n                    document.forms.redirect.action = window.location.pathname + window.location.hash;\n                    document.forms.redirect.submit();\n                }\n\n                const Clerk = window.Clerk;\n                try {\n                    await Clerk.load({\n                        isSatellite: ${isSatellite},\n                        isInterstitial: ${true},\n                        signInUrl: ${signInUrl ? `'${signInUrl}'` : undefined}\n                    });\n                    if(Clerk.loaded){\n                      if(window.location.href.indexOf(\"#\") === -1){\n                        window.location.href = window.location.href;\n                      } else if (window.navigator.userAgent.toLowerCase().includes(\"firefox/\")){\n                          formRedirect();\n                      } else {\n                          window.location.reload();\n                      }\n                    }\n                } catch (err) {\n                    console.error('Clerk: ', err);\n                }\n            };\n            (() => {\n                const script = document.createElement('script');\n                ${\n                  publishableKey\n                    ? `script.setAttribute('data-clerk-publishable-key', '${publishableKey}');`\n                    : `script.setAttribute('data-clerk-frontend-api', '${frontendApi}');`\n                }\n\n                ${domain ? `script.setAttribute('data-clerk-domain', '${domain}');` : ''}\n                ${proxyUrl ? `script.setAttribute('data-clerk-proxy-url', '${proxyUrl}')` : ''};\n                script.async = true;\n                script.src = '${\n                  clerkJSUrl ||\n                  getScriptUrl(proxyUrl || domainOnlyInProd || frontendApi, {\n                    pkgVersion,\n                    clerkJSVersion,\n                  })\n                }';\n                script.crossOrigin = 'anonymous';\n                script.addEventListener('load', startClerk);\n                document.body.appendChild(script);\n            })();\n        </script>\n    </body>\n`;\n}\n\n// TODO: Add caching to Interstitial\nexport async function loadInterstitialFromBAPI(options: LoadInterstitialOptions) {\n  if (options.frontendApi) {\n    deprecated('frontendApi', 'Use `publishableKey` instead.');\n  }\n  if (options.pkgVersion) {\n    deprecated('pkgVersion', 'Use `clerkJSVersion` instead.');\n  }\n  options.frontendApi = parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi || '';\n  const url = buildPublicInterstitialUrl(options);\n  const response = await callWithRetry(() =>\n    runtime.fetch(buildPublicInterstitialUrl(options), {\n      method: 'GET',\n      headers: {\n        'Clerk-Backend-SDK': options.userAgent || USER_AGENT,\n      },\n    }),\n  );\n\n  if (!response.ok) {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.ContactSupport,\n      message: `Error loading Clerk Interstitial from ${url} with code=${response.status}`,\n      reason: TokenVerificationErrorReason.RemoteInterstitialFailedToLoad,\n    });\n  }\n\n  return response.text();\n}\n\nexport function buildPublicInterstitialUrl(options: LoadInterstitialOptions) {\n  if (options.frontendApi) {\n    deprecated('frontendApi', 'Use `publishableKey` instead.');\n  }\n\n  options.frontendApi = parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi || '';\n  const { apiUrl, frontendApi, pkgVersion, clerkJSVersion, publishableKey, proxyUrl, isSatellite, domain, signInUrl } =\n    options;\n  const url = new URL(apiUrl);\n  url.pathname = joinPaths(url.pathname, API_VERSION, '/public/interstitial');\n  url.searchParams.append('clerk_js_version', clerkJSVersion || getClerkJsMajorVersionOrTag(frontendApi, pkgVersion));\n  if (publishableKey) {\n    url.searchParams.append('publishable_key', publishableKey);\n  } else {\n    url.searchParams.append('frontend_api', frontendApi);\n  }\n  if (proxyUrl) {\n    url.searchParams.append('proxy_url', proxyUrl);\n  }\n\n  if (isSatellite) {\n    url.searchParams.append('is_satellite', 'true');\n  }\n\n  url.searchParams.append('sign_in_url', signInUrl || '');\n\n  if (!isDevOrStagingUrl(options.frontendApi)) {\n    url.searchParams.append('use_domain_for_script', 'true');\n  }\n\n  if (domain) {\n    url.searchParams.append('domain', domain);\n  }\n\n  return url.href;\n}\n","import { parse } from 'cookie';\n\nimport runtime from '../runtime';\nimport { buildRequestUrl } from '../utils';\n\ntype IsomorphicRequestOptions = (Request: typeof runtime.Request, Headers: typeof runtime.Headers) => Request;\nexport const createIsomorphicRequest = (cb: IsomorphicRequestOptions): Request => {\n  const req = cb(runtime.Request, runtime.Headers);\n  // Used to fix request.url using the x-forwarded-* headers\n  const headersGeneratedURL = buildRequestUrl(req);\n  return new runtime.Request(headersGeneratedURL, req);\n};\n\nexport const buildRequest = (req?: Request) => {\n  if (!req) {\n    return {};\n  }\n  const cookies = parseIsomorphicRequestCookies(req);\n  const headers = getHeaderFromIsomorphicRequest(req);\n  const searchParams = getSearchParamsFromIsomorphicRequest(req);\n\n  return {\n    cookies,\n    headers,\n    searchParams,\n  };\n};\n\nconst decode = (str: string): string => {\n  if (!str) {\n    return str;\n  }\n  return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n};\n\nconst parseIsomorphicRequestCookies = (req: Request) => {\n  const cookies = req.headers && req.headers?.get('cookie') ? parse(req.headers.get('cookie') as string) : {};\n  return (key: string): string | undefined => {\n    const value = cookies?.[key];\n    if (value === undefined) {\n      return undefined;\n    }\n    return decode(value);\n  };\n};\n\nconst getHeaderFromIsomorphicRequest = (req: Request) => (key: string) => req?.headers?.get(key) || undefined;\n\nconst getSearchParamsFromIsomorphicRequest = (req: Request) => (req?.url ? new URL(req.url)?.searchParams : undefined);\n\nexport const stripAuthorizationHeader = (authValue: string | undefined | null): string | undefined => {\n  return authValue?.replace('Bearer ', '');\n};\n","import { constants } from './constants';\n\nconst getHeader = (req: Request, key: string) => req.headers.get(key);\nconst getFirstValueFromHeader = (value?: string | null) => value?.split(',')[0];\n\ntype BuildRequestUrl = (request: Request, path?: string) => URL;\nexport const buildRequestUrl: BuildRequestUrl = (request, path) => {\n  const initialUrl = new URL(request.url);\n\n  const forwardedProto = getHeader(request, constants.Headers.ForwardedProto);\n  const forwardedHost = getHeader(request, constants.Headers.ForwardedHost);\n  const host = getHeader(request, constants.Headers.Host);\n  const protocol = initialUrl.protocol;\n\n  const base = buildOrigin({ protocol, forwardedProto, forwardedHost, host: host || initialUrl.host });\n\n  return new URL(path || initialUrl.pathname, base);\n};\n\ntype BuildOriginParams = {\n  protocol?: string;\n  forwardedProto?: string | null;\n  forwardedHost?: string | null;\n  host?: string | null;\n};\ntype BuildOrigin = (params: BuildOriginParams) => string;\nexport const buildOrigin: BuildOrigin = ({ protocol, forwardedProto, forwardedHost, host }) => {\n  const resolvedHost = getFirstValueFromHeader(forwardedHost) ?? host;\n  const resolvedProtocol = getFirstValueFromHeader(forwardedProto) ?? protocol?.replace(/[:/]/, '');\n\n  if (!resolvedHost || !resolvedProtocol) {\n    return '';\n  }\n\n  return `${resolvedProtocol}://${resolvedHost}`;\n};\n","import type { JwtPayload } from '@clerk/types';\n\nimport { createBackendApiClient } from '../api';\nimport type { SignedInAuthObject, SignedOutAuthObject } from './authObjects';\nimport { signedInAuthObject, signedOutAuthObject } from './authObjects';\nimport type { TokenVerificationErrorReason } from './errors';\n\nexport enum AuthStatus {\n  SignedIn = 'signed-in',\n  SignedOut = 'signed-out',\n  Interstitial = 'interstitial',\n  Unknown = 'unknown',\n}\n\nexport type SignedInState = {\n  status: AuthStatus.SignedIn;\n  reason: null;\n  message: null;\n  frontendApi: string;\n  proxyUrl?: string;\n  publishableKey: string;\n  isSatellite: boolean;\n  domain: string;\n  signInUrl: string;\n  signUpUrl: string;\n  afterSignInUrl: string;\n  afterSignUpUrl: string;\n  isSignedIn: true;\n  isInterstitial: false;\n  isUnknown: false;\n  toAuth: () => SignedInAuthObject;\n  token: string;\n};\n\nexport type SignedOutState = {\n  status: AuthStatus.SignedOut;\n  message: string;\n  reason: AuthReason;\n  frontendApi: string;\n  proxyUrl?: string;\n  publishableKey: string;\n  isSatellite: boolean;\n  domain: string;\n  signInUrl: string;\n  signUpUrl: string;\n  afterSignInUrl: string;\n  afterSignUpUrl: string;\n  isSignedIn: false;\n  isInterstitial: false;\n  isUnknown: false;\n  toAuth: () => SignedOutAuthObject;\n  token: null;\n};\n\nexport type InterstitialState = Omit<SignedOutState, 'isInterstitial' | 'status' | 'toAuth'> & {\n  status: AuthStatus.Interstitial;\n  isInterstitial: true;\n  toAuth: () => null;\n};\n\nexport type UnknownState = Omit<InterstitialState, 'status' | 'isInterstitial' | 'isUnknown'> & {\n  status: AuthStatus.Unknown;\n  isInterstitial: false;\n  isUnknown: true;\n};\n\nexport enum AuthErrorReason {\n  CookieAndUATMissing = 'cookie-and-uat-missing',\n  CookieMissing = 'cookie-missing',\n  CookieOutDated = 'cookie-outdated',\n  CookieUATMissing = 'uat-missing',\n  CrossOriginReferrer = 'cross-origin-referrer',\n  HeaderMissingCORS = 'header-missing-cors',\n  HeaderMissingNonBrowser = 'header-missing-non-browser',\n  SatelliteCookieNeedsSyncing = 'satellite-needs-syncing',\n  SatelliteReturnsFromPrimary = 'satellite-returns-from-primary',\n  PrimaryRespondsToSyncing = 'primary-responds-to-syncing',\n  StandardSignedIn = 'standard-signed-in',\n  StandardSignedOut = 'standard-signed-out',\n  UnexpectedError = 'unexpected-error',\n  Unknown = 'unknown',\n}\n\nexport type AuthReason = AuthErrorReason | TokenVerificationErrorReason;\n\nexport type RequestState = SignedInState | SignedOutState | InterstitialState | UnknownState;\n\nexport async function signedIn<T extends { token: string }>(\n  options: T,\n  sessionClaims: JwtPayload,\n): Promise<SignedInState> {\n  const {\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion,\n    cookieToken,\n    frontendApi,\n    proxyUrl,\n    publishableKey,\n    domain,\n    isSatellite,\n    headerToken,\n    loadSession,\n    loadUser,\n    loadOrganization,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    token,\n  } = options as any;\n\n  const { sid: sessionId, org_id: orgId, sub: userId } = sessionClaims;\n\n  const { sessions, users, organizations } = createBackendApiClient({\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion,\n  });\n\n  const [sessionResp, userResp, organizationResp] = await Promise.all([\n    loadSession ? sessions.getSession(sessionId) : Promise.resolve(undefined),\n    loadUser ? users.getUser(userId) : Promise.resolve(undefined),\n    loadOrganization && orgId ? organizations.getOrganization({ organizationId: orgId }) : Promise.resolve(undefined),\n  ]);\n\n  const session = sessionResp;\n  const user = userResp;\n  const organization = organizationResp;\n  // const session = sessionResp && !sessionResp.errors ? sessionResp.data : undefined;\n  // const user = userResp && !userResp.errors ? userResp.data : undefined;\n  // const organization = organizationResp && !organizationResp.errors ? organizationResp.data : undefined;\n\n  const authObject = signedInAuthObject(\n    sessionClaims,\n    {\n      secretKey,\n      apiKey,\n      apiUrl,\n      apiVersion,\n      token: cookieToken || headerToken || '',\n      session,\n      user,\n      organization,\n    },\n    { ...options, status: AuthStatus.SignedIn },\n  );\n\n  return {\n    status: AuthStatus.SignedIn,\n    reason: null,\n    message: null,\n    frontendApi,\n    proxyUrl,\n    publishableKey,\n    domain,\n    isSatellite,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: true,\n    isInterstitial: false,\n    isUnknown: false,\n    toAuth: () => authObject,\n    token,\n  };\n}\n\nexport function signedOut<T>(options: T, reason: AuthReason, message = ''): SignedOutState {\n  const {\n    frontendApi,\n    publishableKey,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n  } = options as any;\n\n  return {\n    status: AuthStatus.SignedOut,\n    reason,\n    message,\n    frontendApi,\n    proxyUrl,\n    publishableKey,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: false,\n    isInterstitial: false,\n    isUnknown: false,\n    toAuth: () => signedOutAuthObject({ ...options, status: AuthStatus.SignedOut, reason, message }),\n    token: null,\n  };\n}\n\nexport function interstitial<T>(options: T, reason: AuthReason, message = ''): InterstitialState {\n  const {\n    frontendApi,\n    publishableKey,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n  } = options as any;\n  return {\n    status: AuthStatus.Interstitial,\n    reason,\n    message,\n    frontendApi,\n    publishableKey,\n    isSatellite,\n    domain,\n    proxyUrl,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: false,\n    isInterstitial: true,\n    isUnknown: false,\n    toAuth: () => null,\n    token: null,\n  };\n}\n\nexport function unknownState<T>(options: T, reason: AuthReason, message = ''): UnknownState {\n  const { frontendApi, publishableKey, isSatellite, domain, signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl } =\n    options as any;\n  return {\n    status: AuthStatus.Unknown,\n    reason,\n    message,\n    frontendApi,\n    publishableKey,\n    isSatellite,\n    domain,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n    isSignedIn: false,\n    isInterstitial: false,\n    isUnknown: true,\n    toAuth: () => null,\n    token: null,\n  };\n}\n","import { buildOrigin } from '../utils';\n/**\n * This function is only used in the case where:\n * - DevOrStaging key is present\n * - The request carries referrer information\n * (This case most of the times signifies redirect from Clerk Auth pages)\n *\n */\nexport function checkCrossOrigin({\n  originURL,\n  host,\n  forwardedHost,\n  forwardedProto,\n}: {\n  originURL: URL;\n  host?: string | null;\n  forwardedHost?: string | null;\n  forwardedProto?: string | null;\n}) {\n  const finalURL = buildOrigin({ forwardedProto, forwardedHost, protocol: originURL.protocol, host });\n  return finalURL && new URL(finalURL).origin !== originURL.origin;\n}\n\nexport function convertHostHeaderValueToURL(host?: string, protocol = 'https'): URL {\n  /**\n   * The protocol is added for the URL constructor to work properly.\n   * We do not check for the protocol at any point later on.\n   */\n  return new URL(`${protocol}://${host}`);\n}\n\ntype ErrorFields = {\n  message: string;\n  long_message: string;\n  code: string;\n};\n\nexport const getErrorObjectByCode = (errors: ErrorFields[], code: string) => {\n  if (!errors) {\n    return null;\n  }\n\n  return errors.find((err: ErrorFields) => err.code === code);\n};\n","import { deprecatedObjectProperty } from '@clerk/shared/deprecated';\nimport type { Jwt, JwtPayload } from '@clerk/types';\n\n// DO NOT CHANGE: Runtime needs to be imported as a default export so that we can stub its dependencies with Sinon.js\n// For more information refer to https://sinonjs.org/how-to/stub-dependency/\nimport runtime from '../../runtime';\nimport { base64url } from '../../util/rfc4648';\nimport { deprecated } from '../../util/shared';\nimport { TokenVerificationError, TokenVerificationErrorAction, TokenVerificationErrorReason } from '../errors';\nimport { getCryptoAlgorithm } from './algorithms';\nimport type { IssuerResolver } from './assertions';\nimport {\n  assertActivationClaim,\n  assertAudienceClaim,\n  assertAuthorizedPartiesClaim,\n  assertExpirationClaim,\n  assertHeaderAlgorithm,\n  assertHeaderType,\n  assertIssuedAtClaim,\n  assertIssuerClaim,\n  assertSubClaim,\n} from './assertions';\nimport { importKey } from './cryptoKeys';\n\nconst DEFAULT_CLOCK_SKEW_IN_SECONDS = 5 * 1000;\n\nexport async function hasValidSignature(jwt: Jwt, key: JsonWebKey | string) {\n  const { header, signature, raw } = jwt;\n  const encoder = new TextEncoder();\n  const data = encoder.encode([raw.header, raw.payload].join('.'));\n  const algorithm = getCryptoAlgorithm(header.alg);\n\n  const cryptoKey = await importKey(key, algorithm, 'verify');\n\n  return runtime.crypto.subtle.verify(algorithm.name, cryptoKey, signature, data);\n}\n\nexport function decodeJwt(token: string): Jwt {\n  const tokenParts = (token || '').toString().split('.');\n  if (tokenParts.length !== 3) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenInvalid,\n      message: `Invalid JWT form. A JWT consists of three parts separated by dots.`,\n    });\n  }\n\n  const [rawHeader, rawPayload, rawSignature] = tokenParts;\n\n  const decoder = new TextDecoder();\n\n  // To verify a JWS with SubtleCrypto you need to be careful to encode and decode\n  // the data properly between binary and base64url representation. Unfortunately\n  // the standard implementation in the V8 of btoa() and atob() are difficult to\n  // work with as they use \"a Unicode string containing only characters in the\n  // range U+0000 to U+00FF, each representing a binary byte with values 0x00 to\n  // 0xFF respectively\" as the representation of binary data.\n\n  // A better solution to represent binary data in Javascript is to use ES6 TypedArray\n  // and use a Javascript library to convert them to base64url that honors RFC 4648.\n\n  // Side note: The difference between base64 and base64url is the characters selected\n  // for value 62 and 63 in the standard, base64 encode them to + and / while base64url\n  // encode - and _.\n\n  // More info at https://stackoverflow.com/questions/54062583/how-to-verify-a-signed-jwt-with-subtlecrypto-of-the-web-crypto-API\n  const header = JSON.parse(decoder.decode(base64url.parse(rawHeader, { loose: true })));\n  const payload = JSON.parse(decoder.decode(base64url.parse(rawPayload, { loose: true })));\n  const signature = base64url.parse(rawSignature, { loose: true });\n\n  deprecatedObjectProperty(\n    payload,\n    'orgs',\n    'Add orgs to your session token using the \"user.organizations\" shortcode in JWT Templates instead.',\n    'decodeJwt:orgs',\n  );\n\n  return {\n    header,\n    payload,\n    signature,\n    raw: {\n      header: rawHeader,\n      payload: rawPayload,\n      signature: rawSignature,\n      text: token,\n    },\n  };\n}\n\nexport type VerifyJwtOptions = {\n  audience?: string | string[];\n  authorizedParties?: string[];\n  /**\n   * @deprecated This option incorrectly accepts milliseconds instead of seconds and has been deprecated. Use clockSkewInMs instead.\n   */\n  clockSkewInSeconds?: number;\n  clockSkewInMs?: number;\n  issuer: IssuerResolver | string | null;\n  key: JsonWebKey | string;\n};\n\n// TODO: Revise the return types. Maybe it's better to throw an error instead of return an object with a reason\nexport async function verifyJwt(\n  token: string,\n  { audience, authorizedParties, clockSkewInSeconds, clockSkewInMs, issuer, key }: VerifyJwtOptions,\n): Promise<JwtPayload> {\n  if (clockSkewInSeconds) {\n    deprecated('clockSkewInSeconds', 'Use `clockSkewInMs` instead.');\n  }\n\n  const clockSkew = clockSkewInMs || clockSkewInSeconds || DEFAULT_CLOCK_SKEW_IN_SECONDS;\n\n  const decoded = decodeJwt(token);\n\n  const { header, payload } = decoded;\n\n  // Header verifications\n  const { typ, alg } = header;\n\n  assertHeaderType(typ);\n  assertHeaderAlgorithm(alg);\n\n  // Payload verifications\n  const { azp, sub, aud, iss, iat, exp, nbf } = payload;\n\n  assertSubClaim(sub);\n  assertAudienceClaim([aud], [audience]);\n  assertAuthorizedPartiesClaim(azp, authorizedParties);\n  assertIssuerClaim(iss, issuer);\n  assertExpirationClaim(exp, clockSkew);\n  assertActivationClaim(nbf, clockSkew);\n  assertIssuedAtClaim(iat, clockSkew);\n\n  let signatureValid: boolean;\n\n  try {\n    signatureValid = await hasValidSignature(decoded, key);\n  } catch (err) {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.EnsureClerkJWT,\n      reason: TokenVerificationErrorReason.TokenVerificationFailed,\n      message: `Error verifying JWT signature. ${err}`,\n    });\n  }\n\n  if (!signatureValid) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenInvalidSignature,\n      message: 'JWT signature is invalid.',\n    });\n  }\n\n  return payload;\n}\n","/**\n * The base64url helper was extracted from the rfc4648 package\n * in order to resolve CSJ/ESM interoperability issues\n *\n * https://github.com/swansontec/rfc4648.js\n *\n * For more context please refer to:\n * - https://github.com/evanw/esbuild/issues/1719\n * - https://github.com/evanw/esbuild/issues/532\n * - https://github.com/swansontec/rollup-plugin-mjs-entry\n */\nexport const base64url = {\n  parse(string: string, opts?: ParseOptions): Uint8Array {\n    return parse(string, base64UrlEncoding, opts);\n  },\n\n  stringify(data: ArrayLike<number>, opts?: StringifyOptions): string {\n    return stringify(data, base64UrlEncoding, opts);\n  },\n};\n\nconst base64UrlEncoding: Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6,\n};\n\ninterface Encoding {\n  bits: number;\n  chars: string;\n  codes?: { [char: string]: number };\n}\n\ninterface ParseOptions {\n  loose?: boolean;\n  out?: new (size: number) => { [index: number]: number };\n}\n\ninterface StringifyOptions {\n  pad?: boolean;\n}\n\nfunction parse(string: string, encoding: Encoding, opts: ParseOptions = {}): Uint8Array {\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n    for (let i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  }\n\n  // The string must have a whole number of bytes:\n  if (!opts.loose && (string.length * encoding.bits) & 7) {\n    throw new SyntaxError('Invalid padding');\n  }\n\n  // Count the padding bytes:\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n\n    // If we get a whole number of bytes, there is too much padding:\n    if (!opts.loose && !(((string.length - end) * encoding.bits) & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  }\n\n  // Allocate the output:\n  const out = new (opts.out ?? Uint8Array)(((end * encoding.bits) / 8) | 0) as Uint8Array;\n\n  // Parse the data:\n  let bits = 0; // Number of bits currently in the buffer\n  let buffer = 0; // Bits waiting to be written out, MSB first\n  let written = 0; // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = encoding.codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i]);\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << encoding.bits) | value;\n    bits += encoding.bits;\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & (buffer >> bits);\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= encoding.bits || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n}\n\nfunction stringify(data: ArrayLike<number>, encoding: Encoding, opts: StringifyOptions = {}): string {\n  const { pad = true } = opts;\n  const mask = (1 << encoding.bits) - 1;\n  let out = '';\n\n  let bits = 0; // Number of bits currently in the buffer\n  let buffer = 0; // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | (0xff & data[i]);\n    bits += 8;\n\n    // Write out as much as we can:\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & (buffer >> bits)];\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += encoding.chars[mask & (buffer << (encoding.bits - bits))];\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * encoding.bits) & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n}\n","const algToHash: Record<string, string> = {\n  RS256: 'SHA-256',\n  RS384: 'SHA-384',\n  RS512: 'SHA-512',\n};\nconst RSA_ALGORITHM_NAME = 'RSASSA-PKCS1-v1_5';\n\nconst jwksAlgToCryptoAlg: Record<string, string> = {\n  RS256: RSA_ALGORITHM_NAME,\n  RS384: RSA_ALGORITHM_NAME,\n  RS512: RSA_ALGORITHM_NAME,\n};\n\nexport const algs = Object.keys(algToHash);\n\nexport function getCryptoAlgorithm(algorithmName: string): RsaHashedImportParams {\n  const hash = algToHash[algorithmName];\n  const name = jwksAlgToCryptoAlg[algorithmName];\n\n  if (!hash || !name) {\n    throw new Error(`Unsupported algorithm ${algorithmName}, expected one of ${algs.join(',')}.`);\n  }\n\n  return {\n    hash: { name: algToHash[algorithmName] },\n    name: jwksAlgToCryptoAlg[algorithmName],\n  };\n}\n","import { TokenVerificationError, TokenVerificationErrorAction, TokenVerificationErrorReason } from '../errors';\nimport { algs } from './algorithms';\n\nexport type IssuerResolver = string | ((iss: string) => boolean);\n\nconst isArrayString = (s: unknown): s is string[] => {\n  return Array.isArray(s) && s.length > 0 && s.every(a => typeof a === 'string');\n};\n\nexport const assertAudienceClaim = (aud?: unknown, audience?: unknown) => {\n  const audienceList = [audience].flat().filter(a => !!a);\n  const audList = [aud].flat().filter(a => !!a);\n  const shouldVerifyAudience = audienceList.length > 0 && audList.length > 0;\n\n  if (!shouldVerifyAudience) {\n    // Notice: Clerk JWTs use AZP claim instead of Audience\n    //\n    // return {\n    //   valid: false,\n    //   reason: `Invalid JWT audience claim (aud) ${JSON.stringify(\n    //     aud,\n    //   )}. Expected a string or a non-empty array of strings.`,\n    // };\n    return;\n  }\n\n  if (typeof aud === 'string') {\n    if (!audienceList.includes(aud)) {\n      throw new TokenVerificationError({\n        action: TokenVerificationErrorAction.EnsureClerkJWT,\n        reason: TokenVerificationErrorReason.TokenVerificationFailed,\n        message: `Invalid JWT audience claim (aud) ${JSON.stringify(aud)}. Is not included in \"${JSON.stringify(\n          audienceList,\n        )}\".`,\n      });\n    }\n  } else if (isArrayString(aud)) {\n    if (!aud.some(a => audienceList.includes(a))) {\n      throw new TokenVerificationError({\n        action: TokenVerificationErrorAction.EnsureClerkJWT,\n        reason: TokenVerificationErrorReason.TokenVerificationFailed,\n        message: `Invalid JWT audience claim array (aud) ${JSON.stringify(aud)}. Is not included in \"${JSON.stringify(\n          audienceList,\n        )}\".`,\n      });\n    }\n  }\n};\n\nexport const assertHeaderType = (typ?: unknown) => {\n  if (typeof typ === 'undefined') {\n    return;\n  }\n\n  if (typ !== 'JWT') {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.EnsureClerkJWT,\n      reason: TokenVerificationErrorReason.TokenInvalid,\n      message: `Invalid JWT type ${JSON.stringify(typ)}. Expected \"JWT\".`,\n    });\n  }\n};\n\nexport const assertHeaderAlgorithm = (alg: string) => {\n  if (!algs.includes(alg)) {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.EnsureClerkJWT,\n      reason: TokenVerificationErrorReason.TokenInvalidAlgorithm,\n      message: `Invalid JWT algorithm ${JSON.stringify(alg)}. Supported: ${algs}.`,\n    });\n  }\n};\n\nexport const assertSubClaim = (sub?: string) => {\n  if (typeof sub !== 'string') {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.EnsureClerkJWT,\n      reason: TokenVerificationErrorReason.TokenVerificationFailed,\n      message: `Subject claim (sub) is required and must be a string. Received ${JSON.stringify(sub)}.`,\n    });\n  }\n};\n\nexport const assertAuthorizedPartiesClaim = (azp?: string, authorizedParties?: string[]) => {\n  if (!azp || !authorizedParties || authorizedParties.length === 0) {\n    return;\n  }\n\n  if (!authorizedParties.includes(azp)) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenInvalidAuthorizedParties,\n      message: `Invalid JWT Authorized party claim (azp) ${JSON.stringify(azp)}. Expected \"${authorizedParties}\".`,\n    });\n  }\n};\n\nexport const assertIssuerClaim = (iss: string, issuer: IssuerResolver | null) => {\n  if (typeof issuer === 'function' && !issuer(iss)) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenInvalidIssuer,\n      message: 'Failed JWT issuer resolver. Make sure that the resolver returns a truthy value.',\n    });\n  } else if (typeof issuer === 'string' && iss && iss !== issuer) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenInvalidIssuer,\n      message: `Invalid JWT issuer claim (iss) ${JSON.stringify(iss)}. Expected \"${issuer}\".`,\n    });\n  }\n};\n\nexport const assertExpirationClaim = (exp: number, clockSkewInMs: number) => {\n  if (typeof exp !== 'number') {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.EnsureClerkJWT,\n      reason: TokenVerificationErrorReason.TokenVerificationFailed,\n      message: `Invalid JWT expiry date claim (exp) ${JSON.stringify(exp)}. Expected number.`,\n    });\n  }\n\n  const currentDate = new Date(Date.now());\n  const expiryDate = new Date(0);\n  expiryDate.setUTCSeconds(exp);\n\n  const expired = expiryDate.getTime() <= currentDate.getTime() - clockSkewInMs;\n  if (expired) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenExpired,\n      message: `JWT is expired. Expiry date: ${expiryDate.toUTCString()}, Current date: ${currentDate.toUTCString()}.`,\n    });\n  }\n};\n\nexport const assertActivationClaim = (nbf: number | undefined, clockSkewInMs: number) => {\n  if (typeof nbf === 'undefined') {\n    return;\n  }\n\n  if (typeof nbf !== 'number') {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.EnsureClerkJWT,\n      reason: TokenVerificationErrorReason.TokenVerificationFailed,\n      message: `Invalid JWT not before date claim (nbf) ${JSON.stringify(nbf)}. Expected number.`,\n    });\n  }\n\n  const currentDate = new Date(Date.now());\n  const notBeforeDate = new Date(0);\n  notBeforeDate.setUTCSeconds(nbf);\n\n  const early = notBeforeDate.getTime() > currentDate.getTime() + clockSkewInMs;\n  if (early) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenNotActiveYet,\n      message: `JWT cannot be used prior to not before date claim (nbf). Not before date: ${notBeforeDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`,\n    });\n  }\n};\n\nexport const assertIssuedAtClaim = (iat: number | undefined, clockSkewInMs: number) => {\n  if (typeof iat === 'undefined') {\n    return;\n  }\n\n  if (typeof iat !== 'number') {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.EnsureClerkJWT,\n      reason: TokenVerificationErrorReason.TokenVerificationFailed,\n      message: `Invalid JWT issued at date claim (iat) ${JSON.stringify(iat)}. Expected number.`,\n    });\n  }\n\n  const currentDate = new Date(Date.now());\n  const issuedAtDate = new Date(0);\n  issuedAtDate.setUTCSeconds(iat);\n\n  const postIssued = issuedAtDate.getTime() > currentDate.getTime() + clockSkewInMs;\n  if (postIssued) {\n    throw new TokenVerificationError({\n      reason: TokenVerificationErrorReason.TokenNotActiveYet,\n      message: `JWT issued at date claim (iat) is in the future. Issued at date: ${issuedAtDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`,\n    });\n  }\n};\n","import { isomorphicAtob } from '@clerk/shared/isomorphicAtob';\n\nimport runtime from '../../runtime';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#pkcs_8_import\nfunction pemToBuffer(secret: string): ArrayBuffer {\n  const trimmed = secret\n    .replace(/-----BEGIN.*?-----/g, '')\n    .replace(/-----END.*?-----/g, '')\n    .replace(/\\s/g, '');\n\n  const decoded = isomorphicAtob(trimmed);\n\n  const buffer = new ArrayBuffer(decoded.length);\n  const bufView = new Uint8Array(buffer);\n\n  for (let i = 0, strLen = decoded.length; i < strLen; i++) {\n    bufView[i] = decoded.charCodeAt(i);\n  }\n\n  return bufView;\n}\n\nexport function importKey(\n  key: JsonWebKey | string,\n  algorithm: RsaHashedImportParams,\n  keyUsage: 'verify' | 'sign',\n): Promise<CryptoKey> {\n  if (typeof key === 'object') {\n    return runtime.crypto.subtle.importKey('jwk', key, algorithm, false, [keyUsage]);\n  }\n\n  const keyData = pemToBuffer(key);\n  const format = keyUsage === 'sign' ? 'pkcs8' : 'spki';\n\n  return runtime.crypto.subtle.importKey(format, keyData, algorithm, false, [keyUsage]);\n}\n","import runtime from '../../runtime';\nimport { base64url } from '../../util/rfc4648';\nimport { getCryptoAlgorithm } from './algorithms';\nimport { importKey } from './cryptoKeys';\n\nexport interface SignJwtOptions {\n  algorithm?: string;\n  header?: Record<string, unknown>;\n}\n\nfunction encodeJwtData(value: unknown): string {\n  const stringified = JSON.stringify(value);\n  const encoder = new TextEncoder();\n  const encoded = encoder.encode(stringified);\n  return base64url.stringify(encoded, { pad: false });\n}\n\n/**\n * Signs a JSON Web Token (JWT) with the given payload, key, and options.\n * This function is intended to be used *internally* by other Clerk packages and typically\n * should not be used directly.\n *\n * @internal\n * @param payload The payload to include in the JWT.\n * @param key The key to use for signing the JWT. Can be a string or a JsonWebKey.\n * @param options The options to use for signing the JWT.\n * @returns A Promise that resolves to the signed JWT string.\n * @throws An error if no algorithm is specified or if the specified algorithm is unsupported.\n * @throws An error if there is an issue with importing the key or signing the JWT.\n */\nexport async function signJwt(\n  payload: Record<string, unknown>,\n  key: string | JsonWebKey,\n  options: SignJwtOptions,\n): Promise<string> {\n  if (!options.algorithm) {\n    throw new Error('No algorithm specified');\n  }\n  const encoder = new TextEncoder();\n\n  const algorithm = getCryptoAlgorithm(options.algorithm);\n  if (!algorithm) {\n    throw new Error(`Unsupported algorithm ${options.algorithm}`);\n  }\n\n  const cryptoKey = await importKey(key, algorithm, 'sign');\n  const header = options.header || { typ: 'JWT' };\n\n  header.alg = options.algorithm;\n  payload.iat = Math.floor(Date.now() / 1000);\n\n  const encodedHeader = encodeJwtData(header);\n  const encodedPayload = encodeJwtData(payload);\n  const firstPart = `${encodedHeader}.${encodedPayload}`;\n\n  const signature = await runtime.crypto.subtle.sign(algorithm, cryptoKey, encoder.encode(firstPart));\n\n  return `${firstPart}.${base64url.stringify(new Uint8Array(signature), { pad: false })}`;\n}\n","import { API_URL, API_VERSION, MAX_CACHE_LAST_UPDATED_AT_SECONDS } from '../constants';\n// DO NOT CHANGE: Runtime needs to be imported as a default export so that we can stub its dependencies with Sinon.js\n// For more information refer to https://sinonjs.org/how-to/stub-dependency/\nimport runtime from '../runtime';\nimport { joinPaths } from '../util/path';\nimport { getErrorObjectByCode } from '../util/request';\nimport { callWithRetry } from '../util/shared';\nimport {\n  TokenVerificationError,\n  TokenVerificationErrorAction,\n  TokenVerificationErrorCode,\n  TokenVerificationErrorReason,\n} from './errors';\n\ntype JsonWebKeyWithKid = JsonWebKey & { kid: string };\n\ntype JsonWebKeyCache = Record<string, JsonWebKeyWithKid>;\n\nlet cache: JsonWebKeyCache = {};\nlet lastUpdatedAt = 0;\n\nfunction getFromCache(kid: string) {\n  return cache[kid];\n}\n\nfunction getCacheValues() {\n  return Object.values(cache);\n}\n\nfunction setInCache(\n  jwk: JsonWebKeyWithKid,\n  jwksCacheTtlInMs: number = 1000 * 60 * 60, // 1 hour\n) {\n  cache[jwk.kid] = jwk;\n  lastUpdatedAt = Date.now();\n\n  if (jwksCacheTtlInMs >= 0) {\n    setTimeout(() => {\n      if (jwk) {\n        delete cache[jwk.kid];\n      } else {\n        cache = {};\n      }\n    }, jwksCacheTtlInMs);\n  }\n}\n\nconst LocalJwkKid = 'local';\nconst PEM_HEADER = '-----BEGIN PUBLIC KEY-----';\nconst PEM_TRAILER = '-----END PUBLIC KEY-----';\nconst RSA_PREFIX = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA';\nconst RSA_SUFFIX = 'IDAQAB';\n\n/**\n *\n * Loads a local PEM key usually from process.env and transform it to JsonWebKey format.\n * The result is also cached on the module level to avoid unnecessary computations in subsequent invocations.\n *\n * @param {string} localKey\n * @returns {JsonWebKey} key\n */\nexport function loadClerkJWKFromLocal(localKey?: string): JsonWebKey {\n  if (!getFromCache(LocalJwkKid)) {\n    if (!localKey) {\n      throw new TokenVerificationError({\n        action: TokenVerificationErrorAction.SetClerkJWTKey,\n        message: 'Missing local JWK.',\n        reason: TokenVerificationErrorReason.LocalJWKMissing,\n      });\n    }\n\n    const modulus = localKey\n      .replace(/(\\r\\n|\\n|\\r)/gm, '')\n      .replace(PEM_HEADER, '')\n      .replace(PEM_TRAILER, '')\n      .replace(RSA_PREFIX, '')\n      .replace(RSA_SUFFIX, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n\n    // JWK https://datatracker.ietf.org/doc/html/rfc7517\n    setInCache(\n      {\n        kid: 'local',\n        kty: 'RSA',\n        alg: 'RS256',\n        n: modulus,\n        e: 'AQAB',\n      },\n      -1, // local key never expires in cache\n    );\n  }\n\n  return getFromCache(LocalJwkKid);\n}\n\nexport type LoadClerkJWKFromRemoteOptions = {\n  kid: string;\n  jwksCacheTtlInMs?: number;\n  skipJwksCache?: boolean;\n  secretKey?: string;\n  /**\n   * @deprecated Use `secretKey` instead.\n   */\n  apiKey?: string;\n  apiUrl?: string;\n  apiVersion?: string;\n  issuer?: string;\n};\n\n/**\n *\n * Loads a key from JWKS retrieved from the well-known Frontend API endpoint of the issuer.\n * The result is also cached on the module level to avoid network requests in subsequent invocations.\n * The cache lasts 1 hour by default.\n *\n * @param {Object} options\n * @param {string} options.issuer - The issuer origin of the JWT\n * @param {string} options.kid - The id of the key that the JWT was signed with\n * @param {string} options.alg - The algorithm of the JWT\n * @param {number} options.jwksCacheTtlInMs - The TTL of the jwks cache (defaults to 1 hour)\n * @returns {JsonWebKey} key\n */\nexport async function loadClerkJWKFromRemote({\n  apiKey,\n  secretKey,\n  apiUrl = API_URL,\n  apiVersion = API_VERSION,\n  issuer,\n  kid,\n  jwksCacheTtlInMs = 1000 * 60 * 60, // 1 hour,\n  skipJwksCache,\n}: LoadClerkJWKFromRemoteOptions): Promise<JsonWebKey> {\n  const shouldRefreshCache = !getFromCache(kid) && reachedMaxCacheUpdatedAt();\n  if (skipJwksCache || shouldRefreshCache) {\n    let fetcher;\n    const key = secretKey || apiKey;\n\n    if (key) {\n      fetcher = () => fetchJWKSFromBAPI(apiUrl, key, apiVersion);\n    } else if (issuer) {\n      fetcher = () => fetchJWKSFromFAPI(issuer);\n    } else {\n      throw new TokenVerificationError({\n        action: TokenVerificationErrorAction.ContactSupport,\n        message: 'Failed to load JWKS from Clerk Backend or Frontend API.',\n        reason: TokenVerificationErrorReason.RemoteJWKFailedToLoad,\n      });\n    }\n\n    const { keys } = await callWithRetry<{ keys: JsonWebKeyWithKid[] }>(fetcher);\n\n    if (!keys || !keys.length) {\n      throw new TokenVerificationError({\n        action: TokenVerificationErrorAction.ContactSupport,\n        message: 'The JWKS endpoint did not contain any signing keys. Contact support@clerk.com.',\n        reason: TokenVerificationErrorReason.RemoteJWKFailedToLoad,\n      });\n    }\n\n    keys.forEach(key => setInCache(key, jwksCacheTtlInMs));\n  }\n\n  const jwk = getFromCache(kid);\n\n  if (!jwk) {\n    const cacheValues = getCacheValues();\n    const jwkKeys = cacheValues.map(jwk => jwk.kid).join(', ');\n\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.ContactSupport,\n      message: `Unable to find a signing key in JWKS that matches the kid='${kid}' of the provided session token. Please make sure that the __session cookie or the HTTP authorization header contain a Clerk-generated session JWT.${\n        jwkKeys ? ` The following kid are available: ${jwkKeys}` : ''\n      }`,\n      reason: TokenVerificationErrorReason.RemoteJWKMissing,\n    });\n  }\n\n  return jwk;\n}\n\nasync function fetchJWKSFromFAPI(issuer: string) {\n  const url = new URL(issuer);\n  url.pathname = joinPaths(url.pathname, '.well-known/jwks.json');\n\n  const response = await runtime.fetch(url.href);\n\n  if (!response.ok) {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.ContactSupport,\n      message: `Error loading Clerk JWKS from ${url.href} with code=${response.status}`,\n      reason: TokenVerificationErrorReason.RemoteJWKFailedToLoad,\n    });\n  }\n\n  return response.json();\n}\n\nasync function fetchJWKSFromBAPI(apiUrl: string, key: string, apiVersion: string) {\n  if (!key) {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.SetClerkSecretKeyOrAPIKey,\n      message:\n        'Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.',\n      reason: TokenVerificationErrorReason.RemoteJWKFailedToLoad,\n    });\n  }\n\n  const url = new URL(apiUrl);\n  url.pathname = joinPaths(url.pathname, apiVersion, '/jwks');\n\n  const response = await runtime.fetch(url.href, {\n    headers: {\n      Authorization: `Bearer ${key}`,\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    const json = await response.json();\n    const invalidSecretKeyError = getErrorObjectByCode(json?.errors, TokenVerificationErrorCode.InvalidSecretKey);\n\n    if (invalidSecretKeyError) {\n      const reason = TokenVerificationErrorReason.InvalidSecretKey;\n\n      throw new TokenVerificationError({\n        action: TokenVerificationErrorAction.ContactSupport,\n        message: invalidSecretKeyError.message,\n        reason,\n      });\n    }\n\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.ContactSupport,\n      message: `Error loading Clerk JWKS from ${url.href} with code=${response.status}`,\n      reason: TokenVerificationErrorReason.RemoteJWKFailedToLoad,\n    });\n  }\n\n  return response.json();\n}\n\nfunction reachedMaxCacheUpdatedAt() {\n  return Date.now() - lastUpdatedAt >= MAX_CACHE_LAST_UPDATED_AT_SECONDS * 1000;\n}\n","import type { JwtPayload } from '@clerk/types';\n\nimport { deprecated } from '../util/shared';\nimport { TokenVerificationError, TokenVerificationErrorAction, TokenVerificationErrorReason } from './errors';\nimport type { VerifyJwtOptions } from './jwt';\nimport { decodeJwt, verifyJwt } from './jwt';\nimport type { LoadClerkJWKFromRemoteOptions } from './keys';\nimport { loadClerkJWKFromLocal, loadClerkJWKFromRemote } from './keys';\n\n/**\n *\n */\nexport type VerifyTokenOptions = Pick<\n  VerifyJwtOptions,\n  'authorizedParties' | 'audience' | 'issuer' | 'clockSkewInSeconds' | 'clockSkewInMs'\n> & { jwtKey?: string; proxyUrl?: string } & Pick<\n    LoadClerkJWKFromRemoteOptions,\n    'apiKey' | 'secretKey' | 'apiUrl' | 'apiVersion' | 'jwksCacheTtlInMs' | 'skipJwksCache'\n  >;\n\nexport async function verifyToken(token: string, options: VerifyTokenOptions): Promise<JwtPayload> {\n  const {\n    apiKey,\n    secretKey,\n    apiUrl,\n    apiVersion,\n    audience,\n    authorizedParties,\n    clockSkewInSeconds,\n    clockSkewInMs,\n    issuer,\n    jwksCacheTtlInMs,\n    jwtKey,\n    skipJwksCache,\n  } = options;\n\n  if (options.apiKey) {\n    deprecated('apiKey', 'Use `secretKey` instead.');\n  }\n\n  const { header } = decodeJwt(token);\n  const { kid } = header;\n\n  let key;\n\n  if (jwtKey) {\n    key = loadClerkJWKFromLocal(jwtKey);\n  } else if (typeof issuer === 'string') {\n    // Fetch JWKS from Frontend API if an issuer of type string has been provided\n    key = await loadClerkJWKFromRemote({ issuer, kid, jwksCacheTtlInMs, skipJwksCache });\n  } else if (apiKey || secretKey) {\n    // Fetch JWKS from Backend API using the key\n    key = await loadClerkJWKFromRemote({ apiKey, secretKey, apiUrl, apiVersion, kid, jwksCacheTtlInMs, skipJwksCache });\n  } else {\n    throw new TokenVerificationError({\n      action: TokenVerificationErrorAction.SetClerkJWTKey,\n      message: 'Failed to resolve JWK during verification.',\n      reason: TokenVerificationErrorReason.JWKFailedToResolve,\n    });\n  }\n\n  return await verifyJwt(token, {\n    audience,\n    authorizedParties,\n    clockSkewInSeconds,\n    clockSkewInMs,\n    key,\n    issuer,\n  });\n}\n","import { checkCrossOrigin } from '../util/request';\nimport { isDevelopmentFromApiKey, isProductionFromApiKey } from '../util/shared';\nimport type { RequestState } from './authStatus';\nimport { AuthErrorReason, interstitial, signedIn, signedOut } from './authStatus';\nimport type { AuthenticateRequestOptions } from './request';\nimport { verifyToken } from './verify';\n\ntype InterstitialRuleResult = RequestState | undefined;\ntype InterstitialRule = <T extends AuthenticateRequestOptions>(\n  opts: T,\n) => Promise<InterstitialRuleResult> | InterstitialRuleResult;\n\nconst shouldRedirectToSatelliteUrl = (qp?: URLSearchParams) => !!qp?.get('__clerk_satellite_url');\nconst hasJustSynced = (qp?: URLSearchParams) => qp?.get('__clerk_synced') === 'true';\n\nconst VALID_USER_AGENTS = /^Mozilla\\/|(Amazon CloudFront)/;\n\nconst isBrowser = (userAgent: string | undefined) => VALID_USER_AGENTS.test(userAgent || '');\n\n// In development or staging environments only, based on the request's\n// User Agent, detect non-browser requests (e.g. scripts). Since there\n// is no Authorization header, consider the user as signed out and\n// prevent interstitial rendering\n// In production, script requests will be missing both uat and session cookies, which will be\n// automatically treated as signed out. This exception is needed for development, because the any // missing uat throws an interstitial in development.\nexport const nonBrowserRequestInDevRule: InterstitialRule = options => {\n  const { apiKey, secretKey, userAgent } = options;\n  const key = secretKey || apiKey || '';\n  if (isDevelopmentFromApiKey(key) && !isBrowser(userAgent)) {\n    return signedOut(options, AuthErrorReason.HeaderMissingNonBrowser);\n  }\n  return undefined;\n};\n\nexport const crossOriginRequestWithoutHeader: InterstitialRule = options => {\n  const { origin, host, forwardedHost, forwardedProto } = options;\n  const isCrossOrigin =\n    origin &&\n    checkCrossOrigin({\n      originURL: new URL(origin),\n      host,\n      forwardedHost,\n      forwardedProto,\n    });\n\n  if (isCrossOrigin) {\n    return signedOut(options, AuthErrorReason.HeaderMissingCORS);\n  }\n  return undefined;\n};\n\nexport const isPrimaryInDevAndRedirectsToSatellite: InterstitialRule = options => {\n  const { apiKey, secretKey, isSatellite, searchParams } = options;\n  const key = secretKey || apiKey || '';\n  const isDev = isDevelopmentFromApiKey(key);\n\n  if (isDev && !isSatellite && shouldRedirectToSatelliteUrl(searchParams)) {\n    return interstitial(options, AuthErrorReason.PrimaryRespondsToSyncing);\n  }\n  return undefined;\n};\n\nexport const potentialFirstLoadInDevWhenUATMissing: InterstitialRule = options => {\n  const { apiKey, secretKey, clientUat } = options;\n  const key = secretKey || apiKey || '';\n  const res = isDevelopmentFromApiKey(key);\n  if (res && !clientUat) {\n    return interstitial(options, AuthErrorReason.CookieUATMissing);\n  }\n  return undefined;\n};\n\n/**\n * NOTE: Exclude any satellite app that has just synced from throwing an interstitial.\n * It is expected that a primary app will trigger a redirect back to the satellite app.\n */\nexport const potentialRequestAfterSignInOrOutFromClerkHostedUiInDev: InterstitialRule = options => {\n  const { apiKey, secretKey, referrer, host, forwardedHost, forwardedProto } = options;\n  const crossOriginReferrer =\n    referrer && checkCrossOrigin({ originURL: new URL(referrer), host, forwardedHost, forwardedProto });\n  const key = secretKey || apiKey || '';\n\n  if (isDevelopmentFromApiKey(key) && crossOriginReferrer) {\n    return interstitial(options, AuthErrorReason.CrossOriginReferrer);\n  }\n  return undefined;\n};\n\nexport const potentialFirstRequestOnProductionEnvironment: InterstitialRule = options => {\n  const { apiKey, secretKey, clientUat, cookieToken } = options;\n  const key = secretKey || apiKey || '';\n\n  if (isProductionFromApiKey(key) && !clientUat && !cookieToken) {\n    return signedOut(options, AuthErrorReason.CookieAndUATMissing);\n  }\n  return undefined;\n};\n\n// TBD: Can enable if we do not want the __session cookie to be inspected.\n// const signedOutOnDifferentSubdomainButCookieNotRemovedYet: AuthStateRule = (options, key) => {\n//   if (isProduction(key) && !options.clientUat && !options.cookieToken) {\n//     return { status: AuthStatus.Interstitial, errorReason: '' as any };\n//   }\n// };\nexport const isNormalSignedOutState: InterstitialRule = options => {\n  const { clientUat } = options;\n  if (clientUat === '0') {\n    return signedOut(options, AuthErrorReason.StandardSignedOut);\n  }\n  return undefined;\n};\n\n// This happens when a signed in user visits a new subdomain for the first time. The uat will be available because it's set on naked domain, but session will be missing. It can also happen if the cookieToken is manually removed during development.\nexport const hasPositiveClientUatButCookieIsMissing: InterstitialRule = options => {\n  const { clientUat, cookieToken } = options;\n\n  if (clientUat && Number.parseInt(clientUat) > 0 && !cookieToken) {\n    return interstitial(options, AuthErrorReason.CookieMissing);\n  }\n  return undefined;\n};\n\nexport const hasValidHeaderToken: InterstitialRule = async options => {\n  const { headerToken } = options as any;\n  const sessionClaims = await verifyRequestState(options, headerToken);\n  return await signedIn({ ...options, token: headerToken }, sessionClaims);\n};\n\nexport const hasValidCookieToken: InterstitialRule = async options => {\n  const { cookieToken, clientUat } = options as any;\n  const sessionClaims = await verifyRequestState(options, cookieToken);\n  const state = await signedIn({ ...options, token: cookieToken }, sessionClaims);\n\n  const jwt = state.toAuth().sessionClaims;\n  const cookieTokenIsOutdated = jwt.iat < Number.parseInt(clientUat);\n\n  if (!clientUat || cookieTokenIsOutdated) {\n    return interstitial(options, AuthErrorReason.CookieOutDated);\n  }\n\n  return state;\n};\n\nexport async function runInterstitialRules<T extends AuthenticateRequestOptions>(\n  opts: T,\n  rules: InterstitialRule[],\n): Promise<RequestState> {\n  for (const rule of rules) {\n    const res = await rule(opts);\n    if (res) {\n      return res;\n    }\n  }\n\n  return signedOut(opts, AuthErrorReason.UnexpectedError);\n}\n\nasync function verifyRequestState(options: AuthenticateRequestOptions, token: string) {\n  const { isSatellite, proxyUrl } = options;\n  let issuer;\n  if (isSatellite) {\n    issuer = null;\n  } else if (proxyUrl) {\n    issuer = proxyUrl;\n  } else {\n    issuer = (iss: string) => iss.startsWith('https://clerk.') || iss.includes('.clerk.accounts');\n  }\n\n  return verifyToken(token, { ...options, issuer });\n}\n\n/**\n * Avoid throwing this rule for development instances\n * Let the next rule for UatMissing to fire if needed\n */\nexport const isSatelliteAndNeedsSyncing: InterstitialRule = options => {\n  const { clientUat, isSatellite, searchParams, userAgent } = options;\n\n  const isSignedOut = !clientUat || clientUat === '0';\n\n  if (isSatellite && isSignedOut && !isBrowser(userAgent)) {\n    return signedOut(options, AuthErrorReason.SatelliteCookieNeedsSyncing);\n  }\n\n  if (isSatellite && isSignedOut && !hasJustSynced(searchParams)) {\n    return interstitial(options, AuthErrorReason.SatelliteCookieNeedsSyncing);\n  }\n\n  return undefined;\n};\n","import { API_URL, API_VERSION, constants } from '../constants';\nimport { assertValidSecretKey } from '../util/assertValidSecretKey';\nimport { buildRequest, stripAuthorizationHeader } from '../util/IsomorphicRequest';\nimport { deprecated, isDevelopmentFromApiKey, parsePublishableKey } from '../util/shared';\nimport type { RequestState } from './authStatus';\nimport { AuthErrorReason, interstitial, signedOut, unknownState } from './authStatus';\nimport type { TokenCarrier } from './errors';\nimport { TokenVerificationError, TokenVerificationErrorReason } from './errors';\nimport {\n  crossOriginRequestWithoutHeader,\n  hasPositiveClientUatButCookieIsMissing,\n  hasValidCookieToken,\n  hasValidHeaderToken,\n  isNormalSignedOutState,\n  isPrimaryInDevAndRedirectsToSatellite,\n  isSatelliteAndNeedsSyncing,\n  nonBrowserRequestInDevRule,\n  potentialFirstLoadInDevWhenUATMissing,\n  potentialFirstRequestOnProductionEnvironment,\n  potentialRequestAfterSignInOrOutFromClerkHostedUiInDev,\n  runInterstitialRules,\n} from './interstitialRule';\nimport type { VerifyTokenOptions } from './verify';\n\nexport type LoadResourcesOptions = {\n  loadSession?: boolean;\n  loadUser?: boolean;\n  loadOrganization?: boolean;\n};\n\nexport type RequiredVerifyTokenOptions = Required<\n  Pick<VerifyTokenOptions, 'apiKey' | 'secretKey' | 'apiUrl' | 'apiVersion'>\n>;\n\nexport type OptionalVerifyTokenOptions = Partial<\n  Pick<\n    VerifyTokenOptions,\n    | 'audience'\n    | 'authorizedParties'\n    | 'clockSkewInSeconds'\n    | 'clockSkewInMs'\n    | 'jwksCacheTtlInMs'\n    | 'skipJwksCache'\n    | 'jwtKey'\n  >\n>;\n\nexport type AuthenticateRequestOptions = OptionalVerifyTokenOptions &\n  LoadResourcesOptions & {\n    publishableKey?: string;\n    secretKey?: string;\n    /**\n     * @deprecated Use `publishableKey` instead.\n     */\n    frontendApi?: string;\n    /**\n     * @deprecated Use `secretKey` instead.\n     */\n    apiKey?: string;\n    apiVersion?: string;\n    apiUrl?: string;\n    /* Client token cookie value */\n    cookieToken?: string;\n    /* Client uat cookie value */\n    clientUat?: string;\n    /* Client token header value */\n    headerToken?: string;\n    /* Request origin header value */\n    origin?: string;\n    /* Request host header value */\n    host?: string;\n    /* Request forwarded host value */\n    forwardedHost?: string;\n    /* Request forwarded port value */\n    forwardedPort?: string;\n    /* Request forwarded proto value */\n    forwardedProto?: string;\n    /* Request referrer */\n    referrer?: string;\n    /* Request user-agent value */\n    userAgent?: string;\n    domain?: string;\n    isSatellite?: boolean;\n    proxyUrl?: string;\n    searchParams?: URLSearchParams;\n    signInUrl?: string;\n    signUpUrl?: string;\n    afterSignInUrl?: string;\n    afterSignUpUrl?: string;\n    request?: Request;\n  };\n\nfunction assertSignInUrlExists(signInUrl: string | undefined, key: string): asserts signInUrl is string {\n  if (!signInUrl && isDevelopmentFromApiKey(key)) {\n    throw new Error(`Missing signInUrl. Pass a signInUrl for dev instances if an app is satellite`);\n  }\n}\n\nfunction assertProxyUrlOrDomain(proxyUrlOrDomain: string | undefined) {\n  if (!proxyUrlOrDomain) {\n    throw new Error(`Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl`);\n  }\n}\n\nfunction assertSignInUrlFormatAndOrigin(_signInUrl: string, origin: string) {\n  let signInUrl: URL;\n  try {\n    signInUrl = new URL(_signInUrl);\n  } catch {\n    throw new Error(`The signInUrl needs to have a absolute url format.`);\n  }\n\n  if (signInUrl.origin === origin) {\n    throw new Error(`The signInUrl needs to be on a different origin than your satellite application.`);\n  }\n}\n\nexport async function authenticateRequest(options: AuthenticateRequestOptions): Promise<RequestState> {\n  const { cookies, headers, searchParams } = buildRequest(options?.request);\n\n  if (options.frontendApi) {\n    deprecated('frontendApi', 'Use `publishableKey` instead.');\n  }\n\n  if (options.apiKey) {\n    deprecated('apiKey', 'Use `secretKey` instead.');\n  }\n\n  options = {\n    ...options,\n    ...loadOptionsFromHeaders(options, headers),\n    frontendApi: parsePublishableKey(options.publishableKey)?.frontendApi || options.frontendApi,\n    apiUrl: options.apiUrl || API_URL,\n    apiVersion: options.apiVersion || API_VERSION,\n    cookieToken: options.cookieToken || cookies?.(constants.Cookies.Session),\n    clientUat: options.clientUat || cookies?.(constants.Cookies.ClientUat),\n    searchParams: options.searchParams || searchParams || undefined,\n  };\n\n  assertValidSecretKey(options.secretKey || options.apiKey);\n\n  if (options.isSatellite) {\n    assertSignInUrlExists(options.signInUrl, (options.secretKey || options.apiKey) as string);\n    if (options.signInUrl && options.origin /* could this actually be undefined? */) {\n      assertSignInUrlFormatAndOrigin(options.signInUrl, options.origin);\n    }\n    assertProxyUrlOrDomain(options.proxyUrl || options.domain);\n  }\n\n  async function authenticateRequestWithTokenInHeader() {\n    try {\n      const state = await runInterstitialRules(options, [hasValidHeaderToken]);\n      return state;\n    } catch (err) {\n      return handleError(err, 'header');\n    }\n  }\n\n  async function authenticateRequestWithTokenInCookie() {\n    try {\n      const state = await runInterstitialRules(options, [\n        crossOriginRequestWithoutHeader,\n        nonBrowserRequestInDevRule,\n        isSatelliteAndNeedsSyncing,\n        isPrimaryInDevAndRedirectsToSatellite,\n        potentialFirstRequestOnProductionEnvironment,\n        potentialFirstLoadInDevWhenUATMissing,\n        potentialRequestAfterSignInOrOutFromClerkHostedUiInDev,\n        hasPositiveClientUatButCookieIsMissing,\n        isNormalSignedOutState,\n        hasValidCookieToken,\n      ]);\n\n      return state;\n    } catch (err) {\n      return handleError(err, 'cookie');\n    }\n  }\n\n  function handleError(err: unknown, tokenCarrier: TokenCarrier) {\n    if (err instanceof TokenVerificationError) {\n      err.tokenCarrier = tokenCarrier;\n\n      const reasonToReturnInterstitial = [\n        TokenVerificationErrorReason.TokenExpired,\n        TokenVerificationErrorReason.TokenNotActiveYet,\n      ].includes(err.reason);\n\n      if (reasonToReturnInterstitial) {\n        if (tokenCarrier === 'header') {\n          return unknownState<AuthenticateRequestOptions>(options, err.reason, err.getFullMessage());\n        }\n        return interstitial<AuthenticateRequestOptions>(options, err.reason, err.getFullMessage());\n      }\n      return signedOut<AuthenticateRequestOptions>(options, err.reason, err.getFullMessage());\n    }\n    return signedOut<AuthenticateRequestOptions>(options, AuthErrorReason.UnexpectedError, (err as Error).message);\n  }\n\n  if (options.headerToken) {\n    return authenticateRequestWithTokenInHeader();\n  }\n  return authenticateRequestWithTokenInCookie();\n}\n\nexport const debugRequestState = (params: RequestState) => {\n  const { frontendApi, isSignedIn, proxyUrl, isInterstitial, reason, message, publishableKey, isSatellite, domain } =\n    params;\n  return { frontendApi, isSignedIn, proxyUrl, isInterstitial, reason, message, publishableKey, isSatellite, domain };\n};\n\nexport type DebugRequestSate = ReturnType<typeof debugRequestState>;\n\n/**\n * Load authenticate request options from the options provided or fallback to headers.\n */\nexport const loadOptionsFromHeaders = (\n  options: AuthenticateRequestOptions,\n  headers: ReturnType<typeof buildRequest>['headers'],\n) => {\n  if (!headers) {\n    return {};\n  }\n\n  return {\n    headerToken: stripAuthorizationHeader(options.headerToken || headers(constants.Headers.Authorization)),\n    origin: options.origin || headers(constants.Headers.Origin),\n    host: options.host || headers(constants.Headers.Host),\n    forwardedHost: options.forwardedHost || headers(constants.Headers.ForwardedHost),\n    forwardedPort: options.forwardedPort || headers(constants.Headers.ForwardedPort),\n    forwardedProto:\n      options.forwardedProto ||\n      headers(constants.Headers.CloudFrontForwardedProto) ||\n      headers(constants.Headers.ForwardedProto),\n    referrer: options.referrer || headers(constants.Headers.Referrer),\n    userAgent: options.userAgent || headers(constants.Headers.UserAgent),\n  };\n};\n","import type { ApiClient } from '../api';\nimport { API_URL, API_VERSION } from '../constants';\nimport type { LoadInterstitialOptions } from './interstitial';\nimport { buildPublicInterstitialUrl, loadInterstitialFromBAPI, loadInterstitialFromLocal } from './interstitial';\nimport type { AuthenticateRequestOptions } from './request';\nimport { authenticateRequest as authenticateRequestOriginal, debugRequestState } from './request';\n\nexport type CreateAuthenticateRequestOptions = {\n  options: Partial<\n    Pick<\n      AuthenticateRequestOptions,\n      | 'audience'\n      | 'apiKey'\n      | 'secretKey'\n      | 'apiUrl'\n      | 'apiVersion'\n      | 'frontendApi'\n      | 'publishableKey'\n      | 'jwtKey'\n      | 'proxyUrl'\n      | 'domain'\n      | 'isSatellite'\n      | 'userAgent'\n    >\n  >;\n  apiClient: ApiClient;\n};\n\nexport function createAuthenticateRequest(params: CreateAuthenticateRequestOptions) {\n  const { apiClient } = params;\n  const {\n    apiKey: buildtimeApiKey = '',\n    secretKey: buildtimeSecretKey = '',\n    jwtKey: buildtimeJwtKey = '',\n    apiUrl = API_URL,\n    apiVersion = API_VERSION,\n    frontendApi: buildtimeFrontendApi = '',\n    proxyUrl: buildProxyUrl = '',\n    publishableKey: buildtimePublishableKey = '',\n    isSatellite: buildtimeIsSatellite = false,\n    domain: buildtimeDomain = '',\n    audience: buildtimeAudience = '',\n    userAgent: buildUserAgent,\n  } = params.options;\n\n  const authenticateRequest = ({\n    apiKey: runtimeApiKey,\n    secretKey: runtimeSecretKey,\n    audience: runtimeAudience,\n    frontendApi: runtimeFrontendApi,\n    proxyUrl: runtimeProxyUrl,\n    publishableKey: runtimePublishableKey,\n    jwtKey: runtimeJwtKey,\n    isSatellite: runtimeIsSatellite,\n    domain: runtimeDomain,\n    searchParams,\n    ...rest\n  }: Omit<AuthenticateRequestOptions, 'apiUrl' | 'apiVersion'>) => {\n    return authenticateRequestOriginal({\n      ...rest,\n      apiKey: runtimeApiKey || buildtimeApiKey,\n      secretKey: runtimeSecretKey || buildtimeSecretKey,\n      audience: runtimeAudience || buildtimeAudience,\n      apiUrl,\n      apiVersion,\n      frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n      proxyUrl: runtimeProxyUrl || buildProxyUrl,\n      publishableKey: runtimePublishableKey || buildtimePublishableKey,\n      isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n      domain: runtimeDomain || buildtimeDomain,\n      jwtKey: runtimeJwtKey || buildtimeJwtKey,\n      searchParams,\n    });\n  };\n\n  const localInterstitial = ({\n    frontendApi: runtimeFrontendApi,\n    publishableKey: runtimePublishableKey,\n    proxyUrl: runtimeProxyUrl,\n    isSatellite: runtimeIsSatellite,\n    domain: runtimeDomain,\n    ...rest\n  }: Omit<LoadInterstitialOptions, 'apiUrl'>) =>\n    loadInterstitialFromLocal({\n      ...rest,\n      frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n      proxyUrl: runtimeProxyUrl || buildProxyUrl,\n      publishableKey: runtimePublishableKey || buildtimePublishableKey,\n      isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n      domain: runtimeDomain || buildtimeDomain,\n    });\n\n  const remotePublicInterstitial = ({\n    frontendApi: runtimeFrontendApi,\n    publishableKey: runtimePublishableKey,\n    proxyUrl: runtimeProxyUrl,\n    isSatellite: runtimeIsSatellite,\n    domain: runtimeDomain,\n    userAgent: runtimeUserAgent,\n    ...rest\n  }: LoadInterstitialOptions) => {\n    return loadInterstitialFromBAPI({\n      ...rest,\n      apiUrl,\n      frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n      publishableKey: runtimePublishableKey || buildtimePublishableKey,\n      proxyUrl: runtimeProxyUrl || buildProxyUrl,\n      isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n      domain: (runtimeDomain || buildtimeDomain) as any,\n      userAgent: runtimeUserAgent || buildUserAgent,\n    });\n  };\n\n  const remotePublicInterstitialUrl = buildPublicInterstitialUrl;\n\n  // TODO: Replace this function with remotePublicInterstitial\n  const remotePrivateInterstitial = () => apiClient.interstitial.getInterstitial();\n\n  return {\n    authenticateRequest,\n    localInterstitial,\n    remotePublicInterstitial,\n    remotePrivateInterstitial,\n    remotePublicInterstitialUrl,\n    debugRequestState,\n  };\n}\n","import { deprecated, errorThrower, parsePublishableKey } from './util/shared';\n\ntype RedirectAdapter = (url: string) => any;\n\ntype SignUpParams = { returnBackUrl?: string };\ntype SignInParams = { returnBackUrl?: string };\n\nconst buildUrl = (targetUrl: string, redirectUrl?: string) => {\n  let url;\n  if (!targetUrl.startsWith('http')) {\n    if (!redirectUrl || !redirectUrl.startsWith('http')) {\n      throw new Error('destination url or return back url should be an absolute path url!');\n    }\n\n    const baseURL = new URL(redirectUrl);\n    url = new URL(targetUrl, baseURL.origin);\n  } else {\n    url = new URL(targetUrl);\n  }\n\n  if (redirectUrl) {\n    url.searchParams.set('redirect_url', redirectUrl);\n  }\n\n  return url.toString();\n};\n\ntype RedirectParams = {\n  redirectAdapter: RedirectAdapter;\n  signInUrl?: string;\n  signUpUrl?: string;\n  publishableKey?: string;\n  /**\n   * @deprecated Use `publishableKey` instead.\n   */\n  frontendApi?: string;\n};\n\nexport function redirect({ redirectAdapter, signUpUrl, signInUrl, frontendApi, publishableKey }: RedirectParams) {\n  if (!frontendApi) {\n    frontendApi = parsePublishableKey(publishableKey)?.frontendApi;\n  } else {\n    deprecated('frontendApi', 'Use `publishableKey` instead.');\n  }\n\n  const accountsBaseUrl = buildAccountsBaseUrl(frontendApi);\n\n  const redirectToSignUp = ({ returnBackUrl }: SignUpParams = {}) => {\n    if (!signUpUrl && !accountsBaseUrl) {\n      errorThrower.throwMissingPublishableKeyError();\n    }\n\n    const accountsSignUpUrl = `${accountsBaseUrl}/sign-up`;\n    return redirectAdapter(buildUrl(signUpUrl || accountsSignUpUrl, returnBackUrl));\n  };\n\n  const redirectToSignIn = ({ returnBackUrl }: SignInParams = {}) => {\n    if (!signInUrl && !accountsBaseUrl) {\n      errorThrower.throwMissingPublishableKeyError();\n    }\n\n    const accountsSignInUrl = `${accountsBaseUrl}/sign-in`;\n    return redirectAdapter(buildUrl(signInUrl || accountsSignInUrl, returnBackUrl));\n  };\n\n  return { redirectToSignUp, redirectToSignIn };\n}\n\nfunction buildAccountsBaseUrl(frontendApi?: string) {\n  if (!frontendApi) {\n    return '';\n  }\n\n  // convert url from FAPI to accounts for Kima and legacy (prod & dev) instances\n  const accountsBaseUrl = frontendApi\n    // staging accounts\n    .replace(/(clerk\\.accountsstage\\.)/, 'accountsstage.')\n    .replace(/(clerk\\.accounts\\.|clerk\\.)/, 'accounts.');\n  return `https://${accountsBaseUrl}`;\n}\n"],"mappings":";AAAA,SAASA,wBAAA,IAAAC,yBAAA,QAAgC;;;ACElC,IAAeC,WAAA,GAAf,MAA2B;EAChCC,YAAsBC,OAAA,EAA0B;IAA1B,KAAAA,OAAA,GAAAA,OAAA;EAA2B;EAEvCC,UAAUC,EAAA,EAAY;IAC9B,IAAI,CAACA,EAAA,EAAI;MACP,MAAM,IAAIC,KAAA,CAAM,kCAAkC;IACpD;EACF;AACF;;;ACVA,IAAMC,SAAA,GAAY;AAClB,IAAMC,wBAAA,GAA2B,IAAIC,MAAA,CAAOF,SAAA,GAAY,QAAQ,GAAG;AAI5D,SAASG,UAAA,GAAaC,IAAA,EAA4B;EACvD,OAAOA,IAAA,CACJC,MAAA,CAAOC,CAAA,IAAKA,CAAC,EACbC,IAAA,CAAKP,SAAS,EACdQ,OAAA,CAAQP,wBAAA,EAA0BD,SAAS;AAChD;;;ACNA,IAAMS,QAAA,GAAW;AAOV,IAAMC,sBAAA,GAAN,cAAqChB,WAAA,CAAY;EACtD,MAAaiB,2BAAA,EAA6B;IACxC,OAAO,KAAKf,OAAA,CAA+B;MACzCgB,MAAA,EAAQ;MACRC,IAAA,EAAMJ;IACR,CAAC;EACH;EAEA,MAAaK,0BAA0BC,MAAA,EAAyC;IAC9E,OAAO,KAAKnB,OAAA,CAA6B;MACvCgB,MAAA,EAAQ;MACRC,IAAA,EAAMJ,QAAA;MACNO,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAaE,0BAA0BC,qBAAA,EAA+B;IACpE,KAAKrB,SAAA,CAAUqB,qBAAqB;IACpC,OAAO,KAAKtB,OAAA,CAA6B;MACvCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUM,QAAA,EAAUS,qBAAqB;IACjD,CAAC;EACH;AACF;;;AC9BA,IAAMC,SAAA,GAAW;AAEV,IAAMC,SAAA,GAAN,cAAwB1B,WAAA,CAAY;EACzC,MAAa2B,cAAA,EAAgB;IAC3B,OAAO,KAAKzB,OAAA,CAAkB;MAC5BgB,MAAA,EAAQ;MACRC,IAAA,EAAMM;IACR,CAAC;EACH;EAEA,MAAaG,UAAUC,QAAA,EAAkB;IACvC,KAAK1B,SAAA,CAAU0B,QAAQ;IACvB,OAAO,KAAK3B,OAAA,CAAgB;MAC1BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUgB,SAAA,EAAUI,QAAQ;IACpC,CAAC;EACH;EAEOC,aAAaC,KAAA,EAAe;IACjC,OAAO,KAAK7B,OAAA,CAAgB;MAC1BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUgB,SAAA,EAAU,QAAQ;MAClCH,UAAA,EAAY;QAAES;MAAM;IACtB,CAAC;EACH;AACF;;;ACzBA,IAAMC,SAAA,GAAW;AAEV,IAAMC,SAAA,GAAN,cAAwBjC,WAAA,CAAY;EACzC,MAAakC,aAAa9B,EAAA,EAAY;IACpC,OAAO,KAAKF,OAAA,CAAuB;MACjCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuB,SAAA,EAAU5B,EAAE;IAC9B,CAAC;EACH;AACF;;;ACTA,IAAM+B,SAAA,GAAW;AAcV,IAAMC,eAAA,GAAN,cAA8BpC,WAAA,CAAY;EAC/C,MAAaqC,gBAAgBC,cAAA,EAAwB;IACnD,KAAKnC,SAAA,CAAUmC,cAAc;IAE7B,OAAO,KAAKpC,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAU0B,SAAA,EAAUG,cAAc;IAC1C,CAAC;EACH;EAEA,MAAaC,mBAAmBlB,MAAA,EAAkC;IAChE,OAAO,KAAKnB,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMgB,SAAA;MACNb,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAamB,mBAAmBF,cAAA,EAAwBjB,MAAA,GAAmC,CAAC,GAAG;IAC7F,KAAKlB,SAAA,CAAUmC,cAAc;IAE7B,OAAO,KAAKpC,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAU0B,SAAA,EAAUG,cAAc;MACxChB,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAaoB,mBAAmBH,cAAA,EAAwB;IACtD,KAAKnC,SAAA,CAAUmC,cAAc;IAE7B,OAAO,KAAKpC,OAAA,CAAuB;MACjCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAU0B,SAAA,EAAUG,cAAc;IAC1C,CAAC;EACH;AACF;;;ACtDA,SAASI,UAAA,QAAkB;AAY3B,IAAMC,SAAA,GAAW;AAKV,IAAMC,QAAA,GAAN,cAAuB5C,WAAA,CAAY;EAAA;AAAA;AAAA;EAIxC,MAAa6C,YAAYxB,MAAA,EAAqB;IAC5CqB,UAAA,CACE,wBACA,kGACF;IACA,OAAO,KAAKxC,OAAA,CAAe;MACzBgB,MAAA,EAAQ;MACRC,IAAA,EAAMwB,SAAA;MACNrB,UAAA,EAAYD;IACd,CAAC;EACH;AACF;;;AChCA,SAASyB,cAAA,EAAgBC,YAAA,EAAcC,2BAAA,QAAmC;AAC1E,SAASC,aAAA,QAAqB;AAC9B,SAASC,uBAAA,EAAyBC,sBAAA,EAAwBC,mBAAA,QAA2B;AACrF,SAASV,UAAA,IAAAW,WAAA,EAAYC,kBAAA,QAA0B;AAE/C,SAASC,iBAAA,QAAyB;AAIlC,SAASC,0BAAA,QAAkC;AAFpC,IAAMC,YAAA,GAAeF,iBAAA,CAAkB;EAAEG,WAAA,EAAa;AAAiB,CAAC;AAGxE,IAAM;EAAEC;AAAkB,IAAIH,0BAAA,CAA2B;;;ACLzD,IAAMI,eAAA,GAAN,cAA8B5D,WAAA,CAAY;EAC/C,MAAa6D,gBAAA,EAAkB;IAC7BR,WAAA,CACE,qBACA,8FACF;IAEA,OAAO,KAAKnD,OAAA,CAAgB;MAC1BiB,IAAA,EAAM;MACND,MAAA,EAAQ;MACR4C,YAAA,EAAc;QACZ,gBAAgB;MAClB;IACF,CAAC;EACH;AACF;;;AChBA,IAAMC,SAAA,GAAW;AAyBV,IAAMC,aAAA,GAAN,cAA4BhE,WAAA,CAAY;EAC7C,MAAaiE,kBAAkB5C,MAAA,GAAkC,CAAC,GAAG;IACnE,OAAO,KAAKnB,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAM4C,SAAA;MACNG,WAAA,EAAa7C;IACf,CAAC;EACH;EAEA,MAAa8C,iBAAiB9C,MAAA,EAAsB;IAClD,OAAO,KAAKnB,OAAA,CAAoB;MAC9BgB,MAAA,EAAQ;MACRC,IAAA,EAAM4C,SAAA;MACNzC,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAa+C,iBAAiBC,YAAA,EAAsB;IAClD,KAAKlE,SAAA,CAAUkE,YAAY;IAC3B,OAAO,KAAKnE,OAAA,CAAoB;MAC9BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUsD,SAAA,EAAUM,YAAA,EAAc,QAAQ;IAClD,CAAC;EACH;AACF;;;ACrDA,SAAS3B,UAAA,IAAA4B,WAAA,QAAkB;;;ACe3B,OAAOC,MAAA,MAAY;AAEnB,YAAYC,iBAAA,MAAuB;AAEnC,IAAM;EACJC,YAAA;EACAC,sBAAA;EACAC,WAAA;EACAC,eAAA;EACAC,cAAA;EACAC,cAAA;EACAC;AACF,IAAIP,iBAAA;AAmBJ,IAAMQ,WAAA,GAAcP,YAAA,CAAaQ,IAAA,CAAKC,UAAU;AAGhD,IAAMC,OAAA,GAAmB;EACvBZ,MAAA;EACAa,KAAA,EAAOJ,WAAA;EACPK,eAAA,EAAiBX,sBAAA;EACjBY,IAAA,EAAMX,WAAA;EACNY,QAAA,EAAUX,eAAA;EACVY,OAAA,EAASX,cAAA;EACTY,OAAA,EAASX,cAAA;EACTY,QAAA,EAAUX;AACZ;AAEA,IAAOY,eAAA,GAAQR,OAAA;;;AD/Cf,IAAMS,SAAA,GAAW;AA8FV,IAAMC,eAAA,GAAN,cAA8B7F,WAAA,CAAY;EAC/C,MAAa8F,oBAAoBzE,MAAA,EAAoC;IACnE,OAAO,KAAKnB,OAAA,CAAwB;MAClCgB,MAAA,EAAQ;MACRC,IAAA,EAAMyE,SAAA;MACN1B,WAAA,EAAa7C;IACf,CAAC;EACH;EAEA,MAAa0E,mBAAmB1E,MAAA,EAAsB;IACpD,OAAO,KAAKnB,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMyE,SAAA;MACNtE,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAa2E,gBAAgB3E,MAAA,EAA+B;IAC1D,MAAM4E,oBAAA,GAAuB,oBAAoB5E,MAAA,GAASA,MAAA,CAAO6E,cAAA,GAAiB7E,MAAA,CAAO8E,IAAA;IACzF,KAAKhG,SAAA,CAAU8F,oBAAoB;IAEnC,OAAO,KAAK/F,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUK,oBAAoB;IAChD,CAAC;EACH;EAEA,MAAaG,mBAAmBF,cAAA,EAAwB7E,MAAA,EAAsB;IAC5E,KAAKlB,SAAA,CAAU+F,cAAc;IAC7B,OAAO,KAAKhG,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAc;MACxC5E,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAagF,uBAAuBH,cAAA,EAAwB7E,MAAA,EAA0B;IACpF,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,MAAMI,QAAA,GAAW,IAAIX,eAAA,CAAQJ,QAAA,CAAS;IACtCe,QAAA,CAASC,MAAA,CAAO,QAAQlF,MAAA,EAAQmF,IAAI;IACpCF,QAAA,CAASC,MAAA,CAAO,oBAAoBlF,MAAA,EAAQoF,cAAc;IAE1D,OAAO,KAAKvG,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,MAAM;MAChDI;IACF,CAAC;EACH;EAEA,MAAaI,uBAAuBR,cAAA,EAAwB;IAC1D,KAAK/F,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,MAAM;IAClD,CAAC;EACH;EAEA,MAAaS,2BAA2BT,cAAA,EAAwB7E,MAAA,EAA8B;IAC5F,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,UAAU;MACpD5E,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAauF,mBAAmBV,cAAA,EAAwB;IACtD,OAAO,KAAKhG,OAAA,CAAsB;MAChCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAc;IAC1C,CAAC;EACH;EAEA,MAAaW,8BAA8BxF,MAAA,EAA6C;IACtF,MAAM;MAAE6E,cAAA;MAAgBY,KAAA;MAAOC;IAAO,IAAI1F,MAAA;IAC1C,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAkC;MAC5CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,aAAa;MACvDhC,WAAA,EAAa;QAAE4C,KAAA;QAAOC;MAAO;IAC/B,CAAC;EACH;EAEA,MAAaC,6BAA6B3F,MAAA,EAA4C;IACpF,MAAM;MAAE6E,cAAA;MAAgBe,MAAA;MAAQC;IAAK,IAAI7F,MAAA;IACzC,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAgC;MAC1CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,aAAa;MACvD5E,UAAA,EAAY;QACV2F,MAAA;QACAC;MACF;IACF,CAAC;EACH;EAEA,MAAaC,6BAA6B9F,MAAA,EAA4C;IACpF,MAAM;MAAE6E,cAAA;MAAgBe,MAAA;MAAQC;IAAK,IAAI7F,MAAA;IACzC,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAgC;MAC1CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,eAAee,MAAM;MAC/D3F,UAAA,EAAY;QACV4F;MACF;IACF,CAAC;EACH;EAEA,MAAaE,qCAAqC/F,MAAA,EAAoD;IACpG,MAAM;MAAE6E,cAAA;MAAgBe,MAAA;MAAQI,cAAA;MAAgBC;IAAgB,IAAIjG,MAAA;IAEpE,OAAO,KAAKnB,OAAA,CAAgC;MAC1CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,eAAee,MAAA,EAAQ,UAAU;MAC3E3F,UAAA,EAAY;QACV+F,cAAA;QACAC;MACF;IACF,CAAC;EACH;EAEA,MAAaC,6BAA6BlG,MAAA,EAA4C;IACpF,MAAM;MAAE6E,cAAA;MAAgBe;IAAO,IAAI5F,MAAA;IACnC,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAgC;MAC1CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,eAAee,MAAM;IACjE,CAAC;EACH;EAEA,MAAaO,8BAA8BnG,MAAA,EAA6C;IACtF,MAAM;MAAE6E,cAAA;MAAgBuB,MAAA;MAAQX,KAAA;MAAOC;IAAO,IAAI1F,MAAA;IAClD,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAkC;MAC5CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,aAAa;MACvDhC,WAAA,EAAa;QAAEuD,MAAA;QAAQX,KAAA;QAAOC;MAAO;IACvC,CAAC;EACH;EAAA;AAAA;AAAA;EAKA,MAAaW,qCAAqCrG,MAAA,EAAoD;IACpGiD,WAAA,CAAW,wCAAwC,8CAA8C;IAEjG,MAAM;MAAE4B,cAAA;MAAgBY,KAAA;MAAOC;IAAO,IAAI1F,MAAA;IAC1C,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAkC;MAC5CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,eAAe,SAAS;MAClEhC,WAAA,EAAa;QAAE4C,KAAA;QAAOC;MAAO;IAC/B,CAAC;EACH;EAEA,MAAaY,6BAA6BtG,MAAA,EAA4C;IACpF,MAAM;MAAE6E,cAAA;MAAgB,GAAG5E;IAAW,IAAID,MAAA;IAC1C,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAgC;MAC1CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,aAAa;MACvD5E,UAAA,EAAY;QAAE,GAAGA;MAAW;IAC9B,CAAC;EACH;EAEA,MAAasG,0BAA0BvG,MAAA,EAAyC;IAC9E,MAAM;MAAE6E,cAAA;MAAgB7B;IAAa,IAAIhD,MAAA;IACzC,KAAKlB,SAAA,CAAU+F,cAAc;IAC7B,KAAK/F,SAAA,CAAUkE,YAAY;IAE3B,OAAO,KAAKnE,OAAA,CAAgC;MAC1CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,eAAe7B,YAAY;IACvE,CAAC;EACH;EAEA,MAAawD,6BAA6BxG,MAAA,EAA4C;IACpF,MAAM;MAAE6E,cAAA;MAAgB7B,YAAA;MAAcyD;IAAiB,IAAIzG,MAAA;IAC3D,KAAKlB,SAAA,CAAU+F,cAAc;IAE7B,OAAO,KAAKhG,OAAA,CAAgC;MAC1CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUmF,SAAA,EAAUM,cAAA,EAAgB,eAAe7B,YAAA,EAAc,QAAQ;MAC/E/C,UAAA,EAAY;QACVwG;MACF;IACF,CAAC;EACH;AACF;;;AE7SA,IAAMC,SAAA,GAAW;AAcV,IAAMC,cAAA,GAAN,cAA6BhI,WAAA,CAAY;EAC9C,MAAaiI,eAAeC,aAAA,EAAuB;IACjD,KAAK/H,SAAA,CAAU+H,aAAa;IAE5B,OAAO,KAAKhI,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUsH,SAAA,EAAUG,aAAa;IACzC,CAAC;EACH;EAEA,MAAaC,kBAAkB9G,MAAA,EAAiC;IAC9D,OAAO,KAAKnB,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAM4G,SAAA;MACNzG,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAa+G,kBAAkBF,aAAA,EAAuB7G,MAAA,GAAkC,CAAC,GAAG;IAC1F,KAAKlB,SAAA,CAAU+H,aAAa;IAE5B,OAAO,KAAKhI,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUsH,SAAA,EAAUG,aAAa;MACvC5G,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAagH,kBAAkBH,aAAA,EAAuB;IACpD,KAAK/H,SAAA,CAAU+H,aAAa;IAE5B,OAAO,KAAKhI,OAAA,CAAuB;MACjCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUsH,SAAA,EAAUG,aAAa;IACzC,CAAC;EACH;AACF;;;AClDA,IAAMI,SAAA,GAAW;AAMV,IAAMC,cAAA,GAAN,cAA6BvI,WAAA,CAAY;EAC9C,MAAawI,mBAAA,EAAqB;IAChC,OAAO,KAAKtI,OAAA,CAAuB;MACjCgB,MAAA,EAAQ;MACRC,IAAA,EAAMmH;IACR,CAAC;EACH;EAEA,MAAaG,eAAeC,aAAA,EAAuB;IACjD,KAAKvI,SAAA,CAAUuI,aAAa;IAC5B,OAAO,KAAKxI,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAU6H,SAAA,EAAUI,aAAa;IACzC,CAAC;EACH;EAEA,MAAaC,kBAAkBtH,MAAA,EAAiC;IAC9D,OAAO,KAAKnB,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAMmH,SAAA;MACNhH,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAauH,kBAAkBF,aAAA,EAAuB;IACpD,KAAKvI,SAAA,CAAUuI,aAAa;IAC5B,OAAO,KAAKxI,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAU6H,SAAA,EAAUI,aAAa;IACzC,CAAC;EACH;AACF;;;AClCA,IAAMG,UAAA,GAAW;AAQV,IAAMC,UAAA,GAAN,cAAyB9I,WAAA,CAAY;EAC1C,MAAa+I,eAAe7E,WAAA,EAA2B;IACrD,OAAO,KAAKhE,OAAA,CAAmB;MAC7BgB,MAAA,EAAQ;MACRC,IAAA,EAAM0H,UAAA;MACN3E;IACF,CAAC;EACH;EAEA,MAAa8E,WAAWC,SAAA,EAAmB;IACzC,KAAK9I,SAAA,CAAU8I,SAAS;IACxB,OAAO,KAAK/I,OAAA,CAAiB;MAC3BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUoI,UAAA,EAAUI,SAAS;IACrC,CAAC;EACH;EAEA,MAAaC,cAAcD,SAAA,EAAmB;IAC5C,KAAK9I,SAAA,CAAU8I,SAAS;IACxB,OAAO,KAAK/I,OAAA,CAAiB;MAC3BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUoI,UAAA,EAAUI,SAAA,EAAW,QAAQ;IAC/C,CAAC;EACH;EAEA,MAAaE,cAAcF,SAAA,EAAmBlH,KAAA,EAAe;IAC3D,KAAK5B,SAAA,CAAU8I,SAAS;IACxB,OAAO,KAAK/I,OAAA,CAAiB;MAC3BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUoI,UAAA,EAAUI,SAAA,EAAW,QAAQ;MAC7C3H,UAAA,EAAY;QAAES;MAAM;IACtB,CAAC;EACH;EAEA,MAAaqH,SAASH,SAAA,EAAmBI,QAAA,EAAkB;IACzD,KAAKlJ,SAAA,CAAU8I,SAAS;IACxB,QACG,MAAM,KAAK/I,OAAA,CAAe;MACzBgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUoI,UAAA,EAAUI,SAAA,EAAW,UAAUI,QAAA,IAAY,EAAE;IAC/D,CAAC,GACDC,GAAA;EACJ;AACF;;;ACjDA,IAAMC,UAAA,GAAW;AAEV,IAAMC,cAAA,GAAN,cAA6BxJ,WAAA,CAAY;EAC9C,MAAayJ,kBAAkBpI,MAAA,EAAkC;IAC/D,OAAO,KAAKnB,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAMoI,UAAA;MACNjI,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAaqI,kBAAkBC,aAAA,EAAuB;IACpD,KAAKxJ,SAAA,CAAUwJ,aAAa;IAC5B,OAAO,KAAKzJ,OAAA,CAAqB;MAC/BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAU8I,UAAA,EAAUI,aAAA,EAAe,QAAQ;IACnD,CAAC;EACH;AACF;;;AC3BA,SAASjH,UAAA,IAAAkH,WAAA,QAAkB;AAK3B,IAAMC,UAAA,GAAW;AAUV,IAAMC,aAAA,GAAN,cAA4B9J,WAAA,CAAY;EAAA;AAAA;AAAA;EAI7C,MAAa+J,iBAAiB1I,MAAA,EAAmB;IAC/CuI,WAAA,CACE,kCACA,kGACF;IACA,OAAO,KAAK1J,OAAA,CAAoB;MAC9BgB,MAAA,EAAQ;MACRC,IAAA,EAAM0I,UAAA;MACNvI,UAAA,EAAYD;IACd,CAAC;EACH;AACF;;;ACvBA,IAAM2I,UAAA,GAAW;AA0FV,IAAMC,OAAA,GAAN,cAAsBjK,WAAA,CAAY;EACvC,MAAakK,YAAY7I,MAAA,GAAyB,CAAC,GAAG;IACpD,OAAO,KAAKnB,OAAA,CAAgB;MAC1BgB,MAAA,EAAQ;MACRC,IAAA,EAAM6I,UAAA;MACN9F,WAAA,EAAa7C;IACf,CAAC;EACH;EAEA,MAAa8I,QAAQlD,MAAA,EAAgB;IACnC,KAAK9G,SAAA,CAAU8G,MAAM;IACrB,OAAO,KAAK/G,OAAA,CAAc;MACxBgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAM;IAClC,CAAC;EACH;EAEA,MAAamD,WAAW/I,MAAA,EAA0B;IAChD,OAAO,KAAKnB,OAAA,CAAc;MACxBgB,MAAA,EAAQ;MACRC,IAAA,EAAM6I,UAAA;MACN1I,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAagJ,WAAWpD,MAAA,EAAgB5F,MAAA,GAA2B,CAAC,GAAG;IACrE,KAAKlB,SAAA,CAAU8G,MAAM;IAErB,OAAO,KAAK/G,OAAA,CAAc;MACxBgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAM;MAChC3F,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAaiJ,uBAAuBrD,MAAA,EAAgB5F,MAAA,EAA+B;IACjF,KAAKlB,SAAA,CAAU8G,MAAM;IAErB,MAAMX,QAAA,GAAW,IAAIX,eAAA,CAAQJ,QAAA,CAAS;IACtCe,QAAA,CAASC,MAAA,CAAO,QAAQlF,MAAA,EAAQmF,IAAI;IAEpC,OAAO,KAAKtG,OAAA,CAAc;MACxBgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAA,EAAQ,eAAe;MACjDX;IACF,CAAC;EACH;EAEA,MAAaiE,mBAAmBtD,MAAA,EAAgB5F,MAAA,EAA4B;IAC1E,KAAKlB,SAAA,CAAU8G,MAAM;IAErB,OAAO,KAAK/G,OAAA,CAAc;MACxBgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAA,EAAQ,UAAU;MAC5C3F,UAAA,EAAYD;IACd,CAAC;EACH;EAEA,MAAamJ,WAAWvD,MAAA,EAAgB;IACtC,KAAK9G,SAAA,CAAU8G,MAAM;IACrB,OAAO,KAAK/G,OAAA,CAAc;MACxBgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAM;IAClC,CAAC;EACH;EAEA,MAAawD,SAASpJ,MAAA,GAAyB,CAAC,GAAG;IACjD,OAAO,KAAKnB,OAAA,CAAgB;MAC1BgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU,OAAO;MACjC9F,WAAA,EAAa7C;IACf,CAAC;EACH;EAEA,MAAaqJ,wBAAwBzD,MAAA,EAAgB0D,QAAA,EAAoC;IACvF,KAAKxK,SAAA,CAAU8G,MAAM;IACrB,OAAO,KAAK/G,OAAA,CAA4B;MACtCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAA,EAAQ,uBAAuB0D,QAAQ;IACnE,CAAC;EACH;EAEA,MAAaC,eAAe3D,MAAA,EAAgB;IAC1C,KAAK9G,SAAA,CAAU8G,MAAM;IACrB,OAAO,KAAK/G,OAAA,CAAc;MACxBgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAA,EAAQ,KAAK;IACzC,CAAC;EACH;EAEA,MAAaJ,8BAA8BxF,MAAA,EAA6C;IACtF,MAAM;MAAE4F,MAAA;MAAQH,KAAA;MAAOC;IAAO,IAAI1F,MAAA;IAClC,KAAKlB,SAAA,CAAU8G,MAAM;IAErB,OAAO,KAAK/G,OAAA,CAAkC;MAC5CgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAA,EAAQ,0BAA0B;MAC5D/C,WAAA,EAAa;QAAE4C,KAAA;QAAOC;MAAO;IAC/B,CAAC;EACH;EAEA,MAAa8D,eAAexJ,MAAA,EAA8B;IACxD,MAAM;MAAE4F,MAAA;MAAQ6D;IAAS,IAAIzJ,MAAA;IAC7B,KAAKlB,SAAA,CAAU8G,MAAM;IAErB,OAAO,KAAK/G,OAAA,CAA4B;MACtCgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAA,EAAQ,iBAAiB;MACnD3F,UAAA,EAAY;QAAEwJ;MAAS;IACzB,CAAC;EACH;EAEA,MAAaC,WAAW1J,MAAA,EAA0B;IAChD,MAAM;MAAE4F,MAAA;MAAQ+D;IAAK,IAAI3J,MAAA;IACzB,KAAKlB,SAAA,CAAU8G,MAAM;IAErB,OAAO,KAAK/G,OAAA,CAA+C;MACzDgB,MAAA,EAAQ;MACRC,IAAA,EAAMV,SAAA,CAAUuJ,UAAA,EAAU/C,MAAA,EAAQ,aAAa;MAC/C3F,UAAA,EAAY;QAAE0J;MAAK;IACrB,CAAC;EACH;AACF;;;AC3NA,SAASC,qBAAA,QAA6B;AAEtC,OAAOC,SAAA,MAAe;AACtB,OAAOC,aAAA,MAAmB;;;ACHnB,IAAMC,OAAA,GAAU;AAChB,IAAMC,WAAA,GAAc;AAEpB,IAAMC,UAAA,GAAa,GAAG,gBAAY,IAAI,QAAe;AACrD,IAAMC,iCAAA,GAAoC,IAAI;AAErD,IAAMC,UAAA,GAAa;EACjBC,SAAA,EAAW;EACXC,UAAA,EAAY;EACZC,UAAA,EAAY;EACZC,WAAA,EAAa;AACf;AAEA,IAAMC,OAAA,GAAU;EACdC,OAAA,EAAS;EACTC,SAAA,EAAW;AACb;AAEA,IAAMvG,OAAA,GAAU;EACdiG,SAAA,EAAW;EACXC,UAAA,EAAY;EACZC,UAAA,EAAY;EACZC,WAAA,EAAa;EACbI,WAAA,EAAa;EACbC,eAAA,EAAiB;EACjBC,wBAAA,EAA0B;EAC1BC,aAAA,EAAe;EACfC,aAAA,EAAe;EACfC,cAAA,EAAgB;EAChBC,aAAA,EAAe;EACfC,QAAA,EAAU;EACVC,SAAA,EAAW;EACXC,MAAA,EAAQ;EACRC,IAAA,EAAM;EACNC,WAAA,EAAa;AACf;AAEA,IAAMC,YAAA,GAAe;EACnBlB,UAAA,EAAYlG,OAAA,CAAQkG,UAAA;EACpBD,SAAA,EAAWjG,OAAA,CAAQiG;AACrB;AAEA,IAAMoB,YAAA,GAAe;EACnBC,IAAA,EAAM;AACR;AAEO,IAAMC,SAAA,GAAY;EACvBvB,UAAA;EACAK,OAAA;EACArG,OAAA;EACAoH,YAAA;EACAC;AACF;;;ACpDO,SAASG,qBAAqBC,GAAA,EAAqC;EACxE,IAAI,CAACA,GAAA,IAAO,OAAOA,GAAA,KAAQ,UAAU;IACnC,MAAM5M,KAAA,CACJ,4GACF;EACF;AAGF;;;ACNO,IAAM6M,mBAAA,GAAN,MAAMC,oBAAA,CAAoB;EAC/BlN,YACWG,EAAA,EACAgN,UAAA,EACAC,SAAA,EACAC,SAAA,EACAjJ,YAAA,EACT;IALS,KAAAjE,EAAA,GAAAA,EAAA;IACA,KAAAgN,UAAA,GAAAA,UAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAAjJ,YAAA,GAAAA,YAAA;EACR;EAEH,OAAOkJ,SAASC,IAAA,EAAoD;IAClE,OAAO,IAAIL,oBAAA,CAAoBK,IAAA,CAAKpN,EAAA,EAAIoN,IAAA,CAAKJ,UAAA,EAAYI,IAAA,CAAKC,UAAA,EAAYD,IAAA,CAAKE,UAAA,EAAYF,IAAA,CAAKG,aAAa;EAC/G;AACF;;;ACZO,IAAM7B,OAAA,GAAN,MAAM8B,QAAA,CAAQ;EACnB3N,YACWG,EAAA,EACAyB,QAAA,EACAoF,MAAA,EACAQ,MAAA,EACAoG,YAAA,EACAC,QAAA,EACAC,SAAA,EACAV,SAAA,EACAC,SAAA,EACT;IATS,KAAAlN,EAAA,GAAAA,EAAA;IACA,KAAAyB,QAAA,GAAAA,QAAA;IACA,KAAAoF,MAAA,GAAAA,MAAA;IACA,KAAAQ,MAAA,GAAAA,MAAA;IACA,KAAAoG,YAAA,GAAAA,YAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAAV,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;EACR;EAEH,OAAOC,SAASC,IAAA,EAA4B;IAC1C,OAAO,IAAII,QAAA,CACTJ,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAKQ,SAAA,EACLR,IAAA,CAAKS,OAAA,EACLT,IAAA,CAAK/F,MAAA,EACL+F,IAAA,CAAKU,cAAA,EACLV,IAAA,CAAKW,SAAA,EACLX,IAAA,CAAKY,UAAA,EACLZ,IAAA,CAAKC,UAAA,EACLD,IAAA,CAAKE,UACP;EACF;AACF;;;ACzBO,IAAMW,MAAA,GAAN,MAAMC,OAAA,CAAO;EAClBrO,YACWG,EAAA,EACAmO,UAAA,EACAC,QAAA,EACAC,QAAA,EACAC,QAAA,EACAC,mBAAA,EACAtB,SAAA,EACAC,SAAA,EACT;IARS,KAAAlN,EAAA,GAAAA,EAAA;IACA,KAAAmO,UAAA,GAAAA,UAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAAC,mBAAA,GAAAA,mBAAA;IACA,KAAAtB,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;EACR;EAEH,OAAOC,SAASC,IAAA,EAA0B;IACxC,OAAO,IAAIc,OAAA,CACTd,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAKoB,WAAA,EACLpB,IAAA,CAAKgB,QAAA,CAASK,GAAA,CAAIC,CAAA,IAAKhD,OAAA,CAAQyB,QAAA,CAASuB,CAAC,CAAC,GAC1CtB,IAAA,CAAKuB,UAAA,EACLvB,IAAA,CAAKwB,UAAA,EACLxB,IAAA,CAAKyB,sBAAA,EACLzB,IAAA,CAAKC,UAAA,EACLD,IAAA,CAAKE,UACP;EACF;AACF;;;ACzBO,IAAMwB,aAAA,GAAN,MAAMC,cAAA,CAAc;EACzBlP,YACWmP,MAAA,EACAhP,EAAA,EACA+F,IAAA,EACAkJ,OAAA,EACT;IAJS,KAAAD,MAAA,GAAAA,MAAA;IACA,KAAAhP,EAAA,GAAAA,EAAA;IACA,KAAA+F,IAAA,GAAAA,IAAA;IACA,KAAAkJ,OAAA,GAAAA,OAAA;EACR;EAEH,OAAO9B,SAASC,IAAA,EAAyB;IACvC,OAAO,IAAI2B,cAAA,CAAc3B,IAAA,CAAK4B,MAAA,EAAQ5B,IAAA,CAAKpN,EAAA,IAAM,MAAMoN,IAAA,CAAKrH,IAAA,IAAQ,MAAMqH,IAAA,CAAK6B,OAAO;EACxF;AACF;;;ACXO,IAAMC,KAAA,GAAN,MAAMC,MAAA,CAAM;EACjBtP,YACWG,EAAA,EACAoP,aAAA,EACAlN,cAAA,EACAmN,cAAA,EACAC,OAAA,EACAC,IAAA,EACAC,SAAA,EACAnI,MAAA,EACAtB,IAAA,EACAqH,IAAA,EACAqC,gBAAA,EACT;IAXS,KAAAzP,EAAA,GAAAA,EAAA;IACA,KAAAoP,aAAA,GAAAA,aAAA;IACA,KAAAlN,cAAA,GAAAA,cAAA;IACA,KAAAmN,cAAA,GAAAA,cAAA;IACA,KAAAC,OAAA,GAAAA,OAAA;IACA,KAAAC,IAAA,GAAAA,IAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAAnI,MAAA,GAAAA,MAAA;IACA,KAAAtB,IAAA,GAAAA,IAAA;IACA,KAAAqH,IAAA,GAAAA,IAAA;IACA,KAAAqC,gBAAA,GAAAA,gBAAA;EACR;EAEH,OAAOtC,SAASC,IAAA,EAAwB;IACtC,OAAO,IAAI+B,MAAA,CACT/B,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAKsC,eAAA,EACLtC,IAAA,CAAKuC,gBAAA,EACLvC,IAAA,CAAKwC,gBAAA,EACLxC,IAAA,CAAKkC,OAAA,EACLlC,IAAA,CAAKmC,IAAA,EACLnC,IAAA,CAAKyC,UAAA,EACLzC,IAAA,CAAK/F,MAAA,EACL+F,IAAA,CAAKrH,IAAA,EACLqH,IAAA,CAAKA,IAAA,EACLA,IAAA,CAAK0C,kBACP;EACF;AACF;;;AC9BO,IAAMC,kBAAA,GAAN,MAAMC,mBAAA,CAAmB;EAC9BnQ,YAAqBG,EAAA,EAAqBiQ,IAAA,EAAc;IAAnC,KAAAjQ,EAAA,GAAAA,EAAA;IAAqB,KAAAiQ,IAAA,GAAAA,IAAA;EAAe;EAEzD,OAAO9C,SAASC,IAAA,EAAkD;IAChE,OAAO,IAAI4C,mBAAA,CAAmB5C,IAAA,CAAKpN,EAAA,EAAIoN,IAAA,CAAK6C,IAAI;EAClD;AACF;;;ACNO,IAAMC,YAAA,GAAN,MAAMC,aAAA,CAAa;EACxBtQ,YACWwH,MAAA,EACA+I,QAAA,EACAC,+BAAA,GAA8C,MAC9CC,QAAA,GAA0B,MAC1B5C,QAAA,GAA0B,MAC1B6C,KAAA,GAAuB,MAChC;IANS,KAAAlJ,MAAA,GAAAA,MAAA;IACA,KAAA+I,QAAA,GAAAA,QAAA;IACA,KAAAC,+BAAA,GAAAA,+BAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAA5C,QAAA,GAAAA,QAAA;IACA,KAAA6C,KAAA,GAAAA,KAAA;EACR;EAEH,OAAOpD,SAASC,IAAA,EAAsC;IACpD,OAAO,IAAI+C,aAAA,CACT/C,IAAA,CAAK/F,MAAA,EACL+F,IAAA,CAAKgD,QAAA,EACLhD,IAAA,CAAKoD,kCAAA,GAAqC,IAAIC,GAAA,CAAIrD,IAAA,CAAKoD,kCAAkC,IAAI,MAC7FpD,IAAA,CAAKkD,QAAA,EACLlD,IAAA,CAAKW,SAAA,EACLX,IAAA,CAAKmD,KACP;EACF;AACF;;;AClBO,IAAMG,YAAA,GAAN,MAAMC,aAAA,CAAa;EACxB9Q,YACWG,EAAA,EACA4Q,YAAA,EACAC,YAAA,EACAC,QAAA,EACT;IAJS,KAAA9Q,EAAA,GAAAA,EAAA;IACA,KAAA4Q,YAAA,GAAAA,YAAA;IACA,KAAAC,YAAA,GAAAA,YAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;EACR;EAEH,OAAO3D,SAASC,IAAA,EAAsC;IACpD,OAAO,IAAIuD,aAAA,CACTvD,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAK2D,aAAA,EACL3D,IAAA,CAAKyD,YAAA,IAAgBX,YAAA,CAAa/C,QAAA,CAASC,IAAA,CAAKyD,YAAY,GAC5DzD,IAAA,CAAK4D,SAAA,CAAUvC,GAAA,CAAIwC,IAAA,IAAQlB,kBAAA,CAAmB5C,QAAA,CAAS8D,IAAI,CAAC,CAC9D;EACF;AACF;;;AChBO,IAAMC,eAAA,GAAN,MAAMC,gBAAA,CAAgB;EAC3BtR,YACWG,EAAA,EACAuK,QAAA,EACA6G,gBAAA,EACAC,UAAA,EACAC,cAAA,EACAV,YAAA,EACAW,SAAA,EACAC,QAAA,EAIAC,OAAA,EACAC,QAAA,EACAC,QAAA,EACA1K,cAAA,GAAiD,CAAC,GAClD2K,KAAA,EACAf,YAAA,EACT;IAjBS,KAAA7Q,EAAA,GAAAA,EAAA;IACA,KAAAuK,QAAA,GAAAA,QAAA;IACA,KAAA6G,gBAAA,GAAAA,gBAAA;IACA,KAAAC,UAAA,GAAAA,UAAA;IACA,KAAAC,cAAA,GAAAA,cAAA;IACA,KAAAV,YAAA,GAAAA,YAAA;IACA,KAAAW,SAAA,GAAAA,SAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IAIA,KAAAC,OAAA,GAAAA,OAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAA1K,cAAA,GAAAA,cAAA;IACA,KAAA2K,KAAA,GAAAA,KAAA;IACA,KAAAf,YAAA,GAAAA,YAAA;EACR;EAEH,OAAO1D,SAASC,IAAA,EAA4C;IAC1D,OAAO,IAAI+D,gBAAA,CACT/D,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAK7C,QAAA,EACL6C,IAAA,CAAKyE,iBAAA,EACLzE,IAAA,CAAK0E,gBAAA,EACL1E,IAAA,CAAK2E,eAAA,EACL3E,IAAA,CAAK2D,aAAA,EACL3D,IAAA,CAAK4E,UAAA,EACL5E,IAAA,CAAK6E,SAAA,EACL7E,IAAA,CAAK8E,UAAA,EACL9E,IAAA,CAAK+E,SAAA,EACL/E,IAAA,CAAKuE,QAAA,EACLvE,IAAA,CAAKgF,eAAA,EACLhF,IAAA,CAAKwE,KAAA,EACLxE,IAAA,CAAKyD,YAAA,IAAgBX,YAAA,CAAa/C,QAAA,CAASC,IAAA,CAAKyD,YAAY,CAC9D;EACF;AACF;AAEA3N,kBAAA,CAAmBgO,eAAA,EAAiB,WAAW,yBAAyB;;;AC1CjE,IAAMmB,UAAA,GAAN,MAAMC,WAAA,CAAW;EACtBzS,YACWG,EAAA,EACA4Q,YAAA,EACA3J,cAAA,EACAgG,SAAA,EACAC,SAAA,EACA7F,MAAA,EACAkL,OAAA,EACT;IAPS,KAAAvS,EAAA,GAAAA,EAAA;IACA,KAAA4Q,YAAA,GAAAA,YAAA;IACA,KAAA3J,cAAA,GAAAA,cAAA;IACA,KAAAgG,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAA7F,MAAA,GAAAA,MAAA;IACA,KAAAkL,OAAA,GAAAA,OAAA;EACR;EAEH,OAAOpF,SAASC,IAAA,EAAkC;IAChD,OAAO,IAAIkF,WAAA,CACTlF,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAK2D,aAAA,EACL3D,IAAA,CAAKgF,eAAA,EACLhF,IAAA,CAAKC,UAAA,EACLD,IAAA,CAAKE,UAAA,EACLF,IAAA,CAAK/F,MAAA,EACL+F,IAAA,CAAKmF,OACP;EACF;AACF;;;AChBO,IAAKC,UAAA,GAAL,gBAAKC,WAAA,IAAL;EACLA,WAAA,0BAAsB;EACtBA,WAAA,aAAS;EACTA,WAAA,YAAQ;EACRA,WAAA,mBAAe;EACfA,WAAA,sBAAkB;EAClBA,WAAA,sBAAkB;EAClBA,WAAA,oBAAgB;EAChBA,WAAA,iBAAa;EACbA,WAAA,uBAAmB;EACnBA,WAAA,mBAAe;EACfA,WAAA,6BAAyB;EACzBA,WAAA,6BAAyB;EACzBA,WAAA,kBAAc;EACdA,WAAA,kBAAc;EACdA,WAAA,cAAU;EACVA,WAAA,oBAAgB;EAChBA,WAAA,kBAAc;EACdA,WAAA,oBAAgB;EAChBA,WAAA,iBAAa;EACbA,WAAA,WAAO;EACPA,WAAA,iBAAa;EACbA,WAAA,YAAQ;EACRA,WAAA,iBAAa;EAvBH,OAAAA,WAAA;AAAA,GAAAD,UAAA;;;ACPL,IAAME,gBAAA,GAAN,MAAMC,iBAAA,CAAiB;EAC5B9S,YACW0K,QAAA,EACA5I,KAAA,EACAsF,cAAA,GAA0C,CAAC,GAC3C2K,KAAA,EACAgB,MAAA,EACAC,WAAA,EACT;IANS,KAAAtI,QAAA,GAAAA,QAAA;IACA,KAAA5I,KAAA,GAAAA,KAAA;IACA,KAAAsF,cAAA,GAAAA,cAAA;IACA,KAAA2K,KAAA,GAAAA,KAAA;IACA,KAAAgB,MAAA,GAAAA,MAAA;IACA,KAAAC,WAAA,GAAAA,WAAA;EACR;EAEH,OAAO1F,SAASC,IAAA,EAA4B;IAC1C,OAAO,IAAIuF,iBAAA,CACTvF,IAAA,CAAK7C,QAAA,EACL6C,IAAA,CAAKzL,KAAA,EACLyL,IAAA,CAAKgF,eAAA,EACLhF,IAAA,CAAKwE,KAAA,EACLxE,IAAA,CAAKwF,MAAA,EACLxF,IAAA,CAAK0F,YACP;EACF;AACF;;;ACnBO,IAAMC,YAAA,GAAN,MAAMC,aAAA,CAAa;EACxBnT,YACWG,EAAA,EACAiT,IAAA,EACAlN,IAAA,EAIAmN,OAAA,EACAxB,QAAA,EACAyB,QAAA,EACAC,SAAA,EACAnG,SAAA,EACAC,SAAA,EACAjG,cAAA,GAAoD,CAAC,GACrDC,eAAA,GAA+C,CAAC,GAChDmM,qBAAA,EACAC,kBAAA,EACAC,aAAA,EACT;IAjBS,KAAAvT,EAAA,GAAAA,EAAA;IACA,KAAAiT,IAAA,GAAAA,IAAA;IACA,KAAAlN,IAAA,GAAAA,IAAA;IAIA,KAAAmN,OAAA,GAAAA,OAAA;IACA,KAAAxB,QAAA,GAAAA,QAAA;IACA,KAAAyB,QAAA,GAAAA,QAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAAnG,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAAjG,cAAA,GAAAA,cAAA;IACA,KAAAC,eAAA,GAAAA,eAAA;IACA,KAAAmM,qBAAA,GAAAA,qBAAA;IACA,KAAAC,kBAAA,GAAAA,kBAAA;IACA,KAAAC,aAAA,GAAAA,aAAA;EACR;EAEH,OAAOpG,SAASC,IAAA,EAAsC;IACpD,OAAO,IAAI4F,aAAA,CACT5F,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAK6F,IAAA,EACL7F,IAAA,CAAKrH,IAAA,EACLqH,IAAA,CAAKoG,QAAA,EACLpG,IAAA,CAAK+E,SAAA,EACL/E,IAAA,CAAKqG,SAAA,EACLrG,IAAA,CAAKsG,UAAA,EACLtG,IAAA,CAAKC,UAAA,EACLD,IAAA,CAAKE,UAAA,EACLF,IAAA,CAAKgF,eAAA,EACLhF,IAAA,CAAKuG,gBAAA,EACLvG,IAAA,CAAKwG,uBAAA,EACLxG,IAAA,CAAKyG,oBAAA,EACLzG,IAAA,CAAKmG,aACP;EACF;AACF;AAEArQ,kBAAA,CAAmB6P,YAAA,EAAc,WAAW,yBAAyB;;;ACzC9D,IAAMe,sBAAA,GAAN,MAAMC,uBAAA,CAAuB;EAClClU,YACWG,EAAA,EACA4Q,YAAA,EACA9J,IAAA,EACAhB,cAAA,EACAmH,SAAA,EACAC,SAAA,EACA7F,MAAA,EACAJ,cAAA,GAAuD,CAAC,GACxDC,eAAA,GAAyD,CAAC,GACnE;IATS,KAAAlH,EAAA,GAAAA,EAAA;IACA,KAAA4Q,YAAA,GAAAA,YAAA;IACA,KAAA9J,IAAA,GAAAA,IAAA;IACA,KAAAhB,cAAA,GAAAA,cAAA;IACA,KAAAmH,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAA7F,MAAA,GAAAA,MAAA;IACA,KAAAJ,cAAA,GAAAA,cAAA;IACA,KAAAC,eAAA,GAAAA,eAAA;EACR;EAEH,OAAOiG,SAASC,IAAA,EAAkC;IAChD,OAAO,IAAI2G,uBAAA,CACT3G,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAK2D,aAAA,EACL3D,IAAA,CAAKtG,IAAA,EACLsG,IAAA,CAAK4G,eAAA,EACL5G,IAAA,CAAKC,UAAA,EACLD,IAAA,CAAKE,UAAA,EACLF,IAAA,CAAK/F,MAAA,EACL+F,IAAA,CAAKgF,eAAA,EACLhF,IAAA,CAAKuG,gBACP;EACF;AACF;;;ACxBO,IAAMM,sBAAA,GAAN,MAAMC,uBAAA,CAAuB;EAClCrU,YACWG,EAAA,EACA8G,IAAA,EACAG,cAAA,GAAuD,CAAC,GACxDC,eAAA,GAAyD,CAAC,GAC1D+F,SAAA,EACAC,SAAA,EACAiH,YAAA,EACAC,cAAA,EACT;IARS,KAAApU,EAAA,GAAAA,EAAA;IACA,KAAA8G,IAAA,GAAAA,IAAA;IACA,KAAAG,cAAA,GAAAA,cAAA;IACA,KAAAC,eAAA,GAAAA,eAAA;IACA,KAAA+F,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IACA,KAAAiH,YAAA,GAAAA,YAAA;IACA,KAAAC,cAAA,GAAAA,cAAA;EACR;EAEH,OAAOjH,SAASC,IAAA,EAAkC;IAChD,OAAO,IAAI8G,uBAAA,CACT9G,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAKtG,IAAA,EACLsG,IAAA,CAAKgF,eAAA,EACLhF,IAAA,CAAKuG,gBAAA,EACLvG,IAAA,CAAKC,UAAA,EACLD,IAAA,CAAKE,UAAA,EACLyF,YAAA,CAAa5F,QAAA,CAASC,IAAA,CAAK+G,YAAY,GACvCE,oCAAA,CAAqClH,QAAA,CAASC,IAAA,CAAKkH,gBAAgB,CACrE;EACF;AACF;AAEO,IAAMD,oCAAA,GAAN,MAAME,qCAAA,CAAqC;EAChD1U,YACWmN,UAAA,EACAuE,SAAA,EACAC,QAAA,EAIAgD,eAAA,EACA9C,QAAA,EACAyB,QAAA,EACAtM,MAAA,EACT;IAVS,KAAAmG,UAAA,GAAAA,UAAA;IACA,KAAAuE,SAAA,GAAAA,SAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IAIA,KAAAgD,eAAA,GAAAA,eAAA;IACA,KAAA9C,QAAA,GAAAA,QAAA;IACA,KAAAyB,QAAA,GAAAA,QAAA;IACA,KAAAtM,MAAA,GAAAA,MAAA;EACR;EAEH,OAAOsG,SAASC,IAAA,EAAgD;IAC9D,OAAO,IAAImH,qCAAA,CACTnH,IAAA,CAAKJ,UAAA,EACLI,IAAA,CAAK4E,UAAA,EACL5E,IAAA,CAAK6E,SAAA,EACL7E,IAAA,CAAKqH,iBAAA,EACLrH,IAAA,CAAK+E,SAAA,EACL/E,IAAA,CAAKqG,SAAA,EACLrG,IAAA,CAAKS,OACP;EACF;AACF;AAEA3K,kBAAA,CAAmBmR,oCAAA,EAAsC,mBAAmB,yBAAyB;;;ACtD9F,IAAMK,WAAA,GAAN,MAAMC,YAAA,CAAY;EACvB9U,YACWG,EAAA,EACA4U,WAAA,EACAC,uBAAA,EACAC,mBAAA,EACAjE,YAAA,EACAC,QAAA,EACT;IANS,KAAA9Q,EAAA,GAAAA,EAAA;IACA,KAAA4U,WAAA,GAAAA,WAAA;IACA,KAAAC,uBAAA,GAAAA,uBAAA;IACA,KAAAC,mBAAA,GAAAA,mBAAA;IACA,KAAAjE,YAAA,GAAAA,YAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;EACR;EAEH,OAAO3D,SAASC,IAAA,EAAoC;IAClD,OAAO,IAAIuH,YAAA,CACTvH,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAK2H,YAAA,EACL3H,IAAA,CAAK4H,0BAAA,EACL5H,IAAA,CAAK6H,qBAAA,EACL7H,IAAA,CAAKyD,YAAA,IAAgBX,YAAA,CAAa/C,QAAA,CAASC,IAAA,CAAKyD,YAAY,GAC5DzD,IAAA,CAAK4D,SAAA,CAAUvC,GAAA,CAAIwC,IAAA,IAAQlB,kBAAA,CAAmB5C,QAAA,CAAS8D,IAAI,CAAC,CAC9D;EACF;AACF;;;ACtBO,IAAMiE,WAAA,GAAN,MAAMC,YAAA,CAAY;EACvBtV,YAAqBG,EAAA,EAAqBoV,GAAA,EAAsBnI,SAAA,EAA4BC,SAAA,EAAmB;IAA1F,KAAAlN,EAAA,GAAAA,EAAA;IAAqB,KAAAoV,GAAA,GAAAA,GAAA;IAAsB,KAAAnI,SAAA,GAAAA,SAAA;IAA4B,KAAAC,SAAA,GAAAA,SAAA;EAAoB;EAEhH,OAAOC,SAASC,IAAA,EAAoC;IAClD,OAAO,IAAI+H,YAAA,CAAY/H,IAAA,CAAKpN,EAAA,EAAIoN,IAAA,CAAKgI,GAAA,EAAKhI,IAAA,CAAKC,UAAA,EAAYD,IAAA,CAAKE,UAAU;EAC5E;AACF;;;ACNO,IAAM+H,WAAA,GAAN,MAAMC,YAAA,CAAY;EACvBzV,YACWG,EAAA,EACA6G,MAAA,EACAlF,KAAA,EACA0F,MAAA,EACA+N,GAAA,EACAnI,SAAA,EACAC,SAAA,EACT;IAPS,KAAAlN,EAAA,GAAAA,EAAA;IACA,KAAA6G,MAAA,GAAAA,MAAA;IACA,KAAAlF,KAAA,GAAAA,KAAA;IACA,KAAA0F,MAAA,GAAAA,MAAA;IACA,KAAA+N,GAAA,GAAAA,GAAA;IACA,KAAAnI,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;EACR;EAEH,OAAOC,SAASC,IAAA,EAAoC;IAClD,OAAO,IAAIkI,YAAA,CAAYlI,IAAA,CAAKpN,EAAA,EAAIoN,IAAA,CAAKS,OAAA,EAAST,IAAA,CAAKzL,KAAA,EAAOyL,IAAA,CAAK/F,MAAA,EAAQ+F,IAAA,CAAKgI,GAAA,EAAKhI,IAAA,CAAKC,UAAA,EAAYD,IAAA,CAAKE,UAAU;EACnH;AACF;;;ACdO,IAAMiI,UAAA,GAAN,MAAMC,WAAA,CAAW;EACtB3V,YACWG,EAAA,EACAyV,eAAA,EACAC,aAAA,EACAC,OAAA,EACAtO,MAAA,EACAS,aAAA,EACAsF,IAAA,EACT;IAPS,KAAApN,EAAA,GAAAA,EAAA;IACA,KAAAyV,eAAA,GAAAA,eAAA;IACA,KAAAC,aAAA,GAAAA,aAAA;IACA,KAAAC,OAAA,GAAAA,OAAA;IACA,KAAAtO,MAAA,GAAAA,MAAA;IACA,KAAAS,aAAA,GAAAA,aAAA;IACA,KAAAsF,IAAA,GAAAA,IAAA;EACR;EAEH,OAAOD,SAASC,IAAA,EAAkC;IAChD,OAAO,IAAIoI,WAAA,CACTpI,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAKwI,iBAAA,EACLxI,IAAA,CAAKyI,eAAA,EACLzI,IAAA,CAAKuI,OAAA,EACLvI,IAAA,CAAK/F,MAAA,EACL+F,IAAA,CAAK0I,eAAA,EACL1I,IAAA,CAAKA,IACP;EACF;AACF;;;ACtBO,IAAM2I,KAAA,GAAN,MAAMC,MAAA,CAAM;EACjBnW,YAAqBqJ,GAAA,EAAa;IAAb,KAAAA,GAAA,GAAAA,GAAA;EAAc;EAEnC,OAAOiE,SAASC,IAAA,EAAwB;IACtC,OAAO,IAAI4I,MAAA,CAAM5I,IAAA,CAAKlE,GAAG;EAC3B;AACF;;;ACLO,IAAM+M,UAAA,GAAN,MAAMC,WAAA,CAAW;EACtBrW,YAAqBG,EAAA,EAAqBmW,UAAA,EAA6BtF,YAAA,EAAmC;IAArF,KAAA7Q,EAAA,GAAAA,EAAA;IAAqB,KAAAmW,UAAA,GAAAA,UAAA;IAA6B,KAAAtF,YAAA,GAAAA,YAAA;EAAoC;EAE3G,OAAO1D,SAASC,IAAA,EAAkC;IAChD,OAAO,IAAI8I,WAAA,CAAW9I,IAAA,CAAKpN,EAAA,EAAIoN,IAAA,CAAKgJ,WAAA,EAAahJ,IAAA,CAAKyD,YAAA,IAAgBX,YAAA,CAAa/C,QAAA,CAASC,IAAA,CAAKyD,YAAY,CAAC;EAChH;AACF;;;ACFO,IAAMwF,IAAA,GAAN,MAAMC,KAAA,CAAK;EAChBzW,YACWG,EAAA,EACAuW,eAAA,EACAC,WAAA,EACAC,iBAAA,EACAC,gBAAA,EACAC,MAAA,EACA1J,SAAA,EACAC,SAAA,EAIAsH,eAAA,EACA9C,QAAA,EACAyB,QAAA,EACAyD,MAAA,EACAC,QAAA,EACAC,qBAAA,EACAC,oBAAA,EACAC,mBAAA,EACAC,YAAA,EACA5F,UAAA,EACAM,QAAA,EACAJ,SAAA,EACAC,QAAA,EACAvK,cAAA,GAAqC,CAAC,GACtCC,eAAA,GAAuC,CAAC,GACxCgQ,cAAA,GAAqC,CAAC,GACtCC,cAAA,GAAiC,EAAC,EAClCC,YAAA,GAA8B,EAAC,EAC/BC,WAAA,GAA4B,EAAC,EAC7BC,gBAAA,GAAsC,EAAC,EACvCC,yBAAA,EACT;IAhCS,KAAAvX,EAAA,GAAAA,EAAA;IACA,KAAAuW,eAAA,GAAAA,eAAA;IACA,KAAAC,WAAA,GAAAA,WAAA;IACA,KAAAC,iBAAA,GAAAA,iBAAA;IACA,KAAAC,gBAAA,GAAAA,gBAAA;IACA,KAAAC,MAAA,GAAAA,MAAA;IACA,KAAA1J,SAAA,GAAAA,SAAA;IACA,KAAAC,SAAA,GAAAA,SAAA;IAIA,KAAAsH,eAAA,GAAAA,eAAA;IACA,KAAA9C,QAAA,GAAAA,QAAA;IACA,KAAAyB,QAAA,GAAAA,QAAA;IACA,KAAAyD,MAAA,GAAAA,MAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAAC,qBAAA,GAAAA,qBAAA;IACA,KAAAC,oBAAA,GAAAA,oBAAA;IACA,KAAAC,mBAAA,GAAAA,mBAAA;IACA,KAAAC,YAAA,GAAAA,YAAA;IACA,KAAA5F,UAAA,GAAAA,UAAA;IACA,KAAAM,QAAA,GAAAA,QAAA;IACA,KAAAJ,SAAA,GAAAA,SAAA;IACA,KAAAC,QAAA,GAAAA,QAAA;IACA,KAAAvK,cAAA,GAAAA,cAAA;IACA,KAAAC,eAAA,GAAAA,eAAA;IACA,KAAAgQ,cAAA,GAAAA,cAAA;IACA,KAAAC,cAAA,GAAAA,cAAA;IACA,KAAAC,YAAA,GAAAA,YAAA;IACA,KAAAC,WAAA,GAAAA,WAAA;IACA,KAAAC,gBAAA,GAAAA,gBAAA;IACA,KAAAC,yBAAA,GAAAA,yBAAA;EACR;EAEH,OAAOpK,SAASC,IAAA,EAAsB;IACpC,OAAO,IAAIkJ,KAAA,CACTlJ,IAAA,CAAKpN,EAAA,EACLoN,IAAA,CAAKoK,gBAAA,EACLpK,IAAA,CAAKqK,YAAA,EACLrK,IAAA,CAAKsK,mBAAA,EACLtK,IAAA,CAAKuK,kBAAA,EACLvK,IAAA,CAAKuJ,MAAA,EACLvJ,IAAA,CAAKC,UAAA,EACLD,IAAA,CAAKE,UAAA,EACLF,IAAA,CAAKqH,iBAAA,EACLrH,IAAA,CAAK+E,SAAA,EACL/E,IAAA,CAAKqG,SAAA,EACLrG,IAAA,CAAKwJ,MAAA,EACLxJ,IAAA,CAAKyJ,QAAA,EACLzJ,IAAA,CAAKwK,wBAAA,EACLxK,IAAA,CAAKyK,uBAAA,EACLzK,IAAA,CAAK0K,sBAAA,EACL1K,IAAA,CAAK2K,eAAA,EACL3K,IAAA,CAAK4K,WAAA,EACL5K,IAAA,CAAKuE,QAAA,EACLvE,IAAA,CAAK4E,UAAA,EACL5E,IAAA,CAAK6E,SAAA,EACL7E,IAAA,CAAKgF,eAAA,EACLhF,IAAA,CAAKuG,gBAAA,EACLvG,IAAA,CAAK6K,eAAA,GACJ7K,IAAA,CAAK8K,eAAA,IAAmB,EAAC,EAAGzJ,GAAA,CAAIC,CAAA,IAAKgC,YAAA,CAAavD,QAAA,CAASuB,CAAC,CAAC,IAC7DtB,IAAA,CAAK+K,aAAA,IAAiB,EAAC,EAAG1J,GAAA,CAAIC,CAAA,IAAKgG,WAAA,CAAYvH,QAAA,CAASuB,CAAC,CAAC,IAC1DtB,IAAA,CAAKgL,YAAA,IAAgB,EAAC,EAAG3J,GAAA,CAAIC,CAAA,IAAKuH,UAAA,CAAW9I,QAAA,CAASuB,CAAC,CAAC,IACxDtB,IAAA,CAAKiL,iBAAA,IAAqB,EAAC,EAAG5J,GAAA,CAAKC,CAAA,IAA2BwC,eAAA,CAAgB/D,QAAA,CAASuB,CAAC,CAAC,GAC1FtB,IAAA,CAAKkL,2BACP;EACF;AACF;AAEApV,kBAAA,CAAmBmT,IAAA,EAAM,mBAAmB,yBAAyB;;;ACxD9D,SAASkC,YAAYC,OAAA,EAAmB;EAC7C,IAAIC,KAAA,CAAMC,OAAA,CAAQF,OAAO,GAAG;IAC1B,OAAOA,OAAA,CAAQ/J,GAAA,CAAIkK,IAAA,IAAQC,YAAA,CAAaD,IAAI,CAAC;EAC/C,WAAWE,WAAA,CAAYL,OAAO,GAAG;IAC/B,OAAOA,OAAA,CAAQpL,IAAA,CAAKqB,GAAA,CAAIkK,IAAA,IAAQC,YAAA,CAAaD,IAAI,CAAC;EACpD,OAAO;IACL,OAAOC,YAAA,CAAaJ,OAAO;EAC7B;AACF;AAMA,SAASK,YAAYL,OAAA,EAA4C;EAC/D,OAAOC,KAAA,CAAMC,OAAA,CAAQF,OAAA,CAAQpL,IAAI,KAAwBoL,OAAA,CAAQpL,IAAA,KAAS;AAC5E;AAEA,SAAS/C,SAASsO,IAAA,EAA+B;EAC/C,OAAOA,IAAA,CAAKG,WAAA;AACd;AAGA,SAASF,aAAaD,IAAA,EAAgB;EAGpC,IAAI,OAAOA,IAAA,KAAS,YAAY,YAAYA,IAAA,IAAQ,aAAaA,IAAA,EAAM;IACrE,OAAO7J,aAAA,CAAc3B,QAAA,CAASwL,IAAI;EACpC;EAEA,QAAQA,IAAA,CAAK3J,MAAA;IACX;MACE,OAAOlC,mBAAA,CAAoBK,QAAA,CAASwL,IAAI;IAC1C;MACE,OAAO1K,MAAA,CAAOd,QAAA,CAASwL,IAAI;IAC7B;MACE,OAAOjI,YAAA,CAAavD,QAAA,CAASwL,IAAI;IACnC;MACE,OAAOzJ,KAAA,CAAM/B,QAAA,CAASwL,IAAI;IAC5B;MACE,OAAOtG,UAAA,CAAWlF,QAAA,CAASwL,IAAI;IACjC;MACE,OAAOjG,gBAAA,CAAiBvF,QAAA,CAASwL,IAAI;IACvC;MACE,OAAO5F,YAAA,CAAa5F,QAAA,CAASwL,IAAI;IACnC;MACE,OAAO7E,sBAAA,CAAuB3G,QAAA,CAASwL,IAAI;IAC7C;MACE,OAAO1E,sBAAA,CAAuB9G,QAAA,CAASwL,IAAI;IAC7C;MACE,OAAOjE,WAAA,CAAYvH,QAAA,CAASwL,IAAI;IAClC;MACE,OAAOzD,WAAA,CAAY/H,QAAA,CAASwL,IAAI;IAClC;MACE,OAAOtD,WAAA,CAAYlI,QAAA,CAASwL,IAAI;IAClC;MACE,OAAOjN,OAAA,CAAQyB,QAAA,CAASwL,IAAI;IAC9B;MACE,OAAOpD,UAAA,CAAWpI,QAAA,CAASwL,IAAI;IACjC;MACE,OAAO5C,KAAA,CAAM5I,QAAA,CAASwL,IAAI;IAC5B;MACE,OAAOtO,QAAA,CAASsO,IAAI;IACtB;MACE,OAAOtC,IAAA,CAAKlJ,QAAA,CAASwL,IAAI;IAC3B;MACE,OAAOA,IAAA;EACX;AACF;;;AzBtCA,IAAMI,gBAAA,GACHC,EAAA,IACD,UAAU1Y,IAAA,KAAS;EACjB,MAAM2Y,QAAA,GAAW,MAAMD,EAAA,CAAG,GAAG1Y,IAAI;EACjC,IAAI2Y,QAAA,CAASC,MAAA,KAAW,MAAM;IAC5B,OAAOD,QAAA,CAAS7L,IAAA;EAClB,OAAO;IACL,MAAM;MAAE8L,MAAA;MAAQC;IAAa,IAAIF,QAAA;IAEjC,MAAM;MAAE5R,MAAA;MAAQ+R;IAAW,IAAIH,QAAA;IAC/B,MAAMI,KAAA,GAAQ,IAAIxO,qBAAA,CAAsBuO,UAAA,IAAc,IAAI;MACxDhM,IAAA,EAAM,EAAC;MACP/F,MAAA,EAAQA,MAAA,IAAU;MAClB8R;IACF,CAAC;IACDE,KAAA,CAAMH,MAAA,GAASA,MAAA;IACf,MAAMG,KAAA;EACR;AACF;AAEK,SAASC,aAAaC,OAAA,EAAkC;EAC7D,MAAMzZ,OAAA,GAAU,MAAU0Z,cAAA,IAAuF;IAC/G,MAAM;MACJC,MAAA;MACAC,SAAA;MACAC,WAAA;MACAC,MAAA,GAAS5O,OAAA;MACT6O,UAAA,GAAa5O,WAAA;MACb6O,SAAA,GAAY5O;IACd,IAAIqO,OAAA;IACJ,IAAIE,MAAA,EAAQ;MACVxW,WAAA,CAAW,UAAU,0BAA0B;IACjD;IACA,IAAI0W,WAAA,EAAa;MACf1W,WAAA,CACE,eACA,2IACF;IACF;IAEA,MAAM;MAAElC,IAAA;MAAMD,MAAA;MAAQgD,WAAA;MAAaJ,YAAA;MAAcxC,UAAA;MAAYgF;IAAS,IAAIsT,cAAA;IAC1E,MAAMO,GAAA,GAAML,SAAA,IAAaD,MAAA;IAEzB7M,oBAAA,CAAqBmN,GAAG;IAExB,MAAM3E,GAAA,GAAM/U,SAAA,CAAUuZ,MAAA,EAAQC,UAAA,EAAY9Y,IAAI;IAG9C,MAAMiZ,QAAA,GAAW,IAAIvJ,GAAA,CAAI2E,GAAG;IAE5B,IAAItR,WAAA,EAAa;MAEf,MAAMmW,qBAAA,GAAwBlP,aAAA,CAAc;QAAE,GAAGjH;MAAY,CAAC;MAG9D,WAAW,CAACoW,IAAA,EAAKrN,GAAG,KAAKsN,MAAA,CAAOC,OAAA,CAAQH,qBAAqB,GAAG;QAC9D,IAAIpN,GAAA,EAAK;UACP,CAACA,GAAG,EAAEwN,IAAA,CAAK,EAAEC,OAAA,CAAQC,CAAA,IAAKP,QAAA,CAASQ,YAAA,CAAarU,MAAA,CAAO+T,IAAA,EAAKK,CAAW,CAAC;QAC1E;MACF;IACF;IAGA,MAAME,OAAA,GAA+B;MACnC1O,aAAA,EAAe,UAAUgO,GAAG;MAC5B,cAAcD,SAAA;MACd,GAAGpW;IACL;IAEA,IAAIgX,GAAA,GAA4B;IAChC,IAAI;MACF,IAAIxU,QAAA,EAAU;QACZwU,GAAA,GAAM,MAAMnV,eAAA,CAAQP,KAAA,CAAMgV,QAAA,CAASW,IAAA,EAAM;UACvC,GAAGhB,WAAA;UACH7Y,MAAA;UACA2Z,OAAA;UACAlL,IAAA,EAAMrJ;QACR,CAAC;MACH,OAAO;QAELuU,OAAA,CAAQ,cAAc,IAAI;QAE1B,MAAMG,OAAA,GAAU9Z,MAAA,KAAW,SAASI,UAAA,IAAciZ,MAAA,CAAOU,IAAA,CAAK3Z,UAAU,EAAE4Z,MAAA,GAAS;QACnF,MAAMvL,IAAA,GAAOqL,OAAA,GAAU;UAAErL,IAAA,EAAMwL,IAAA,CAAKC,SAAA,CAAUjQ,aAAA,CAAc7J,UAAA,EAAY;YAAE+Z,IAAA,EAAM;UAAM,CAAC,CAAC;QAAE,IAAI;QAE9FP,GAAA,GAAM,MAAMnV,eAAA,CAAQP,KAAA,CAClBgV,QAAA,CAASW,IAAA,EACT7P,SAAA,CAAU6O,WAAA,IAAe,CAAC,GAAG;UAC3B7Y,MAAA;UACA2Z,OAAA;UACA,GAAGlL;QACL,CAAC,CACH;MACF;MAGA,MAAM2L,cAAA,GACJR,GAAA,EAAKD,OAAA,IAAWC,GAAA,CAAID,OAAA,EAASU,GAAA,CAAIxO,SAAA,CAAUvH,OAAA,CAAQmH,WAAW,MAAMI,SAAA,CAAUF,YAAA,CAAaC,IAAA;MAC7F,MAAMU,IAAA,GAAO,OAAO8N,cAAA,GAAiBR,GAAA,CAAIU,IAAA,CAAK,IAAIV,GAAA,CAAIW,IAAA,CAAK;MAE3D,IAAI,CAACX,GAAA,CAAIY,EAAA,EAAI;QACX,MAAMlO,IAAA;MACR;MAEA,OAAO;QACLA,IAAA,EAAMmL,WAAA,CAAYnL,IAAI;QACtB8L,MAAA,EAAQ;MACV;IACF,SAASqC,GAAA,EAAK;MACZ,IAAIA,GAAA,YAAetb,KAAA,EAAO;QACxB,OAAO;UACLmN,IAAA,EAAM;UACN8L,MAAA,EAAQ,CACN;YACEtO,IAAA,EAAM;YACN+K,OAAA,EAAS4F,GAAA,CAAI5F,OAAA,IAAW;UAC1B,EACF;UACAwD,YAAA,EAAcqC,UAAA,CAAWD,GAAA,EAAKb,GAAA,EAAKD,OAAO;QAC5C;MACF;MAEA,OAAO;QACLrN,IAAA,EAAM;QACN8L,MAAA,EAAQuC,WAAA,CAAYF,GAAG;QAAA;QAAA;QAGvBlU,MAAA,EAAQqT,GAAA,EAAKrT,MAAA;QACb+R,UAAA,EAAYsB,GAAA,EAAKtB,UAAA;QACjBD,YAAA,EAAcqC,UAAA,CAAWD,GAAA,EAAKb,GAAA,EAAKD,OAAO;MAC5C;IACF;EACF;EAEA,OAAO1B,gBAAA,CAAiBjZ,OAAO;AACjC;AAIA,SAAS0b,WAAWpO,IAAA,EAAeqN,OAAA,EAA2B;EAC5D,IAAIrN,IAAA,IAAQ,OAAOA,IAAA,KAAS,YAAY,oBAAoBA,IAAA,IAAQ,OAAOA,IAAA,CAAKsO,cAAA,KAAmB,UAAU;IAC3G,OAAOtO,IAAA,CAAKsO,cAAA;EACd;EAEA,MAAMC,KAAA,GAAQlB,OAAA,EAASU,GAAA,CAAI,QAAQ;EACnC,OAAOQ,KAAA,IAAS;AAClB;AAEA,SAASF,YAAYrO,IAAA,EAAgC;EACnD,IAAI,CAAC,CAACA,IAAA,IAAQ,OAAOA,IAAA,KAAS,YAAY,YAAYA,IAAA,EAAM;IAC1D,MAAM8L,MAAA,GAAS9L,IAAA,CAAK8L,MAAA;IACpB,OAAOA,MAAA,CAAO4B,MAAA,GAAS,IAAI5B,MAAA,CAAOzK,GAAA,CAAImN,UAAU,IAAI,EAAC;EACvD;EACA,OAAO,EAAC;AACV;AAEA,SAASA,WAAWvC,KAAA,EAAyC;EAC3D,OAAO;IACLzO,IAAA,EAAMyO,KAAA,CAAMzO,IAAA;IACZ+K,OAAA,EAAS0D,KAAA,CAAM1D,OAAA;IACfkG,WAAA,EAAaxC,KAAA,CAAMyC,YAAA;IACnBC,IAAA,EAAM;MACJC,SAAA,EAAW3C,KAAA,EAAO0C,IAAA,EAAME,UAAA;MACxBpT,SAAA,EAAWwQ,KAAA,EAAO0C,IAAA,EAAMG;IAC1B;EACF;AACF;;;A0BjLO,SAASC,uBAAuB5C,OAAA,EAAkC;EACvE,MAAMzZ,OAAA,GAAUwZ,YAAA,CAAaC,OAAO;EAEpC,OAAO;IACL6C,oBAAA,EAAsB,IAAIxb,sBAAA,CAAuBd,OAAO;IACxDuc,OAAA,EAAS,IAAI/a,SAAA,CAAUxB,OAAO;IAC9BqX,cAAA,EAAgB,IAAInV,eAAA,CAAgBlC,OAAO;IAC3Cwc,MAAA,EAAQ,IAAI9Z,QAAA,CAAS1C,OAAO;IAC5Byc,YAAA,EAAc,IAAI/Y,eAAA,CAAgB1D,OAAO;IACzC0c,WAAA,EAAa,IAAI5Y,aAAA,CAAc9D,OAAO;IACtC2c,aAAA,EAAe,IAAIhX,eAAA,CAAgB3F,OAAO;IAC1CsX,YAAA,EAAc,IAAIxP,cAAA,CAAe9H,OAAO;IACxC4c,YAAA,EAAc,IAAIvU,cAAA,CAAerI,OAAO;IACxCsO,QAAA,EAAU,IAAI1F,UAAA,CAAW5I,OAAO;IAChC6c,YAAA,EAAc,IAAIvT,cAAA,CAAetJ,OAAO;IACxC8c,WAAA,EAAa,IAAIlT,aAAA,CAAc5J,OAAO;IACtC+c,KAAA,EAAO,IAAIhT,OAAA,CAAQ/J,OAAO;IAC1Bgd,OAAA,EAAS,IAAIjb,SAAA,CAAU/B,OAAO;EAChC;AACF;;;AC5DA,SAASwC,UAAA,IAAAya,WAAA,QAAkB;AAsE3B,IAAMC,WAAA,GAAqC5P,IAAA,IAAQ;EACjD,OAAO,MAAM;IACX,MAAMsN,GAAA,GAAM;MAAE,GAAGtN;IAAK;IACtBsN,GAAA,CAAIjB,MAAA,IAAWiB,GAAA,CAAIjB,MAAA,IAAqB,IAAIwD,SAAA,CAAU,GAAG,CAAC;IAC1DvC,GAAA,CAAIhB,SAAA,IAAcgB,GAAA,CAAIhB,SAAA,IAAwB,IAAIuD,SAAA,CAAU,GAAG,CAAC;IAChEvC,GAAA,CAAIwC,MAAA,IAAWxC,GAAA,CAAIwC,MAAA,IAAqB,IAAID,SAAA,CAAU,GAAG,CAAC;IAC1D,OAAO;MAAE,GAAGvC;IAAI;EAClB;AACF;AAEO,SAASyC,mBACdC,aAAA,EACA7D,OAAA,EACA8D,SAAA,EACoB;EACpB,MAAM;IACJC,GAAA,EAAKC,KAAA;IACLC,GAAA,EAAK3U,SAAA;IACL4U,MAAA,EAAQC,KAAA;IACRC,QAAA,EAAUC,OAAA;IACVC,QAAA,EAAUC,OAAA;IACVC,eAAA,EAAiBC,cAAA;IACjBC,GAAA,EAAKpX;EACP,IAAIuW,aAAA;EACJ,MAAM;IAAE3D,MAAA;IAAQC,SAAA;IAAWE,MAAA;IAAQC,UAAA;IAAYlY,KAAA;IAAOuc,OAAA;IAASC,IAAA;IAAMhK;EAAa,IAAIoF,OAAA;EAEtF,IAAIE,MAAA,EAAQ;IACVsD,WAAA,CAAW,UAAU,0BAA0B;EACjD;EAEA,MAAM;IAAE3O;EAAS,IAAI+N,sBAAA,CAAuB;IAC1C1C,MAAA;IACAC,SAAA;IACAE,MAAA;IACAC;EACF,CAAC;EAED,MAAM7Q,QAAA,GAAWoV,cAAA,CAAe;IAC9BvV,SAAA;IACAwV,YAAA,EAAc1c,KAAA;IACd2c,OAAA,EAASA,CAAA,GAAIhe,IAAA,KAAS8N,QAAA,CAASpF,QAAA,CAAS,GAAG1I,IAAI;EACjD,CAAC;EAED,OAAO;IACLid,KAAA;IACAH,aAAA;IACAvU,SAAA;IACAqV,OAAA;IACArX,MAAA;IACAsX,IAAA;IACAT,KAAA;IACAE,OAAA;IACAE,OAAA;IACAE,cAAA;IACA7J,YAAA;IACAnL,QAAA;IACAuV,GAAA,EAAKC,sBAAA,CAAuB;MAAEd,KAAA;MAAOE,OAAA;MAASI,cAAA;MAAgBnX;IAAO,CAAC;IACtE4X,KAAA,EAAOzB,WAAA,CAAY;MAAE,GAAGzD,OAAA;MAAS,GAAG8D;IAAU,CAAC;EACjD;AACF;AAEO,SAASqB,oBAAoBrB,SAAA,EAAsD;EACxF,IAAIA,SAAA,EAAW5D,MAAA,EAAQ;IACrBsD,WAAA,CAAW,UAAU,0BAA0B;EACjD;EAEA,OAAO;IACLK,aAAA,EAAe;IACfvU,SAAA,EAAW;IACXqV,OAAA,EAAS;IACTrX,MAAA,EAAQ;IACRsX,IAAA,EAAM;IACNZ,KAAA,EAAO;IACPG,KAAA,EAAO;IACPE,OAAA,EAAS;IACTE,OAAA,EAAS;IACTE,cAAA,EAAgB;IAChB7J,YAAA,EAAc;IACdnL,QAAA,EAAUA,CAAA,KAAM2V,OAAA,CAAQC,OAAA,CAAQ,IAAI;IACpCL,GAAA,EAAKA,CAAA,KAAM;IACXE,KAAA,EAAOzB,WAAA,CAAYK,SAAS;EAC9B;AACF;AAEO,SAASwB,qBACdC,QAAA,EAQA;EAEA,IAAIA,QAAA,EAAU;IAEZ,OAAOA,QAAA,CAAS,iBAAiB;IAEjC,OAAOA,QAAA,CAAS,kBAAkB;EACpC;EAEA,OAAOA,QAAA;AACT;AAEO,SAASC,mBAA+CC,UAAA,EAAkB;EAC/E,MAAMb,IAAA,GAAOa,UAAA,CAAWb,IAAA,GAAO;IAAE,GAAGa,UAAA,CAAWb;EAAK,IAAIa,UAAA,CAAWb,IAAA;EACnE,MAAMhK,YAAA,GAAe6K,UAAA,CAAW7K,YAAA,GAAe;IAAE,GAAG6K,UAAA,CAAW7K;EAAa,IAAI6K,UAAA,CAAW7K,YAAA;EAE3F0K,oBAAA,CAAqBV,IAAI;EACzBU,oBAAA,CAAqB1K,YAAY;EAEjC,OAAO;IAAE,GAAG6K,UAAA;IAAYb,IAAA;IAAMhK;EAAa;AAC7C;AASO,IAAM8K,0BAAA,GAAiEC,GAAA,IAAc;EAG1F,MAAM;IAAET,KAAA;IAAOzV,QAAA;IAAUuV,GAAA;IAAK,GAAGY;EAAK,IAAID,GAAA;EAC1C,OAAOC,IAAA;AACT;AAMA,IAAMf,cAAA,GAAiCnd,MAAA,IAAU;EAC/C,MAAM;IAAEqd,OAAA;IAASD,YAAA;IAAcxV;EAAU,IAAI5H,MAAA,IAAU,CAAC;EAExD,OAAO,OAAOsY,OAAA,GAAiC,CAAC,MAAM;IACpD,IAAI,CAAC1Q,SAAA,EAAW;MACd,OAAO;IACT;IAEA,IAAI0Q,OAAA,CAAQtQ,QAAA,EAAU;MACpB,OAAOqV,OAAA,CAAQzV,SAAA,EAAW0Q,OAAA,CAAQtQ,QAAQ;IAC5C;IAEA,OAAOoV,YAAA;EACT;AACF;AAEA,IAAMG,sBAAA,GACJA,CAAC;EACCd,KAAA;EACAE,OAAA;EACA/W,MAAA;EACAmX;AACF,MAMA/c,MAAA,IAAU;EACR,IAAI,CAACA,MAAA,EAAQme,UAAA,IAAc,CAACne,MAAA,EAAQ6F,IAAA,EAAM;IACxC,MAAM,IAAI7G,KAAA,CACR,uJACF;EACF;EAEA,IAAI,CAACyd,KAAA,IAAS,CAAC7W,MAAA,IAAU,CAAC+W,OAAA,IAAW,CAACI,cAAA,EAAgB;IACpD,OAAO;EACT;EAEA,IAAI/c,MAAA,CAAOme,UAAA,EAAY;IACrB,OAAOpB,cAAA,CAAeqB,QAAA,CAASpe,MAAA,CAAOme,UAAU;EAClD;EAEA,IAAIne,MAAA,CAAO6F,IAAA,EAAM;IACf,OAAO8W,OAAA,KAAY3c,MAAA,CAAO6F,IAAA;EAC5B;EAEA,OAAO;AACT;;;ACvNK,IAAMwY,sBAAA,GAAN,MAAMC,uBAAA,SAA+Btf,KAAA,CAAM;EAKhDJ,YAAY;IACV2f,MAAA;IACA7J,OAAA;IACA8J;EACF,GAIG;IACD,MAAM9J,OAAO;IAEbwE,MAAA,CAAOuF,cAAA,CAAe,MAAMH,uBAAA,CAAuBI,SAAS;IAE5D,KAAKF,MAAA,GAASA,MAAA;IACd,KAAK9J,OAAA,GAAUA,OAAA;IACf,KAAK6J,MAAA,GAASA,MAAA;EAChB;EAEOI,eAAA,EAAiB;IACtB,OAAO,GAAG,CAAC,KAAKjK,OAAA,EAAS,KAAK6J,MAAM,EAAEjf,MAAA,CAAOsf,CAAA,IAAKA,CAAC,EAAEpf,IAAA,CAAK,GAAG,CAAC,YAAY,KAAKgf,MAAM,mBACnF,KAAKK,YACP;EACF;AACF;;;AC7BO,SAASC,0BAA0BxG,OAAA,EAAkD;EAC1F,IAAIA,OAAA,CAAQyG,WAAA,EAAa;IACvB/c,WAAA,CAAW,eAAe,+BAA+B;EAC3D;EACA,IAAIsW,OAAA,CAAQ0G,UAAA,EAAY;IACtBhd,WAAA,CAAW,cAAc,+BAA+B;EAC1D;EAEAsW,OAAA,CAAQyG,WAAA,GAAchd,mBAAA,CAAoBuW,OAAA,CAAQ2G,cAAc,GAAGF,WAAA,IAAezG,OAAA,CAAQyG,WAAA,IAAe;EACzG,MAAMG,gBAAA,GAAmB,CAAC5c,iBAAA,CAAkBgW,OAAA,CAAQyG,WAAW,IAAItd,cAAA,CAAe6W,OAAA,CAAQ6G,MAAM,IAAI;EACpG,MAAM;IACJ/C,SAAA;IACA2C,WAAA;IACAC,UAAA;IACAI,UAAA;IACAC,cAAA;IACAJ,cAAA;IACAK,QAAA;IACAC,WAAA,GAAc;IACdJ,MAAA;IACAK;EACF,IAAIlH,OAAA;EACJ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAaoCyG,WAAW;AAAA,qCACnBjF,IAAA,CAAKC,SAAA,CAAUqC,SAAA,IAAa,CAAC,CAAC,CAAC;AAAA,cACtDkD,QAAA,GAAW,+BAA+BA,QAAQ,MAAM,EAAE;AAAA,cAC1DH,MAAA,GAAS,4BAA4BA,MAAM,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAwB1BI,WAAW;AAAA,0CACR,IAAI;AAAA,qCACTC,SAAA,GAAY,IAAIA,SAAS,MAAM,MAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAkB3DP,cAAA,GACI,sDAAsDA,cAAc,QACpE,mDAAmDF,WAAW,KACpE;AAAA;AAAA,kBAEEI,MAAA,GAAS,6CAA6CA,MAAM,QAAQ,EAAE;AAAA,kBACtEG,QAAA,GAAW,gDAAgDA,QAAQ,OAAO,EAAE;AAAA;AAAA,gCAG5EF,UAAA,IACA1d,YAAA,CAAa4d,QAAA,IAAYJ,gBAAA,IAAoBH,WAAA,EAAa;IACxDC,UAAA;IACAK;EACF,CAAC,CACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhB;AAGA,eAAsBI,yBAAyBnH,OAAA,EAAkC;EAC/E,IAAIA,OAAA,CAAQyG,WAAA,EAAa;IACvB/c,WAAA,CAAW,eAAe,+BAA+B;EAC3D;EACA,IAAIsW,OAAA,CAAQ0G,UAAA,EAAY;IACtBhd,WAAA,CAAW,cAAc,+BAA+B;EAC1D;EACAsW,OAAA,CAAQyG,WAAA,GAAchd,mBAAA,CAAoBuW,OAAA,CAAQ2G,cAAc,GAAGF,WAAA,IAAezG,OAAA,CAAQyG,WAAA,IAAe;EACzG,MAAM5K,GAAA,GAAMuL,0BAAA,CAA2BpH,OAAO;EAC9C,MAAMN,QAAA,GAAW,MAAMpW,aAAA,CAAc,MACnC0C,eAAA,CAAQP,KAAA,CAAM2b,0BAAA,CAA2BpH,OAAO,GAAG;IACjDzY,MAAA,EAAQ;IACR2Z,OAAA,EAAS;MACP,qBAAqBlB,OAAA,CAAQO,SAAA,IAAa5O;IAC5C;EACF,CAAC,CACH;EAEA,IAAI,CAAC+N,QAAA,CAASqC,EAAA,EAAI;IAChB,MAAM,IAAIgE,sBAAA,CAAuB;MAC/BE,MAAA;MACA7J,OAAA,EAAS,yCAAyCP,GAAG,cAAc6D,QAAA,CAAS5R,MAAM;MAClFoY,MAAA;IACF,CAAC;EACH;EAEA,OAAOxG,QAAA,CAASoC,IAAA,CAAK;AACvB;AAEO,SAASsF,2BAA2BpH,OAAA,EAAkC;EAC3E,IAAIA,OAAA,CAAQyG,WAAA,EAAa;IACvB/c,WAAA,CAAW,eAAe,+BAA+B;EAC3D;EAEAsW,OAAA,CAAQyG,WAAA,GAAchd,mBAAA,CAAoBuW,OAAA,CAAQ2G,cAAc,GAAGF,WAAA,IAAezG,OAAA,CAAQyG,WAAA,IAAe;EACzG,MAAM;IAAEpG,MAAA;IAAQoG,WAAA;IAAaC,UAAA;IAAYK,cAAA;IAAgBJ,cAAA;IAAgBK,QAAA;IAAUC,WAAA;IAAaJ,MAAA;IAAQK;EAAU,IAChHlH,OAAA;EACF,MAAMnE,GAAA,GAAM,IAAI3E,GAAA,CAAImJ,MAAM;EAC1BxE,GAAA,CAAIwL,QAAA,GAAWvgB,SAAA,CAAU+U,GAAA,CAAIwL,QAAA,EAAU3V,WAAA,EAAa,sBAAsB;EAC1EmK,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,oBAAoBma,cAAA,IAAkB1d,2BAAA,CAA4Bod,WAAA,EAAaC,UAAU,CAAC;EAClH,IAAIC,cAAA,EAAgB;IAClB9K,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,mBAAmB+Z,cAAc;EAC3D,OAAO;IACL9K,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,gBAAgB6Z,WAAW;EACrD;EACA,IAAIO,QAAA,EAAU;IACZnL,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,aAAaoa,QAAQ;EAC/C;EAEA,IAAIC,WAAA,EAAa;IACfpL,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,gBAAgB,MAAM;EAChD;EAEAiP,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,eAAesa,SAAA,IAAa,EAAE;EAEtD,IAAI,CAACld,iBAAA,CAAkBgW,OAAA,CAAQyG,WAAW,GAAG;IAC3C5K,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,yBAAyB,MAAM;EACzD;EAEA,IAAIia,MAAA,EAAQ;IACVhL,GAAA,CAAIoF,YAAA,CAAarU,MAAA,CAAO,UAAUia,MAAM;EAC1C;EAEA,OAAOhL,GAAA,CAAIuF,IAAA;AACb;;;AC9MA,SAASkG,KAAA,QAAa;;;ACEtB,IAAMC,SAAA,GAAYA,CAACC,GAAA,EAAchH,GAAA,KAAgBgH,GAAA,CAAItG,OAAA,CAAQU,GAAA,CAAIpB,GAAG;AACpE,IAAMiH,uBAAA,GAA2BC,KAAA,IAA0BA,KAAA,EAAOC,KAAA,CAAM,GAAG,EAAE,CAAC;AAGvE,IAAMC,eAAA,GAAmCA,CAACrhB,OAAA,EAASiB,IAAA,KAAS;EACjE,MAAMqgB,UAAA,GAAa,IAAI3Q,GAAA,CAAI3Q,OAAA,CAAQsV,GAAG;EAEtC,MAAMiM,cAAA,GAAiBP,SAAA,CAAUhhB,OAAA,EAAS6M,SAAA,CAAUvH,OAAA,CAAQ6G,cAAc;EAC1E,MAAMqV,aAAA,GAAgBR,SAAA,CAAUhhB,OAAA,EAAS6M,SAAA,CAAUvH,OAAA,CAAQ8G,aAAa;EACxE,MAAMqV,IAAA,GAAOT,SAAA,CAAUhhB,OAAA,EAAS6M,SAAA,CAAUvH,OAAA,CAAQkH,IAAI;EACtD,MAAMkV,QAAA,GAAWJ,UAAA,CAAWI,QAAA;EAE5B,MAAMC,IAAA,GAAOC,WAAA,CAAY;IAAEF,QAAA;IAAUH,cAAA;IAAgBC,aAAA;IAAeC,IAAA,EAAMA,IAAA,IAAQH,UAAA,CAAWG;EAAK,CAAC;EAEnG,OAAO,IAAI9Q,GAAA,CAAI1P,IAAA,IAAQqgB,UAAA,CAAWR,QAAA,EAAUa,IAAI;AAClD;AASO,IAAMC,WAAA,GAA2BA,CAAC;EAAEF,QAAA;EAAUH,cAAA;EAAgBC,aAAA;EAAeC;AAAK,MAAM;EAC7F,MAAMI,YAAA,GAAeX,uBAAA,CAAwBM,aAAa,KAAKC,IAAA;EAC/D,MAAMK,gBAAA,GAAmBZ,uBAAA,CAAwBK,cAAc,KAAKG,QAAA,EAAU9gB,OAAA,CAAQ,QAAQ,EAAE;EAEhG,IAAI,CAACihB,YAAA,IAAgB,CAACC,gBAAA,EAAkB;IACtC,OAAO;EACT;EAEA,OAAO,GAAGA,gBAAgB,MAAMD,YAAY;AAC9C;;;AD7BO,IAAME,uBAAA,GAA2B7I,EAAA,IAA0C;EAChF,MAAM+H,GAAA,GAAM/H,EAAA,CAAGzT,eAAA,CAAQF,OAAA,EAASE,eAAA,CAAQH,OAAO;EAE/C,MAAM0c,mBAAA,GAAsBX,eAAA,CAAgBJ,GAAG;EAC/C,OAAO,IAAIxb,eAAA,CAAQF,OAAA,CAAQyc,mBAAA,EAAqBf,GAAG;AACrD;AAEO,IAAMgB,aAAA,GAAgBhB,GAAA,IAAkB;EAC7C,IAAI,CAACA,GAAA,EAAK;IACR,OAAO,CAAC;EACV;EACA,MAAMiB,OAAA,GAAUC,6BAAA,CAA8BlB,GAAG;EACjD,MAAMtG,OAAA,GAAUyH,8BAAA,CAA+BnB,GAAG;EAClD,MAAMvG,YAAA,GAAe2H,oCAAA,CAAqCpB,GAAG;EAE7D,OAAO;IACLiB,OAAA;IACAvH,OAAA;IACAD;EACF;AACF;AAEA,IAAM4H,MAAA,GAAUC,GAAA,IAAwB;EACtC,IAAI,CAACA,GAAA,EAAK;IACR,OAAOA,GAAA;EACT;EACA,OAAOA,GAAA,CAAI3hB,OAAA,CAAQ,oBAAoB4hB,kBAAkB;AAC3D;AAEA,IAAML,6BAAA,GAAiClB,GAAA,IAAiB;EACtD,MAAMiB,OAAA,GAAUjB,GAAA,CAAItG,OAAA,IAAWsG,GAAA,CAAItG,OAAA,EAASU,GAAA,CAAI,QAAQ,IAAI0F,KAAA,CAAME,GAAA,CAAItG,OAAA,CAAQU,GAAA,CAAI,QAAQ,CAAW,IAAI,CAAC;EAC1G,OAAQpB,GAAA,IAAoC;IAC1C,MAAMkH,KAAA,GAAQe,OAAA,GAAUjI,GAAG;IAC3B,IAAIkH,KAAA,KAAU,QAAW;MACvB,OAAO;IACT;IACA,OAAOmB,MAAA,CAAOnB,KAAK;EACrB;AACF;AAEA,IAAMiB,8BAAA,GAAkCnB,GAAA,IAAkBhH,GAAA,IAAgBgH,GAAA,EAAKtG,OAAA,EAASU,GAAA,CAAIpB,GAAG,KAAK;AAEpG,IAAMoI,oCAAA,GAAwCpB,GAAA,IAAkBA,GAAA,EAAK3L,GAAA,GAAM,IAAI3E,GAAA,CAAIsQ,GAAA,CAAI3L,GAAG,GAAGoF,YAAA,GAAe;AAErG,IAAM+H,wBAAA,GAA4BC,SAAA,IAA6D;EACpG,OAAOA,SAAA,EAAW9hB,OAAA,CAAQ,WAAW,EAAE;AACzC;;;AE7CO,IAAK4K,UAAA,GAAL,gBAAKmX,WAAA,IAAL;EACLA,WAAA,eAAW;EACXA,WAAA,gBAAY;EACZA,WAAA,mBAAe;EACfA,WAAA,cAAU;EAJA,OAAAA,WAAA;AAAA,GAAAnX,UAAA;AAgFZ,eAAsBoX,SACpBnJ,OAAA,EACA6D,aAAA,EACwB;EACxB,MAAM;IACJ3D,MAAA;IACAC,SAAA;IACAE,MAAA;IACAC,UAAA;IACA8I,WAAA;IACA3C,WAAA;IACAO,QAAA;IACAL,cAAA;IACAE,MAAA;IACAI,WAAA;IACAoC,WAAA;IACAC,WAAA;IACAC,QAAA;IACAC,gBAAA;IACAtC,SAAA;IACAuC,SAAA;IACAC,cAAA;IACAC,cAAA;IACAvhB;EACF,IAAI4X,OAAA;EAEJ,MAAM;IAAEiE,GAAA,EAAK3U,SAAA;IAAW4U,MAAA,EAAQC,KAAA;IAAOO,GAAA,EAAKpX;EAAO,IAAIuW,aAAA;EAEvD,MAAM;IAAEhP,QAAA;IAAUyO,KAAA;IAAOJ;EAAc,IAAIN,sBAAA,CAAuB;IAChE1C,MAAA;IACAC,SAAA;IACAE,MAAA;IACAC;EACF,CAAC;EAED,MAAM,CAACsJ,WAAA,EAAaC,QAAA,EAAUC,gBAAgB,IAAI,MAAM1E,OAAA,CAAQ2E,GAAA,CAAI,CAClET,WAAA,GAAczU,QAAA,CAASxF,UAAA,CAAWC,SAAS,IAAI8V,OAAA,CAAQC,OAAA,CAAQ,MAAS,GACxEkE,QAAA,GAAWjG,KAAA,CAAM9S,OAAA,CAAQlD,MAAM,IAAI8X,OAAA,CAAQC,OAAA,CAAQ,MAAS,GAC5DmE,gBAAA,IAAoBrF,KAAA,GAAQjB,aAAA,CAAc7W,eAAA,CAAgB;IAAEE,cAAA,EAAgB4X;EAAM,CAAC,IAAIiB,OAAA,CAAQC,OAAA,CAAQ,MAAS,EACjH;EAED,MAAMV,OAAA,GAAUiF,WAAA;EAChB,MAAMhF,IAAA,GAAOiF,QAAA;EACb,MAAMjP,YAAA,GAAekP,gBAAA;EAKrB,MAAMrE,UAAA,GAAa7B,kBAAA,CACjBC,aAAA,EACA;IACE1D,SAAA;IACAD,MAAA;IACAG,MAAA;IACAC,UAAA;IACAlY,KAAA,EAAOghB,WAAA,IAAeC,WAAA,IAAe;IACrC1E,OAAA;IACAC,IAAA;IACAhK;EACF,GACA;IAAE,GAAGoF,OAAA;IAASlS,MAAA,EAAQ;EAAoB,CAC5C;EAEA,OAAO;IACLA,MAAA,EAAQ;IACRoY,MAAA,EAAQ;IACR9J,OAAA,EAAS;IACTqK,WAAA;IACAO,QAAA;IACAL,cAAA;IACAE,MAAA;IACAI,WAAA;IACAC,SAAA;IACAuC,SAAA;IACAC,cAAA;IACAC,cAAA;IACAK,UAAA,EAAY;IACZC,cAAA,EAAgB;IAChBC,SAAA,EAAW;IACXC,MAAA,EAAQA,CAAA,KAAM1E,UAAA;IACdrd;EACF;AACF;AAEO,SAASgiB,UAAapK,OAAA,EAAYkG,MAAA,EAAoB9J,OAAA,GAAU,IAAoB;EACzF,MAAM;IACJqK,WAAA;IACAE,cAAA;IACAK,QAAA;IACAC,WAAA;IACAJ,MAAA;IACAK,SAAA;IACAuC,SAAA;IACAC,cAAA;IACAC;EACF,IAAI3J,OAAA;EAEJ,OAAO;IACLlS,MAAA,EAAQ;IACRoY,MAAA;IACA9J,OAAA;IACAqK,WAAA;IACAO,QAAA;IACAL,cAAA;IACAM,WAAA;IACAJ,MAAA;IACAK,SAAA;IACAuC,SAAA;IACAC,cAAA;IACAC,cAAA;IACAK,UAAA,EAAY;IACZC,cAAA,EAAgB;IAChBC,SAAA,EAAW;IACXC,MAAA,EAAQA,CAAA,KAAMhF,mBAAA,CAAoB;MAAE,GAAGnF,OAAA;MAASlS,MAAA,EAAQ;MAAsBoY,MAAA;MAAQ9J;IAAQ,CAAC;IAC/FhU,KAAA,EAAO;EACT;AACF;AAEO,SAAS4a,aAAgBhD,OAAA,EAAYkG,MAAA,EAAoB9J,OAAA,GAAU,IAAuB;EAC/F,MAAM;IACJqK,WAAA;IACAE,cAAA;IACAK,QAAA;IACAC,WAAA;IACAJ,MAAA;IACAK,SAAA;IACAuC,SAAA;IACAC,cAAA;IACAC;EACF,IAAI3J,OAAA;EACJ,OAAO;IACLlS,MAAA,EAAQ;IACRoY,MAAA;IACA9J,OAAA;IACAqK,WAAA;IACAE,cAAA;IACAM,WAAA;IACAJ,MAAA;IACAG,QAAA;IACAE,SAAA;IACAuC,SAAA;IACAC,cAAA;IACAC,cAAA;IACAK,UAAA,EAAY;IACZC,cAAA,EAAgB;IAChBC,SAAA,EAAW;IACXC,MAAA,EAAQA,CAAA,KAAM;IACd/hB,KAAA,EAAO;EACT;AACF;AAEO,SAASiiB,aAAgBrK,OAAA,EAAYkG,MAAA,EAAoB9J,OAAA,GAAU,IAAkB;EAC1F,MAAM;IAAEqK,WAAA;IAAaE,cAAA;IAAgBM,WAAA;IAAaJ,MAAA;IAAQK,SAAA;IAAWuC,SAAA;IAAWC,cAAA;IAAgBC;EAAe,IAC7G3J,OAAA;EACF,OAAO;IACLlS,MAAA,EAAQ;IACRoY,MAAA;IACA9J,OAAA;IACAqK,WAAA;IACAE,cAAA;IACAM,WAAA;IACAJ,MAAA;IACAK,SAAA;IACAuC,SAAA;IACAC,cAAA;IACAC,cAAA;IACAK,UAAA,EAAY;IACZC,cAAA,EAAgB;IAChBC,SAAA,EAAW;IACXC,MAAA,EAAQA,CAAA,KAAM;IACd/hB,KAAA,EAAO;EACT;AACF;;;AC3PO,SAASkiB,iBAAiB;EAC/BC,SAAA;EACAvC,IAAA;EACAD,aAAA;EACAD;AACF,GAKG;EACD,MAAM0C,QAAA,GAAWrC,WAAA,CAAY;IAAEL,cAAA;IAAgBC,aAAA;IAAeE,QAAA,EAAUsC,SAAA,CAAUtC,QAAA;IAAUD;EAAK,CAAC;EAClG,OAAOwC,QAAA,IAAY,IAAItT,GAAA,CAAIsT,QAAQ,EAAEC,MAAA,KAAWF,SAAA,CAAUE,MAAA;AAC5D;AAgBO,IAAMC,oBAAA,GAAuBA,CAAC/K,MAAA,EAAuBtO,IAAA,KAAiB;EAC3E,IAAI,CAACsO,MAAA,EAAQ;IACX,OAAO;EACT;EAEA,OAAOA,MAAA,CAAOgL,IAAA,CAAM3I,GAAA,IAAqBA,GAAA,CAAI3Q,IAAA,KAASA,IAAI;AAC5D;;;AC3CA,SAASlL,wBAAA,QAAgC;;;ACWlC,IAAMykB,SAAA,GAAY;EACvBtD,MAAMuD,MAAA,EAAgBC,IAAA,EAAiC;IACrD,OAAOC,MAAA,CAAMF,MAAA,EAAQG,iBAAA,EAAmBF,IAAI;EAC9C;EAEArJ,UAAU5N,IAAA,EAAyBiX,IAAA,EAAiC;IAClE,OAAOrJ,SAAA,CAAU5N,IAAA,EAAMmX,iBAAA,EAAmBF,IAAI;EAChD;AACF;AAEA,IAAME,iBAAA,GAA8B;EAClCC,KAAA,EAAO;EACPC,IAAA,EAAM;AACR;AAiBA,SAASH,OAAMF,MAAA,EAAgBM,QAAA,EAAoBL,IAAA,GAAqB,CAAC,GAAe;EAEtF,IAAI,CAACK,QAAA,CAASC,KAAA,EAAO;IACnBD,QAAA,CAASC,KAAA,GAAQ,CAAC;IAClB,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIF,QAAA,CAASF,KAAA,CAAM1J,MAAA,EAAQ,EAAE8J,CAAA,EAAG;MAC9CF,QAAA,CAASC,KAAA,CAAMD,QAAA,CAASF,KAAA,CAAMI,CAAC,CAAC,IAAIA,CAAA;IACtC;EACF;EAGA,IAAI,CAACP,IAAA,CAAKQ,KAAA,IAAUT,MAAA,CAAOtJ,MAAA,GAAS4J,QAAA,CAASD,IAAA,GAAQ,GAAG;IACtD,MAAM,IAAIK,WAAA,CAAY,iBAAiB;EACzC;EAGA,IAAIC,GAAA,GAAMX,MAAA,CAAOtJ,MAAA;EACjB,OAAOsJ,MAAA,CAAOW,GAAA,GAAM,CAAC,MAAM,KAAK;IAC9B,EAAEA,GAAA;IAGF,IAAI,CAACV,IAAA,CAAKQ,KAAA,IAAS,GAAIT,MAAA,CAAOtJ,MAAA,GAASiK,GAAA,IAAOL,QAAA,CAASD,IAAA,GAAQ,IAAI;MACjE,MAAM,IAAIK,WAAA,CAAY,iBAAiB;IACzC;EACF;EAGA,MAAME,GAAA,GAAM,KAAKX,IAAA,CAAKW,GAAA,IAAOC,UAAA,EAAcF,GAAA,GAAML,QAAA,CAASD,IAAA,GAAQ,IAAK,CAAC;EAGxE,IAAIA,IAAA,GAAO;EACX,IAAIS,MAAA,GAAS;EACb,IAAIC,OAAA,GAAU;EACd,SAASP,CAAA,GAAI,GAAGA,CAAA,GAAIG,GAAA,EAAK,EAAEH,CAAA,EAAG;IAE5B,MAAM3D,KAAA,GAAQyD,QAAA,CAASC,KAAA,CAAMP,MAAA,CAAOQ,CAAC,CAAC;IACtC,IAAI3D,KAAA,KAAU,QAAW;MACvB,MAAM,IAAI6D,WAAA,CAAY,uBAAuBV,MAAA,CAAOQ,CAAC,CAAC;IACxD;IAGAM,MAAA,GAAUA,MAAA,IAAUR,QAAA,CAASD,IAAA,GAAQxD,KAAA;IACrCwD,IAAA,IAAQC,QAAA,CAASD,IAAA;IAGjB,IAAIA,IAAA,IAAQ,GAAG;MACbA,IAAA,IAAQ;MACRO,GAAA,CAAIG,OAAA,EAAS,IAAI,MAAQD,MAAA,IAAUT,IAAA;IACrC;EACF;EAGA,IAAIA,IAAA,IAAQC,QAAA,CAASD,IAAA,IAAQ,MAAQS,MAAA,IAAW,IAAIT,IAAA,EAAQ;IAC1D,MAAM,IAAIK,WAAA,CAAY,wBAAwB;EAChD;EAEA,OAAOE,GAAA;AACT;AAEA,SAAShK,UAAU5N,IAAA,EAAyBsX,QAAA,EAAoBL,IAAA,GAAyB,CAAC,GAAW;EACnG,MAAM;IAAEe,GAAA,GAAM;EAAK,IAAIf,IAAA;EACvB,MAAMgB,IAAA,IAAQ,KAAKX,QAAA,CAASD,IAAA,IAAQ;EACpC,IAAIO,GAAA,GAAM;EAEV,IAAIP,IAAA,GAAO;EACX,IAAIS,MAAA,GAAS;EACb,SAASN,CAAA,GAAI,GAAGA,CAAA,GAAIxX,IAAA,CAAK0N,MAAA,EAAQ,EAAE8J,CAAA,EAAG;IAEpCM,MAAA,GAAUA,MAAA,IAAU,IAAM,MAAO9X,IAAA,CAAKwX,CAAC;IACvCH,IAAA,IAAQ;IAGR,OAAOA,IAAA,GAAOC,QAAA,CAASD,IAAA,EAAM;MAC3BA,IAAA,IAAQC,QAAA,CAASD,IAAA;MACjBO,GAAA,IAAON,QAAA,CAASF,KAAA,CAAMa,IAAA,GAAQH,MAAA,IAAUT,IAAK;IAC/C;EACF;EAGA,IAAIA,IAAA,EAAM;IACRO,GAAA,IAAON,QAAA,CAASF,KAAA,CAAMa,IAAA,GAAQH,MAAA,IAAWR,QAAA,CAASD,IAAA,GAAOA,IAAM;EACjE;EAGA,IAAIW,GAAA,EAAK;IACP,OAAQJ,GAAA,CAAIlK,MAAA,GAAS4J,QAAA,CAASD,IAAA,GAAQ,GAAG;MACvCO,GAAA,IAAO;IACT;EACF;EAEA,OAAOA,GAAA;AACT;;;ACnIA,IAAMM,SAAA,GAAoC;EACxCC,KAAA,EAAO;EACPC,KAAA,EAAO;EACPC,KAAA,EAAO;AACT;AACA,IAAMC,kBAAA,GAAqB;AAE3B,IAAMC,kBAAA,GAA6C;EACjDJ,KAAA,EAAOG,kBAAA;EACPF,KAAA,EAAOE,kBAAA;EACPD,KAAA,EAAOC;AACT;AAEO,IAAME,IAAA,GAAOzL,MAAA,CAAOU,IAAA,CAAKyK,SAAS;AAElC,SAASO,mBAAmBC,aAAA,EAA8C;EAC/E,MAAMC,IAAA,GAAOT,SAAA,CAAUQ,aAAa;EACpC,MAAM7S,IAAA,GAAO0S,kBAAA,CAAmBG,aAAa;EAE7C,IAAI,CAACC,IAAA,IAAQ,CAAC9S,IAAA,EAAM;IAClB,MAAM,IAAIhT,KAAA,CAAM,yBAAyB6lB,aAAa,qBAAqBF,IAAA,CAAKnlB,IAAA,CAAK,GAAG,CAAC,GAAG;EAC9F;EAEA,OAAO;IACLslB,IAAA,EAAM;MAAE9S,IAAA,EAAMqS,SAAA,CAAUQ,aAAa;IAAE;IACvC7S,IAAA,EAAM0S,kBAAA,CAAmBG,aAAa;EACxC;AACF;;;ACtBA,IAAME,aAAA,GAAiBC,CAAA,IAA8B;EACnD,OAAOxN,KAAA,CAAMC,OAAA,CAAQuN,CAAC,KAAKA,CAAA,CAAEnL,MAAA,GAAS,KAAKmL,CAAA,CAAEC,KAAA,CAAMC,CAAA,IAAK,OAAOA,CAAA,KAAM,QAAQ;AAC/E;AAEO,IAAMC,mBAAA,GAAsBA,CAACC,GAAA,EAAeC,QAAA,KAAuB;EACxE,MAAMC,YAAA,GAAe,CAACD,QAAQ,EAAEjM,IAAA,CAAK,EAAE9Z,MAAA,CAAO4lB,CAAA,IAAK,CAAC,CAACA,CAAC;EACtD,MAAMK,OAAA,GAAU,CAACH,GAAG,EAAEhM,IAAA,CAAK,EAAE9Z,MAAA,CAAO4lB,CAAA,IAAK,CAAC,CAACA,CAAC;EAC5C,MAAMM,oBAAA,GAAuBF,YAAA,CAAazL,MAAA,GAAS,KAAK0L,OAAA,CAAQ1L,MAAA,GAAS;EAEzE,IAAI,CAAC2L,oBAAA,EAAsB;IASzB;EACF;EAEA,IAAI,OAAOJ,GAAA,KAAQ,UAAU;IAC3B,IAAI,CAACE,YAAA,CAAalH,QAAA,CAASgH,GAAG,GAAG;MAC/B,MAAM,IAAI/G,sBAAA,CAAuB;QAC/BE,MAAA;QACAC,MAAA;QACA9J,OAAA,EAAS,oCAAoCoF,IAAA,CAAKC,SAAA,CAAUqL,GAAG,CAAC,yBAAyBtL,IAAA,CAAKC,SAAA,CAC5FuL,YACF,CAAC;MACH,CAAC;IACH;EACF,WAAWP,aAAA,CAAcK,GAAG,GAAG;IAC7B,IAAI,CAACA,GAAA,CAAIK,IAAA,CAAKP,CAAA,IAAKI,YAAA,CAAalH,QAAA,CAAS8G,CAAC,CAAC,GAAG;MAC5C,MAAM,IAAI7G,sBAAA,CAAuB;QAC/BE,MAAA;QACAC,MAAA;QACA9J,OAAA,EAAS,0CAA0CoF,IAAA,CAAKC,SAAA,CAAUqL,GAAG,CAAC,yBAAyBtL,IAAA,CAAKC,SAAA,CAClGuL,YACF,CAAC;MACH,CAAC;IACH;EACF;AACF;AAEO,IAAMI,gBAAA,GAAoBC,GAAA,IAAkB;EACjD,IAAI,OAAOA,GAAA,KAAQ,aAAa;IAC9B;EACF;EAEA,IAAIA,GAAA,KAAQ,OAAO;IACjB,MAAM,IAAItH,sBAAA,CAAuB;MAC/BE,MAAA;MACAC,MAAA;MACA9J,OAAA,EAAS,oBAAoBoF,IAAA,CAAKC,SAAA,CAAU4L,GAAG,CAAC;IAClD,CAAC;EACH;AACF;AAEO,IAAMC,qBAAA,GAAyBC,GAAA,IAAgB;EACpD,IAAI,CAAClB,IAAA,CAAKvG,QAAA,CAASyH,GAAG,GAAG;IACvB,MAAM,IAAIxH,sBAAA,CAAuB;MAC/BE,MAAA;MACAC,MAAA;MACA9J,OAAA,EAAS,yBAAyBoF,IAAA,CAAKC,SAAA,CAAU8L,GAAG,CAAC,gBAAgBlB,IAAI;IAC3E,CAAC;EACH;AACF;AAEO,IAAMmB,cAAA,GAAkB9I,GAAA,IAAiB;EAC9C,IAAI,OAAOA,GAAA,KAAQ,UAAU;IAC3B,MAAM,IAAIqB,sBAAA,CAAuB;MAC/BE,MAAA;MACAC,MAAA;MACA9J,OAAA,EAAS,kEAAkEoF,IAAA,CAAKC,SAAA,CAAUiD,GAAG,CAAC;IAChG,CAAC;EACH;AACF;AAEO,IAAM+I,4BAAA,GAA+BA,CAACC,GAAA,EAAcC,iBAAA,KAAiC;EAC1F,IAAI,CAACD,GAAA,IAAO,CAACC,iBAAA,IAAqBA,iBAAA,CAAkBpM,MAAA,KAAW,GAAG;IAChE;EACF;EAEA,IAAI,CAACoM,iBAAA,CAAkB7H,QAAA,CAAS4H,GAAG,GAAG;IACpC,MAAM,IAAI3H,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS,4CAA4CoF,IAAA,CAAKC,SAAA,CAAUiM,GAAG,CAAC,eAAeC,iBAAiB;IAC1G,CAAC;EACH;AACF;AAEO,IAAMC,iBAAA,GAAoBA,CAACC,GAAA,EAAaC,MAAA,KAAkC;EAC/E,IAAI,OAAOA,MAAA,KAAW,cAAc,CAACA,MAAA,CAAOD,GAAG,GAAG;IAChD,MAAM,IAAI9H,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS;IACX,CAAC;EACH,WAAW,OAAO0R,MAAA,KAAW,YAAYD,GAAA,IAAOA,GAAA,KAAQC,MAAA,EAAQ;IAC9D,MAAM,IAAI/H,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS,kCAAkCoF,IAAA,CAAKC,SAAA,CAAUoM,GAAG,CAAC,eAAeC,MAAM;IACrF,CAAC;EACH;AACF;AAEO,IAAMC,qBAAA,GAAwBA,CAACC,GAAA,EAAaC,aAAA,KAA0B;EAC3E,IAAI,OAAOD,GAAA,KAAQ,UAAU;IAC3B,MAAM,IAAIjI,sBAAA,CAAuB;MAC/BE,MAAA;MACAC,MAAA;MACA9J,OAAA,EAAS,uCAAuCoF,IAAA,CAAKC,SAAA,CAAUuM,GAAG,CAAC;IACrE,CAAC;EACH;EAEA,MAAME,WAAA,GAAc,IAAIC,IAAA,CAAKA,IAAA,CAAKC,GAAA,CAAI,CAAC;EACvC,MAAMC,UAAA,GAAa,mBAAIF,IAAA,CAAK,CAAC;EAC7BE,UAAA,CAAWC,aAAA,CAAcN,GAAG;EAE5B,MAAMO,OAAA,GAAUF,UAAA,CAAWG,OAAA,CAAQ,KAAKN,WAAA,CAAYM,OAAA,CAAQ,IAAIP,aAAA;EAChE,IAAIM,OAAA,EAAS;IACX,MAAM,IAAIxI,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS,gCAAgCiS,UAAA,CAAWI,WAAA,CAAY,CAAC,mBAAmBP,WAAA,CAAYO,WAAA,CAAY,CAAC;IAC/G,CAAC;EACH;AACF;AAEO,IAAMC,qBAAA,GAAwBA,CAACC,GAAA,EAAyBV,aAAA,KAA0B;EACvF,IAAI,OAAOU,GAAA,KAAQ,aAAa;IAC9B;EACF;EAEA,IAAI,OAAOA,GAAA,KAAQ,UAAU;IAC3B,MAAM,IAAI5I,sBAAA,CAAuB;MAC/BE,MAAA;MACAC,MAAA;MACA9J,OAAA,EAAS,2CAA2CoF,IAAA,CAAKC,SAAA,CAAUkN,GAAG,CAAC;IACzE,CAAC;EACH;EAEA,MAAMT,WAAA,GAAc,IAAIC,IAAA,CAAKA,IAAA,CAAKC,GAAA,CAAI,CAAC;EACvC,MAAMQ,aAAA,GAAgB,mBAAIT,IAAA,CAAK,CAAC;EAChCS,aAAA,CAAcN,aAAA,CAAcK,GAAG;EAE/B,MAAME,KAAA,GAAQD,aAAA,CAAcJ,OAAA,CAAQ,IAAIN,WAAA,CAAYM,OAAA,CAAQ,IAAIP,aAAA;EAChE,IAAIY,KAAA,EAAO;IACT,MAAM,IAAI9I,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS,6EAA6EwS,aAAA,CAAcH,WAAA,CAAY,CAAC,mBAAmBP,WAAA,CAAYO,WAAA,CAAY,CAAC;IAC/J,CAAC;EACH;AACF;AAEO,IAAMK,mBAAA,GAAsBA,CAACC,GAAA,EAAyBd,aAAA,KAA0B;EACrF,IAAI,OAAOc,GAAA,KAAQ,aAAa;IAC9B;EACF;EAEA,IAAI,OAAOA,GAAA,KAAQ,UAAU;IAC3B,MAAM,IAAIhJ,sBAAA,CAAuB;MAC/BE,MAAA;MACAC,MAAA;MACA9J,OAAA,EAAS,0CAA0CoF,IAAA,CAAKC,SAAA,CAAUsN,GAAG,CAAC;IACxE,CAAC;EACH;EAEA,MAAMb,WAAA,GAAc,IAAIC,IAAA,CAAKA,IAAA,CAAKC,GAAA,CAAI,CAAC;EACvC,MAAMY,YAAA,GAAe,mBAAIb,IAAA,CAAK,CAAC;EAC/Ba,YAAA,CAAaV,aAAA,CAAcS,GAAG;EAE9B,MAAME,UAAA,GAAaD,YAAA,CAAaR,OAAA,CAAQ,IAAIN,WAAA,CAAYM,OAAA,CAAQ,IAAIP,aAAA;EACpE,IAAIgB,UAAA,EAAY;IACd,MAAM,IAAIlJ,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS,oEAAoE4S,YAAA,CAAaP,WAAA,CAAY,CAAC,mBAAmBP,WAAA,CAAYO,WAAA,CAAY,CAAC;IACrJ,CAAC;EACH;AACF;;;ACtLA,SAASS,cAAA,QAAsB;AAK/B,SAASC,YAAYC,MAAA,EAA6B;EAChD,MAAMC,OAAA,GAAUD,MAAA,CACbjoB,OAAA,CAAQ,uBAAuB,EAAE,EACjCA,OAAA,CAAQ,qBAAqB,EAAE,EAC/BA,OAAA,CAAQ,OAAO,EAAE;EAEpB,MAAMmoB,OAAA,GAAUJ,cAAA,CAAeG,OAAO;EAEtC,MAAM1D,MAAA,GAAS,IAAI4D,WAAA,CAAYD,OAAA,CAAQ/N,MAAM;EAC7C,MAAMiO,OAAA,GAAU,IAAI9D,UAAA,CAAWC,MAAM;EAErC,SAASN,CAAA,GAAI,GAAGoE,MAAA,GAASH,OAAA,CAAQ/N,MAAA,EAAQ8J,CAAA,GAAIoE,MAAA,EAAQpE,CAAA,IAAK;IACxDmE,OAAA,CAAQnE,CAAC,IAAIiE,OAAA,CAAQI,UAAA,CAAWrE,CAAC;EACnC;EAEA,OAAOmE,OAAA;AACT;AAEO,SAASG,UACdnP,GAAA,EACAoP,SAAA,EACAC,QAAA,EACoB;EACpB,IAAI,OAAOrP,GAAA,KAAQ,UAAU;IAC3B,OAAOxU,eAAA,CAAQpB,MAAA,CAAOklB,MAAA,CAAOH,SAAA,CAAU,OAAOnP,GAAA,EAAKoP,SAAA,EAAW,OAAO,CAACC,QAAQ,CAAC;EACjF;EAEA,MAAME,OAAA,GAAUZ,WAAA,CAAY3O,GAAG;EAC/B,MAAMwP,MAAA,GAASH,QAAA,KAAa,SAAS,UAAU;EAE/C,OAAO7jB,eAAA,CAAQpB,MAAA,CAAOklB,MAAA,CAAOH,SAAA,CAAUK,MAAA,EAAQD,OAAA,EAASH,SAAA,EAAW,OAAO,CAACC,QAAQ,CAAC;AACtF;;;AJZA,IAAMI,6BAAA,GAAgC,IAAI;AAE1C,eAAsBC,kBAAkBvgB,GAAA,EAAU6Q,GAAA,EAA0B;EAC1E,MAAM;IAAE2P,MAAA;IAAQC,SAAA;IAAWC;EAAI,IAAI1gB,GAAA;EACnC,MAAM2gB,OAAA,GAAU,IAAIC,WAAA,CAAY;EAChC,MAAM1c,IAAA,GAAOyc,OAAA,CAAQE,MAAA,CAAO,CAACH,GAAA,CAAIF,MAAA,EAAQE,GAAA,CAAIpR,OAAO,EAAE/X,IAAA,CAAK,GAAG,CAAC;EAC/D,MAAM0oB,SAAA,GAAYtD,kBAAA,CAAmB6D,MAAA,CAAO5C,GAAG;EAE/C,MAAMkD,SAAA,GAAY,MAAMd,SAAA,CAAUnP,GAAA,EAAKoP,SAAA,EAAW,QAAQ;EAE1D,OAAO5jB,eAAA,CAAQpB,MAAA,CAAOklB,MAAA,CAAOY,MAAA,CAAOd,SAAA,CAAUlW,IAAA,EAAM+W,SAAA,EAAWL,SAAA,EAAWvc,IAAI;AAChF;AAEO,SAAS8c,UAAUvoB,KAAA,EAAoB;EAC5C,MAAMwoB,UAAA,IAAcxoB,KAAA,IAAS,IAAIyoB,QAAA,CAAS,EAAElJ,KAAA,CAAM,GAAG;EACrD,IAAIiJ,UAAA,CAAWrP,MAAA,KAAW,GAAG;IAC3B,MAAM,IAAIwE,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS;IACX,CAAC;EACH;EAEA,MAAM,CAAC0U,SAAA,EAAWC,UAAA,EAAYC,YAAY,IAAIJ,UAAA;EAE9C,MAAMK,OAAA,GAAU,IAAIC,WAAA,CAAY;EAiBhC,MAAMf,MAAA,GAAS3O,IAAA,CAAK8F,KAAA,CAAM2J,OAAA,CAAQpI,MAAA,CAAO+B,SAAA,CAAUtD,KAAA,CAAMwJ,SAAA,EAAW;IAAExF,KAAA,EAAO;EAAK,CAAC,CAAC,CAAC;EACrF,MAAMrM,OAAA,GAAUuC,IAAA,CAAK8F,KAAA,CAAM2J,OAAA,CAAQpI,MAAA,CAAO+B,SAAA,CAAUtD,KAAA,CAAMyJ,UAAA,EAAY;IAAEzF,KAAA,EAAO;EAAK,CAAC,CAAC,CAAC;EACvF,MAAM8E,SAAA,GAAYxF,SAAA,CAAUtD,KAAA,CAAM0J,YAAA,EAAc;IAAE1F,KAAA,EAAO;EAAK,CAAC;EAE/DnlB,wBAAA,CACE8Y,OAAA,EACA,QACA,qGACA,gBACF;EAEA,OAAO;IACLkR,MAAA;IACAlR,OAAA;IACAmR,SAAA;IACAC,GAAA,EAAK;MACHF,MAAA,EAAQW,SAAA;MACR7R,OAAA,EAAS8R,UAAA;MACTX,SAAA,EAAWY,YAAA;MACXlP,IAAA,EAAM1Z;IACR;EACF;AACF;AAeA,eAAsB+oB,UACpB/oB,KAAA,EACA;EAAE2kB,QAAA;EAAUY,iBAAA;EAAmByD,kBAAA;EAAoBnD,aAAA;EAAeH,MAAA;EAAQtN;AAAI,GACzD;EACrB,IAAI4Q,kBAAA,EAAoB;IACtB1nB,WAAA,CAAW,sBAAsB,8BAA8B;EACjE;EAEA,MAAM2nB,SAAA,GAAYpD,aAAA,IAAiBmD,kBAAA,IAAsBnB,6BAAA;EAEzD,MAAMX,OAAA,GAAUqB,SAAA,CAAUvoB,KAAK;EAE/B,MAAM;IAAE+nB,MAAA;IAAQlR;EAAQ,IAAIqQ,OAAA;EAG5B,MAAM;IAAEjC,GAAA;IAAKE;EAAI,IAAI4C,MAAA;EAErB/C,gBAAA,CAAiBC,GAAG;EACpBC,qBAAA,CAAsBC,GAAG;EAGzB,MAAM;IAAEG,GAAA;IAAKhJ,GAAA;IAAKoI,GAAA;IAAKe,GAAA;IAAKkB,GAAA;IAAKf,GAAA;IAAKW;EAAI,IAAI1P,OAAA;EAE9CuO,cAAA,CAAe9I,GAAG;EAClBmI,mBAAA,CAAoB,CAACC,GAAG,GAAG,CAACC,QAAQ,CAAC;EACrCU,4BAAA,CAA6BC,GAAA,EAAKC,iBAAiB;EACnDC,iBAAA,CAAkBC,GAAA,EAAKC,MAAM;EAC7BC,qBAAA,CAAsBC,GAAA,EAAKqD,SAAS;EACpC3C,qBAAA,CAAsBC,GAAA,EAAK0C,SAAS;EACpCvC,mBAAA,CAAoBC,GAAA,EAAKsC,SAAS;EAElC,IAAIC,cAAA;EAEJ,IAAI;IACFA,cAAA,GAAiB,MAAMpB,iBAAA,CAAkBZ,OAAA,EAAS9O,GAAG;EACvD,SAASwB,GAAA,EAAK;IACZ,MAAM,IAAI+D,sBAAA,CAAuB;MAC/BE,MAAA;MACAC,MAAA;MACA9J,OAAA,EAAS,kCAAkC4F,GAAG;IAChD,CAAC;EACH;EAEA,IAAI,CAACsP,cAAA,EAAgB;IACnB,MAAM,IAAIvL,sBAAA,CAAuB;MAC/BG,MAAA;MACA9J,OAAA,EAAS;IACX,CAAC;EACH;EAEA,OAAO6C,OAAA;AACT;;;AK/IA,SAASsS,cAAc7J,KAAA,EAAwB;EAC7C,MAAM8J,WAAA,GAAchQ,IAAA,CAAKC,SAAA,CAAUiG,KAAK;EACxC,MAAM4I,OAAA,GAAU,IAAIC,WAAA,CAAY;EAChC,MAAMkB,OAAA,GAAUnB,OAAA,CAAQE,MAAA,CAAOgB,WAAW;EAC1C,OAAO5G,SAAA,CAAUnJ,SAAA,CAAUgQ,OAAA,EAAS;IAAE5F,GAAA,EAAK;EAAM,CAAC;AACpD;AAeA,eAAsB6F,QACpBzS,OAAA,EACAuB,GAAA,EACAR,OAAA,EACiB;EACjB,IAAI,CAACA,OAAA,CAAQ4P,SAAA,EAAW;IACtB,MAAM,IAAIlpB,KAAA,CAAM,wBAAwB;EAC1C;EACA,MAAM4pB,OAAA,GAAU,IAAIC,WAAA,CAAY;EAEhC,MAAMX,SAAA,GAAYtD,kBAAA,CAAmBtM,OAAA,CAAQ4P,SAAS;EACtD,IAAI,CAACA,SAAA,EAAW;IACd,MAAM,IAAIlpB,KAAA,CAAM,yBAAyBsZ,OAAA,CAAQ4P,SAAS,EAAE;EAC9D;EAEA,MAAMa,SAAA,GAAY,MAAMd,SAAA,CAAUnP,GAAA,EAAKoP,SAAA,EAAW,MAAM;EACxD,MAAMO,MAAA,GAASnQ,OAAA,CAAQmQ,MAAA,IAAU;IAAE9C,GAAA,EAAK;EAAM;EAE9C8C,MAAA,CAAO5C,GAAA,GAAMvN,OAAA,CAAQ4P,SAAA;EACrB3Q,OAAA,CAAQ8P,GAAA,GAAM4C,IAAA,CAAKC,KAAA,CAAMzD,IAAA,CAAKC,GAAA,CAAI,IAAI,GAAI;EAE1C,MAAMyD,aAAA,GAAgBN,aAAA,CAAcpB,MAAM;EAC1C,MAAM2B,cAAA,GAAiBP,aAAA,CAActS,OAAO;EAC5C,MAAM8S,SAAA,GAAY,GAAGF,aAAa,IAAIC,cAAc;EAEpD,MAAM1B,SAAA,GAAY,MAAMpkB,eAAA,CAAQpB,MAAA,CAAOklB,MAAA,CAAOkC,IAAA,CAAKpC,SAAA,EAAWa,SAAA,EAAWH,OAAA,CAAQE,MAAA,CAAOuB,SAAS,CAAC;EAElG,OAAO,GAAGA,SAAS,IAAInH,SAAA,CAAUnJ,SAAA,CAAU,IAAIiK,UAAA,CAAW0E,SAAS,GAAG;IAAEvE,GAAA,EAAK;EAAM,CAAC,CAAC;AACvF;;;ACxCA,IAAIoG,KAAA,GAAyB,CAAC;AAC9B,IAAIC,aAAA,GAAgB;AAEpB,SAASC,aAAaC,GAAA,EAAa;EACjC,OAAOH,KAAA,CAAMG,GAAG;AAClB;AAEA,SAASC,eAAA,EAAiB;EACxB,OAAOzR,MAAA,CAAO0R,MAAA,CAAOL,KAAK;AAC5B;AAEA,SAASM,WACPC,GAAA,EACAC,gBAAA,GAA2B,MAAO,KAAK,IACvC;EACAR,KAAA,CAAMO,GAAA,CAAIJ,GAAG,IAAII,GAAA;EACjBN,aAAA,GAAgB/D,IAAA,CAAKC,GAAA,CAAI;EAEzB,IAAIqE,gBAAA,IAAoB,GAAG;IACzBC,UAAA,CAAW,MAAM;MACf,IAAIF,GAAA,EAAK;QACP,OAAOP,KAAA,CAAMO,GAAA,CAAIJ,GAAG;MACtB,OAAO;QACLH,KAAA,GAAQ,CAAC;MACX;IACF,GAAGQ,gBAAgB;EACrB;AACF;AAEA,IAAME,WAAA,GAAc;AACpB,IAAMC,UAAA,GAAa;AACnB,IAAMC,WAAA,GAAc;AACpB,IAAMC,UAAA,GAAa;AACnB,IAAMC,UAAA,GAAa;AAUZ,SAASC,sBAAsBC,QAAA,EAA+B;EACnE,IAAI,CAACd,YAAA,CAAaQ,WAAW,GAAG;IAC9B,IAAI,CAACM,QAAA,EAAU;MACb,MAAM,IAAIlN,sBAAA,CAAuB;QAC/BE,MAAA;QACA7J,OAAA,EAAS;QACT8J,MAAA;MACF,CAAC;IACH;IAEA,MAAMgN,OAAA,GAAUD,QAAA,CACb9rB,OAAA,CAAQ,kBAAkB,EAAE,EAC5BA,OAAA,CAAQyrB,UAAA,EAAY,EAAE,EACtBzrB,OAAA,CAAQ0rB,WAAA,EAAa,EAAE,EACvB1rB,OAAA,CAAQ2rB,UAAA,EAAY,EAAE,EACtB3rB,OAAA,CAAQ4rB,UAAA,EAAY,EAAE,EACtB5rB,OAAA,CAAQ,OAAO,GAAG,EAClBA,OAAA,CAAQ,OAAO,GAAG;IAGrBorB,UAAA,CACE;MACEH,GAAA,EAAK;MACLe,GAAA,EAAK;MACL5F,GAAA,EAAK;MACL6F,CAAA,EAAGF,OAAA;MACHG,CAAA,EAAG;IACL,GACA;IAAA;IACF;EACF;EAEA,OAAOlB,YAAA,CAAaQ,WAAW;AACjC;AA6BA,eAAsBW,uBAAuB;EAC3CpT,MAAA;EACAC,SAAA;EACAE,MAAA,GAAS5O,OAAA;EACT6O,UAAA,GAAa5O,WAAA;EACboc,MAAA;EACAsE,GAAA;EACAK,gBAAA,GAAmB,MAAO,KAAK;EAAA;EAC/Bc;AACF,GAAuD;EACrD,MAAMC,kBAAA,GAAqB,CAACrB,YAAA,CAAaC,GAAG,KAAKqB,wBAAA,CAAyB;EAC1E,IAAIF,aAAA,IAAiBC,kBAAA,EAAoB;IACvC,IAAIzO,OAAA;IACJ,MAAMvE,GAAA,GAAML,SAAA,IAAaD,MAAA;IAEzB,IAAIM,GAAA,EAAK;MACPuE,OAAA,GAAUA,CAAA,KAAM2O,iBAAA,CAAkBrT,MAAA,EAAQG,GAAA,EAAKF,UAAU;IAC3D,WAAWwN,MAAA,EAAQ;MACjB/I,OAAA,GAAUA,CAAA,KAAM4O,iBAAA,CAAkB7F,MAAM;IAC1C,OAAO;MACL,MAAM,IAAI/H,sBAAA,CAAuB;QAC/BE,MAAA;QACA7J,OAAA,EAAS;QACT8J,MAAA;MACF,CAAC;IACH;IAEA,MAAM;MAAE5E;IAAK,IAAI,MAAMhY,aAAA,CAA6Cyb,OAAO;IAE3E,IAAI,CAACzD,IAAA,IAAQ,CAACA,IAAA,CAAKC,MAAA,EAAQ;MACzB,MAAM,IAAIwE,sBAAA,CAAuB;QAC/BE,MAAA;QACA7J,OAAA,EAAS;QACT8J,MAAA;MACF,CAAC;IACH;IAEA5E,IAAA,CAAKP,OAAA,CAAQJ,IAAA,IAAO4R,UAAA,CAAW5R,IAAA,EAAK8R,gBAAgB,CAAC;EACvD;EAEA,MAAMD,GAAA,GAAML,YAAA,CAAaC,GAAG;EAE5B,IAAI,CAACI,GAAA,EAAK;IACR,MAAMoB,WAAA,GAAcvB,cAAA,CAAe;IACnC,MAAMwB,OAAA,GAAUD,WAAA,CAAY1e,GAAA,CAAI4e,IAAA,IAAOA,IAAA,CAAI1B,GAAG,EAAElrB,IAAA,CAAK,IAAI;IAEzD,MAAM,IAAI6e,sBAAA,CAAuB;MAC/BE,MAAA;MACA7J,OAAA,EAAS,8DAA8DgW,GAAG,sJACxEyB,OAAA,GAAU,qCAAqCA,OAAO,KAAK,EAC7D;MACA3N,MAAA;IACF,CAAC;EACH;EAEA,OAAOsM,GAAA;AACT;AAEA,eAAemB,kBAAkB7F,MAAA,EAAgB;EAC/C,MAAMjS,GAAA,GAAM,IAAI3E,GAAA,CAAI4W,MAAM;EAC1BjS,GAAA,CAAIwL,QAAA,GAAWvgB,SAAA,CAAU+U,GAAA,CAAIwL,QAAA,EAAU,uBAAuB;EAE9D,MAAM3H,QAAA,GAAW,MAAM1T,eAAA,CAAQP,KAAA,CAAMoQ,GAAA,CAAIuF,IAAI;EAE7C,IAAI,CAAC1B,QAAA,CAASqC,EAAA,EAAI;IAChB,MAAM,IAAIgE,sBAAA,CAAuB;MAC/BE,MAAA;MACA7J,OAAA,EAAS,iCAAiCP,GAAA,CAAIuF,IAAI,cAAc1B,QAAA,CAAS5R,MAAM;MAC/EoY,MAAA;IACF,CAAC;EACH;EAEA,OAAOxG,QAAA,CAASmC,IAAA,CAAK;AACvB;AAEA,eAAe6R,kBAAkBrT,MAAA,EAAgBG,GAAA,EAAaF,UAAA,EAAoB;EAChF,IAAI,CAACE,GAAA,EAAK;IACR,MAAM,IAAIuF,sBAAA,CAAuB;MAC/BE,MAAA;MACA7J,OAAA,EACE;MACF8J,MAAA;IACF,CAAC;EACH;EAEA,MAAMrK,GAAA,GAAM,IAAI3E,GAAA,CAAImJ,MAAM;EAC1BxE,GAAA,CAAIwL,QAAA,GAAWvgB,SAAA,CAAU+U,GAAA,CAAIwL,QAAA,EAAU/G,UAAA,EAAY,OAAO;EAE1D,MAAMZ,QAAA,GAAW,MAAM1T,eAAA,CAAQP,KAAA,CAAMoQ,GAAA,CAAIuF,IAAA,EAAM;IAC7CF,OAAA,EAAS;MACP1O,aAAA,EAAe,UAAUgO,GAAG;MAC5B,gBAAgB;IAClB;EACF,CAAC;EAED,IAAI,CAACd,QAAA,CAASqC,EAAA,EAAI;IAChB,MAAMF,IAAA,GAAO,MAAMnC,QAAA,CAASmC,IAAA,CAAK;IACjC,MAAMkS,qBAAA,GAAwBrJ,oBAAA,CAAqB7I,IAAA,EAAMlC,MAAA,4CAAmD;IAE5G,IAAIoU,qBAAA,EAAuB;MACzB,MAAM7N,MAAA;MAEN,MAAM,IAAIH,sBAAA,CAAuB;QAC/BE,MAAA;QACA7J,OAAA,EAAS2X,qBAAA,CAAsB3X,OAAA;QAC/B8J;MACF,CAAC;IACH;IAEA,MAAM,IAAIH,sBAAA,CAAuB;MAC/BE,MAAA;MACA7J,OAAA,EAAS,iCAAiCP,GAAA,CAAIuF,IAAI,cAAc1B,QAAA,CAAS5R,MAAM;MAC/EoY,MAAA;IACF,CAAC;EACH;EAEA,OAAOxG,QAAA,CAASmC,IAAA,CAAK;AACvB;AAEA,SAAS4R,yBAAA,EAA2B;EAClC,OAAOtF,IAAA,CAAKC,GAAA,CAAI,IAAI8D,aAAA,IAAiBtgB,iCAAA,GAAoC;AAC3E;;;AChOA,eAAsBoiB,YAAY5rB,KAAA,EAAe4X,OAAA,EAAkD;EACjG,MAAM;IACJE,MAAA;IACAC,SAAA;IACAE,MAAA;IACAC,UAAA;IACAyM,QAAA;IACAY,iBAAA;IACAyD,kBAAA;IACAnD,aAAA;IACAH,MAAA;IACA2E,gBAAA;IACA9O,MAAA;IACA4P;EACF,IAAIvT,OAAA;EAEJ,IAAIA,OAAA,CAAQE,MAAA,EAAQ;IAClBxW,WAAA,CAAW,UAAU,0BAA0B;EACjD;EAEA,MAAM;IAAEymB;EAAO,IAAIQ,SAAA,CAAUvoB,KAAK;EAClC,MAAM;IAAEgqB;EAAI,IAAIjC,MAAA;EAEhB,IAAI3P,GAAA;EAEJ,IAAImD,MAAA,EAAQ;IACVnD,GAAA,GAAMwS,qBAAA,CAAsBrP,MAAM;EACpC,WAAW,OAAOmK,MAAA,KAAW,UAAU;IAErCtN,GAAA,GAAM,MAAM8S,sBAAA,CAAuB;MAAExF,MAAA;MAAQsE,GAAA;MAAKK,gBAAA;MAAkBc;IAAc,CAAC;EACrF,WAAWrT,MAAA,IAAUC,SAAA,EAAW;IAE9BK,GAAA,GAAM,MAAM8S,sBAAA,CAAuB;MAAEpT,MAAA;MAAQC,SAAA;MAAWE,MAAA;MAAQC,UAAA;MAAY8R,GAAA;MAAKK,gBAAA;MAAkBc;IAAc,CAAC;EACpH,OAAO;IACL,MAAM,IAAIxN,sBAAA,CAAuB;MAC/BE,MAAA;MACA7J,OAAA,EAAS;MACT8J,MAAA;IACF,CAAC;EACH;EAEA,OAAO,MAAMiL,SAAA,CAAU/oB,KAAA,EAAO;IAC5B2kB,QAAA;IACAY,iBAAA;IACAyD,kBAAA;IACAnD,aAAA;IACAzN,GAAA;IACAsN;EACF,CAAC;AACH;;;ACzDA,IAAMmG,4BAAA,GAAgCC,EAAA,IAAyB,CAAC,CAACA,EAAA,EAAItS,GAAA,CAAI,uBAAuB;AAChG,IAAMuS,aAAA,GAAiBD,EAAA,IAAyBA,EAAA,EAAItS,GAAA,CAAI,gBAAgB,MAAM;AAE9E,IAAMwS,iBAAA,GAAoB;AAE1B,IAAMC,SAAA,GAAa9T,SAAA,IAAkC6T,iBAAA,CAAkBE,IAAA,CAAK/T,SAAA,IAAa,EAAE;AAQpF,IAAMgU,0BAAA,GAA+CvU,OAAA,IAAW;EACrE,MAAM;IAAEE,MAAA;IAAQC,SAAA;IAAWI;EAAU,IAAIP,OAAA;EACzC,MAAMQ,GAAA,GAAML,SAAA,IAAaD,MAAA,IAAU;EACnC,IAAI3W,uBAAA,CAAwBiX,GAAG,KAAK,CAAC6T,SAAA,CAAU9T,SAAS,GAAG;IACzD,OAAO6J,SAAA,CAAUpK,OAAA,4DAAgD;EACnE;EACA,OAAO;AACT;AAEO,IAAMwU,+BAAA,GAAoDxU,OAAA,IAAW;EAC1E,MAAM;IAAEyK,MAAA;IAAQzC,IAAA;IAAMD,aAAA;IAAeD;EAAe,IAAI9H,OAAA;EACxD,MAAMyU,aAAA,GACJhK,MAAA,IACAH,gBAAA,CAAiB;IACfC,SAAA,EAAW,IAAIrT,GAAA,CAAIuT,MAAM;IACzBzC,IAAA;IACAD,aAAA;IACAD;EACF,CAAC;EAEH,IAAI2M,aAAA,EAAe;IACjB,OAAOrK,SAAA,CAAUpK,OAAA,+CAA0C;EAC7D;EACA,OAAO;AACT;AAEO,IAAM0U,qCAAA,GAA0D1U,OAAA,IAAW;EAChF,MAAM;IAAEE,MAAA;IAAQC,SAAA;IAAW8G,WAAA;IAAahG;EAAa,IAAIjB,OAAA;EACzD,MAAMQ,GAAA,GAAML,SAAA,IAAaD,MAAA,IAAU;EACnC,MAAMyU,KAAA,GAAQprB,uBAAA,CAAwBiX,GAAG;EAEzC,IAAImU,KAAA,IAAS,CAAC1N,WAAA,IAAegN,4BAAA,CAA6BhT,YAAY,GAAG;IACvE,OAAO+B,YAAA,CAAahD,OAAA,8DAAiD;EACvE;EACA,OAAO;AACT;AAEO,IAAM4U,qCAAA,GAA0D5U,OAAA,IAAW;EAChF,MAAM;IAAEE,MAAA;IAAQC,SAAA;IAAW0U;EAAU,IAAI7U,OAAA;EACzC,MAAMQ,GAAA,GAAML,SAAA,IAAaD,MAAA,IAAU;EACnC,MAAMiB,GAAA,GAAM5X,uBAAA,CAAwBiX,GAAG;EACvC,IAAIW,GAAA,IAAO,CAAC0T,SAAA,EAAW;IACrB,OAAO7R,YAAA,CAAahD,OAAA,sCAAyC;EAC/D;EACA,OAAO;AACT;AAMO,IAAM8U,sDAAA,GAA2E9U,OAAA,IAAW;EACjG,MAAM;IAAEE,MAAA;IAAQC,SAAA;IAAW4U,QAAA;IAAU/M,IAAA;IAAMD,aAAA;IAAeD;EAAe,IAAI9H,OAAA;EAC7E,MAAMgV,mBAAA,GACJD,QAAA,IAAYzK,gBAAA,CAAiB;IAAEC,SAAA,EAAW,IAAIrT,GAAA,CAAI6d,QAAQ;IAAG/M,IAAA;IAAMD,aAAA;IAAeD;EAAe,CAAC;EACpG,MAAMtH,GAAA,GAAML,SAAA,IAAaD,MAAA,IAAU;EAEnC,IAAI3W,uBAAA,CAAwBiX,GAAG,KAAKwU,mBAAA,EAAqB;IACvD,OAAOhS,YAAA,CAAahD,OAAA,mDAA4C;EAClE;EACA,OAAO;AACT;AAEO,IAAMiV,4CAAA,GAAiEjV,OAAA,IAAW;EACvF,MAAM;IAAEE,MAAA;IAAQC,SAAA;IAAW0U,SAAA;IAAWzL;EAAY,IAAIpJ,OAAA;EACtD,MAAMQ,GAAA,GAAML,SAAA,IAAaD,MAAA,IAAU;EAEnC,IAAI1W,sBAAA,CAAuBgX,GAAG,KAAK,CAACqU,SAAA,IAAa,CAACzL,WAAA,EAAa;IAC7D,OAAOgB,SAAA,CAAUpK,OAAA,oDAA4C;EAC/D;EACA,OAAO;AACT;AAQO,IAAMkV,sBAAA,GAA2ClV,OAAA,IAAW;EACjE,MAAM;IAAE6U;EAAU,IAAI7U,OAAA;EACtB,IAAI6U,SAAA,KAAc,KAAK;IACrB,OAAOzK,SAAA,CAAUpK,OAAA,+CAA0C;EAC7D;EACA,OAAO;AACT;AAGO,IAAMmV,sCAAA,GAA2DnV,OAAA,IAAW;EACjF,MAAM;IAAE6U,SAAA;IAAWzL;EAAY,IAAIpJ,OAAA;EAEnC,IAAI6U,SAAA,IAAaO,MAAA,CAAOC,QAAA,CAASR,SAAS,IAAI,KAAK,CAACzL,WAAA,EAAa;IAC/D,OAAOpG,YAAA,CAAahD,OAAA,sCAAsC;EAC5D;EACA,OAAO;AACT;AAEO,IAAMsV,mBAAA,GAAwC,MAAMtV,OAAA,IAAW;EACpE,MAAM;IAAEqJ;EAAY,IAAIrJ,OAAA;EACxB,MAAM6D,aAAA,GAAgB,MAAM0R,kBAAA,CAAmBvV,OAAA,EAASqJ,WAAW;EACnE,OAAO,MAAMF,QAAA,CAAS;IAAE,GAAGnJ,OAAA;IAAS5X,KAAA,EAAOihB;EAAY,GAAGxF,aAAa;AACzE;AAEO,IAAM2R,mBAAA,GAAwC,MAAMxV,OAAA,IAAW;EACpE,MAAM;IAAEoJ,WAAA;IAAayL;EAAU,IAAI7U,OAAA;EACnC,MAAM6D,aAAA,GAAgB,MAAM0R,kBAAA,CAAmBvV,OAAA,EAASoJ,WAAW;EACnE,MAAMqM,KAAA,GAAQ,MAAMtM,QAAA,CAAS;IAAE,GAAGnJ,OAAA;IAAS5X,KAAA,EAAOghB;EAAY,GAAGvF,aAAa;EAE9E,MAAMlU,GAAA,GAAM8lB,KAAA,CAAMtL,MAAA,CAAO,EAAEtG,aAAA;EAC3B,MAAM6R,qBAAA,GAAwB/lB,GAAA,CAAIof,GAAA,GAAMqG,MAAA,CAAOC,QAAA,CAASR,SAAS;EAEjE,IAAI,CAACA,SAAA,IAAaa,qBAAA,EAAuB;IACvC,OAAO1S,YAAA,CAAahD,OAAA,wCAAuC;EAC7D;EAEA,OAAOyV,KAAA;AACT;AAEA,eAAsBE,qBACpB7K,IAAA,EACA8K,KAAA,EACuB;EACvB,WAAWC,IAAA,IAAQD,KAAA,EAAO;IACxB,MAAMzU,GAAA,GAAM,MAAM0U,IAAA,CAAK/K,IAAI;IAC3B,IAAI3J,GAAA,EAAK;MACP,OAAOA,GAAA;IACT;EACF;EAEA,OAAOiJ,SAAA,CAAUU,IAAA,0CAAqC;AACxD;AAEA,eAAeyK,mBAAmBvV,OAAA,EAAqC5X,KAAA,EAAe;EACpF,MAAM;IAAE6e,WAAA;IAAaD;EAAS,IAAIhH,OAAA;EAClC,IAAI8N,MAAA;EACJ,IAAI7G,WAAA,EAAa;IACf6G,MAAA,GAAS;EACX,WAAW9G,QAAA,EAAU;IACnB8G,MAAA,GAAS9G,QAAA;EACX,OAAO;IACL8G,MAAA,GAAUD,GAAA,IAAgBA,GAAA,CAAIiI,UAAA,CAAW,gBAAgB,KAAKjI,GAAA,CAAI/H,QAAA,CAAS,iBAAiB;EAC9F;EAEA,OAAOkO,WAAA,CAAY5rB,KAAA,EAAO;IAAE,GAAG4X,OAAA;IAAS8N;EAAO,CAAC;AAClD;AAMO,IAAMiI,0BAAA,GAA+C/V,OAAA,IAAW;EACrE,MAAM;IAAE6U,SAAA;IAAW5N,WAAA;IAAahG,YAAA;IAAcV;EAAU,IAAIP,OAAA;EAE5D,MAAMgW,WAAA,GAAc,CAACnB,SAAA,IAAaA,SAAA,KAAc;EAEhD,IAAI5N,WAAA,IAAe+O,WAAA,IAAe,CAAC3B,SAAA,CAAU9T,SAAS,GAAG;IACvD,OAAO6J,SAAA,CAAUpK,OAAA,6DAAoD;EACvE;EAEA,IAAIiH,WAAA,IAAe+O,WAAA,IAAe,CAAC7B,aAAA,CAAclT,YAAY,GAAG;IAC9D,OAAO+B,YAAA,CAAahD,OAAA,6DAAoD;EAC1E;EAEA,OAAO;AACT;;;ACjGA,SAASiW,sBAAsB/O,SAAA,EAA+B1G,GAAA,EAA0C;EACtG,IAAI,CAAC0G,SAAA,IAAa3d,uBAAA,CAAwBiX,GAAG,GAAG;IAC9C,MAAM,IAAI9Z,KAAA,CAAM,8EAA8E;EAChG;AACF;AAEA,SAASwvB,uBAAuBC,gBAAA,EAAsC;EACpE,IAAI,CAACA,gBAAA,EAAkB;IACrB,MAAM,IAAIzvB,KAAA,CAAM,8FAA8F;EAChH;AACF;AAEA,SAAS0vB,+BAA+BC,UAAA,EAAoB5L,MAAA,EAAgB;EAC1E,IAAIvD,SAAA;EACJ,IAAI;IACFA,SAAA,GAAY,IAAIhQ,GAAA,CAAImf,UAAU;EAChC,QAAQ;IACN,MAAM,IAAI3vB,KAAA,CAAM,oDAAoD;EACtE;EAEA,IAAIwgB,SAAA,CAAUuD,MAAA,KAAWA,MAAA,EAAQ;IAC/B,MAAM,IAAI/jB,KAAA,CAAM,kFAAkF;EACpG;AACF;AAEA,eAAsB4vB,oBAAoBtW,OAAA,EAA4D;EACpG,MAAM;IAAEyI,OAAA;IAASvH,OAAA;IAASD;EAAa,IAAIuH,aAAA,CAAaxI,OAAA,EAASzZ,OAAO;EAExE,IAAIyZ,OAAA,CAAQyG,WAAA,EAAa;IACvB/c,WAAA,CAAW,eAAe,+BAA+B;EAC3D;EAEA,IAAIsW,OAAA,CAAQE,MAAA,EAAQ;IAClBxW,WAAA,CAAW,UAAU,0BAA0B;EACjD;EAEAsW,OAAA,GAAU;IACR,GAAGA,OAAA;IACH,GAAGuW,sBAAA,CAAuBvW,OAAA,EAASkB,OAAO;IAC1CuF,WAAA,EAAahd,mBAAA,CAAoBuW,OAAA,CAAQ2G,cAAc,GAAGF,WAAA,IAAezG,OAAA,CAAQyG,WAAA;IACjFpG,MAAA,EAAQL,OAAA,CAAQK,MAAA,IAAU5O,OAAA;IAC1B6O,UAAA,EAAYN,OAAA,CAAQM,UAAA,IAAc5O,WAAA;IAClC0X,WAAA,EAAapJ,OAAA,CAAQoJ,WAAA,IAAeX,OAAA,GAAUrV,SAAA,CAAUlB,OAAA,CAAQC,OAAO;IACvE0iB,SAAA,EAAW7U,OAAA,CAAQ6U,SAAA,IAAapM,OAAA,GAAUrV,SAAA,CAAUlB,OAAA,CAAQE,SAAS;IACrE6O,YAAA,EAAcjB,OAAA,CAAQiB,YAAA,IAAgBA,YAAA,IAAgB;EACxD;EAEA5N,oBAAA,CAAqB2M,OAAA,CAAQG,SAAA,IAAaH,OAAA,CAAQE,MAAM;EAExD,IAAIF,OAAA,CAAQiH,WAAA,EAAa;IACvBgP,qBAAA,CAAsBjW,OAAA,CAAQkH,SAAA,EAAYlH,OAAA,CAAQG,SAAA,IAAaH,OAAA,CAAQE,MAAiB;IACxF,IAAIF,OAAA,CAAQkH,SAAA,IAAalH,OAAA,CAAQyK,MAAA,EAAgD;MAC/E2L,8BAAA,CAA+BpW,OAAA,CAAQkH,SAAA,EAAWlH,OAAA,CAAQyK,MAAM;IAClE;IACAyL,sBAAA,CAAuBlW,OAAA,CAAQgH,QAAA,IAAYhH,OAAA,CAAQ6G,MAAM;EAC3D;EAEA,eAAe2P,qCAAA,EAAuC;IACpD,IAAI;MACF,MAAMf,KAAA,GAAQ,MAAME,oBAAA,CAAqB3V,OAAA,EAAS,CAACsV,mBAAmB,CAAC;MACvE,OAAOG,KAAA;IACT,SAASzT,GAAA,EAAK;MACZ,OAAOyU,WAAA,CAAYzU,GAAA,EAAK,QAAQ;IAClC;EACF;EAEA,eAAe0U,qCAAA,EAAuC;IACpD,IAAI;MACF,MAAMjB,KAAA,GAAQ,MAAME,oBAAA,CAAqB3V,OAAA,EAAS,CAChDwU,+BAAA,EACAD,0BAAA,EACAwB,0BAAA,EACArB,qCAAA,EACAO,4CAAA,EACAL,qCAAA,EACAE,sDAAA,EACAK,sCAAA,EACAD,sBAAA,EACAM,mBAAA,CACD;MAED,OAAOC,KAAA;IACT,SAASzT,GAAA,EAAK;MACZ,OAAOyU,WAAA,CAAYzU,GAAA,EAAK,QAAQ;IAClC;EACF;EAEA,SAASyU,YAAYzU,GAAA,EAAcuE,YAAA,EAA4B;IAC7D,IAAIvE,GAAA,YAAe+D,sBAAA,EAAwB;MACzC/D,GAAA,CAAIuE,YAAA,GAAeA,YAAA;MAEnB,MAAMoQ,0BAAA,GAA6B,oFAGnC,CAAE7Q,QAAA,CAAS9D,GAAA,CAAIkE,MAAM;MAErB,IAAIyQ,0BAAA,EAA4B;QAC9B,IAAIpQ,YAAA,KAAiB,UAAU;UAC7B,OAAO8D,YAAA,CAAyCrK,OAAA,EAASgC,GAAA,CAAIkE,MAAA,EAAQlE,GAAA,CAAIqE,cAAA,CAAe,CAAC;QAC3F;QACA,OAAOrD,YAAA,CAAyChD,OAAA,EAASgC,GAAA,CAAIkE,MAAA,EAAQlE,GAAA,CAAIqE,cAAA,CAAe,CAAC;MAC3F;MACA,OAAO+D,SAAA,CAAsCpK,OAAA,EAASgC,GAAA,CAAIkE,MAAA,EAAQlE,GAAA,CAAIqE,cAAA,CAAe,CAAC;IACxF;IACA,OAAO+D,SAAA,CAAsCpK,OAAA,4CAA2CgC,GAAA,CAAc5F,OAAO;EAC/G;EAEA,IAAI4D,OAAA,CAAQqJ,WAAA,EAAa;IACvB,OAAOmN,oCAAA,CAAqC;EAC9C;EACA,OAAOE,oCAAA,CAAqC;AAC9C;AAEO,IAAME,iBAAA,GAAqBlvB,MAAA,IAAyB;EACzD,MAAM;IAAE+e,WAAA;IAAauD,UAAA;IAAYhD,QAAA;IAAUiD,cAAA;IAAgB/D,MAAA;IAAQ9J,OAAA;IAASuK,cAAA;IAAgBM,WAAA;IAAaJ;EAAO,IAC9Gnf,MAAA;EACF,OAAO;IAAE+e,WAAA;IAAauD,UAAA;IAAYhD,QAAA;IAAUiD,cAAA;IAAgB/D,MAAA;IAAQ9J,OAAA;IAASuK,cAAA;IAAgBM,WAAA;IAAaJ;EAAO;AACnH;AAOO,IAAM0P,sBAAA,GAAyBA,CACpCvW,OAAA,EACAkB,OAAA,KACG;EACH,IAAI,CAACA,OAAA,EAAS;IACZ,OAAO,CAAC;EACV;EAEA,OAAO;IACLmI,WAAA,EAAaL,wBAAA,CAAyBhJ,OAAA,CAAQqJ,WAAA,IAAenI,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQ2G,aAAa,CAAC;IACrGiY,MAAA,EAAQzK,OAAA,CAAQyK,MAAA,IAAUvJ,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQiH,MAAM;IAC1DkV,IAAA,EAAMhI,OAAA,CAAQgI,IAAA,IAAQ9G,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQkH,IAAI;IACpDgV,aAAA,EAAe/H,OAAA,CAAQ+H,aAAA,IAAiB7G,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQ8G,aAAa;IAC/EkkB,aAAA,EAAe7W,OAAA,CAAQ6W,aAAA,IAAiB3V,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQ4G,aAAa;IAC/EqV,cAAA,EACE9H,OAAA,CAAQ8H,cAAA,IACR5G,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQ0G,wBAAwB,KAClD2O,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQ6G,cAAc;IAC1CqiB,QAAA,EAAU/U,OAAA,CAAQ+U,QAAA,IAAY7T,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQ+G,QAAQ;IAChE2N,SAAA,EAAWP,OAAA,CAAQO,SAAA,IAAaW,OAAA,CAAQ9N,SAAA,CAAUvH,OAAA,CAAQgH,SAAS;EACrE;AACF;;;ACjNO,SAASikB,0BAA0BpvB,MAAA,EAA0C;EAClF,MAAM;IAAEqvB;EAAU,IAAIrvB,MAAA;EACtB,MAAM;IACJwY,MAAA,EAAQ8W,eAAA,GAAkB;IAC1B7W,SAAA,EAAW8W,kBAAA,GAAqB;IAChCtT,MAAA,EAAQuT,eAAA,GAAkB;IAC1B7W,MAAA,GAAS5O,OAAA;IACT6O,UAAA,GAAa5O,WAAA;IACb+U,WAAA,EAAa0Q,oBAAA,GAAuB;IACpCnQ,QAAA,EAAUoQ,aAAA,GAAgB;IAC1BzQ,cAAA,EAAgB0Q,uBAAA,GAA0B;IAC1CpQ,WAAA,EAAaqQ,oBAAA,GAAuB;IACpCzQ,MAAA,EAAQ0Q,eAAA,GAAkB;IAC1BxK,QAAA,EAAUyK,iBAAA,GAAoB;IAC9BjX,SAAA,EAAWkX;EACb,IAAI/vB,MAAA,CAAOsY,OAAA;EAEX,MAAM0X,oBAAA,GAAsBpB,CAAC;IAC3BpW,MAAA,EAAQyX,aAAA;IACRxX,SAAA,EAAWyX,gBAAA;IACX7K,QAAA,EAAU8K,eAAA;IACVpR,WAAA,EAAaqR,kBAAA;IACb9Q,QAAA,EAAU+Q,eAAA;IACVpR,cAAA,EAAgBqR,qBAAA;IAChBrU,MAAA,EAAQsU,aAAA;IACRhR,WAAA,EAAaiR,kBAAA;IACbrR,MAAA,EAAQsR,aAAA;IACRlX,YAAA;IACA,GAAG2E;EACL,MAAiE;IAC/D,OAAO0Q,mBAAA,CAA4B;MACjC,GAAG1Q,IAAA;MACH1F,MAAA,EAAQyX,aAAA,IAAiBX,eAAA;MACzB7W,SAAA,EAAWyX,gBAAA,IAAoBX,kBAAA;MAC/BlK,QAAA,EAAU8K,eAAA,IAAmBL,iBAAA;MAC7BnX,MAAA;MACAC,UAAA;MACAmG,WAAA,EAAaqR,kBAAA,IAAsBX,oBAAA;MACnCnQ,QAAA,EAAU+Q,eAAA,IAAmBX,aAAA;MAC7BzQ,cAAA,EAAgBqR,qBAAA,IAAyBX,uBAAA;MACzCpQ,WAAA,EAAaiR,kBAAA,IAAsBZ,oBAAA;MACnCzQ,MAAA,EAAQsR,aAAA,IAAiBZ,eAAA;MACzB5T,MAAA,EAAQsU,aAAA,IAAiBf,eAAA;MACzBjW;IACF,CAAC;EACH;EAEA,MAAMmX,iBAAA,GAAoBA,CAAC;IACzB3R,WAAA,EAAaqR,kBAAA;IACbnR,cAAA,EAAgBqR,qBAAA;IAChBhR,QAAA,EAAU+Q,eAAA;IACV9Q,WAAA,EAAaiR,kBAAA;IACbrR,MAAA,EAAQsR,aAAA;IACR,GAAGvS;EACL,MACEY,yBAAA,CAA0B;IACxB,GAAGZ,IAAA;IACHa,WAAA,EAAaqR,kBAAA,IAAsBX,oBAAA;IACnCnQ,QAAA,EAAU+Q,eAAA,IAAmBX,aAAA;IAC7BzQ,cAAA,EAAgBqR,qBAAA,IAAyBX,uBAAA;IACzCpQ,WAAA,EAAaiR,kBAAA,IAAsBZ,oBAAA;IACnCzQ,MAAA,EAAQsR,aAAA,IAAiBZ;EAC3B,CAAC;EAEH,MAAMc,wBAAA,GAA2BA,CAAC;IAChC5R,WAAA,EAAaqR,kBAAA;IACbnR,cAAA,EAAgBqR,qBAAA;IAChBhR,QAAA,EAAU+Q,eAAA;IACV9Q,WAAA,EAAaiR,kBAAA;IACbrR,MAAA,EAAQsR,aAAA;IACR5X,SAAA,EAAW+X,gBAAA;IACX,GAAG1S;EACL,MAA+B;IAC7B,OAAOuB,wBAAA,CAAyB;MAC9B,GAAGvB,IAAA;MACHvF,MAAA;MACAoG,WAAA,EAAaqR,kBAAA,IAAsBX,oBAAA;MACnCxQ,cAAA,EAAgBqR,qBAAA,IAAyBX,uBAAA;MACzCrQ,QAAA,EAAU+Q,eAAA,IAAmBX,aAAA;MAC7BnQ,WAAA,EAAaiR,kBAAA,IAAsBZ,oBAAA;MACnCzQ,MAAA,EAASsR,aAAA,IAAiBZ,eAAA;MAC1BhX,SAAA,EAAW+X,gBAAA,IAAoBb;IACjC,CAAC;EACH;EAEA,MAAMc,2BAAA,GAA8BnR,0BAAA;EAGpC,MAAMoR,yBAAA,GAA4BA,CAAA,KAAMzB,SAAA,CAAU/T,YAAA,CAAa9Y,eAAA,CAAgB;EAE/E,OAAO;IACLosB,mBAAA,EAAAoB,oBAAA;IACAU,iBAAA;IACAC,wBAAA;IACAG,yBAAA;IACAD,2BAAA;IACA3B;EACF;AACF;;;ACvHA,IAAM6B,QAAA,GAAWA,CAACC,SAAA,EAAmBC,WAAA,KAAyB;EAC5D,IAAI9c,GAAA;EACJ,IAAI,CAAC6c,SAAA,CAAU5C,UAAA,CAAW,MAAM,GAAG;IACjC,IAAI,CAAC6C,WAAA,IAAe,CAACA,WAAA,CAAY7C,UAAA,CAAW,MAAM,GAAG;MACnD,MAAM,IAAIpvB,KAAA,CAAM,oEAAoE;IACtF;IAEA,MAAMkyB,OAAA,GAAU,IAAI1hB,GAAA,CAAIyhB,WAAW;IACnC9c,GAAA,GAAM,IAAI3E,GAAA,CAAIwhB,SAAA,EAAWE,OAAA,CAAQnO,MAAM;EACzC,OAAO;IACL5O,GAAA,GAAM,IAAI3E,GAAA,CAAIwhB,SAAS;EACzB;EAEA,IAAIC,WAAA,EAAa;IACf9c,GAAA,CAAIoF,YAAA,CAAa4X,GAAA,CAAI,gBAAgBF,WAAW;EAClD;EAEA,OAAO9c,GAAA,CAAIgV,QAAA,CAAS;AACtB;AAaO,SAASiI,SAAS;EAAEC,eAAA;EAAiBtP,SAAA;EAAWvC,SAAA;EAAWT,WAAA;EAAaE;AAAe,GAAmB;EAC/G,IAAI,CAACF,WAAA,EAAa;IAChBA,WAAA,GAAchd,mBAAA,CAAoBkd,cAAc,GAAGF,WAAA;EACrD,OAAO;IACL/c,WAAA,CAAW,eAAe,+BAA+B;EAC3D;EAEA,MAAMsvB,eAAA,GAAkBC,oBAAA,CAAqBxS,WAAW;EAExD,MAAMyS,gBAAA,GAAmBA,CAAC;IAAEC;EAAc,IAAkB,CAAC,MAAM;IACjE,IAAI,CAAC1P,SAAA,IAAa,CAACuP,eAAA,EAAiB;MAClClvB,YAAA,CAAasvB,+BAAA,CAAgC;IAC/C;IAEA,MAAMC,iBAAA,GAAoB,GAAGL,eAAe;IAC5C,OAAOD,eAAA,CAAgBN,QAAA,CAAShP,SAAA,IAAa4P,iBAAA,EAAmBF,aAAa,CAAC;EAChF;EAEA,MAAMG,gBAAA,GAAmBA,CAAC;IAAEH;EAAc,IAAkB,CAAC,MAAM;IACjE,IAAI,CAACjS,SAAA,IAAa,CAAC8R,eAAA,EAAiB;MAClClvB,YAAA,CAAasvB,+BAAA,CAAgC;IAC/C;IAEA,MAAMG,iBAAA,GAAoB,GAAGP,eAAe;IAC5C,OAAOD,eAAA,CAAgBN,QAAA,CAASvR,SAAA,IAAaqS,iBAAA,EAAmBJ,aAAa,CAAC;EAChF;EAEA,OAAO;IAAED,gBAAA;IAAkBI;EAAiB;AAC9C;AAEA,SAASL,qBAAqBxS,WAAA,EAAsB;EAClD,IAAI,CAACA,WAAA,EAAa;IAChB,OAAO;EACT;EAGA,MAAMuS,eAAA,GAAkBvS,WAAA,CAErBtf,OAAA,CAAQ,4BAA4B,gBAAgB,EACpDA,OAAA,CAAQ,+BAA+B,WAAW;EACrD,OAAO,WAAW6xB,eAAe;AACnC;;;AhEtDO,SAASQ,MAAMxZ,OAAA,EAAuB;EAC3C,MAAM8K,IAAA,GAAO;IAAE,GAAG9K;EAAQ;EAC1B,MAAM+W,SAAA,GAAYnU,sBAAA,CAAuBkI,IAAI;EAC7C,MAAM2O,YAAA,GAAe3C,yBAAA,CAA0B;IAAE9W,OAAA,EAAS8K,IAAA;IAAMiM;EAAU,CAAC;EAE3E,MAAM2C,aAAA,GAAgB;IACpB,GAAG3C,SAAA;IACH,GAAG0C,YAAA;IAAA;AAAA;AAAA;IAIHE,kBAAA,EAAoB7O;EACtB;EAIA1kB,yBAAA,CACEszB,aAAA,EACA,sBACA,wEACF;EAEA,OAAOA,aAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}